zend_version	;	現在の Zend Engine のバージョンを取得する	;	string zend_version ( void )	;	現在実行中の Zend Engine のバージョンを含む文字列を返します。
func_num_args	;	関数に渡された引数の数を返す	;	int func_num_args ( void )	;	関数に渡された引数の数を取得します。
func_get_arg	;	引数のリストから要素をひとつ返す	;	mixed func_get_arg ( int $arg_num )	;	ユーザーが定義した関数の引数リストから、指定した引数を取得します。
func_get_args	;	関数の引数リストを配列として返す	;	array func_get_args ( void )	;	関数の引数リストを配列で取得します。
strlen	;	文字列の長さを得る	;	int strlen ( string $string )	;	与えられた string の長さを返します。
strcmp	;	バイナリセーフな文字列比較	;	int strcmp ( string $str1, string $str2 )	;	
strncmp	;	最初の n 文字についてバイナリセーフな文字列比較を行う	;	int strncmp ( string $str1, string $str2, int $len )	;	この関数は strcmp() に似ていますが、 各文字列から(最大)文字数(len) を比較に使用するところが異なります。
strcasecmp	;	大文字小文字を区別しないバイナリセーフな文字列比較を行う	;	int strcasecmp ( string $str1, string $str2 )	;	大文字小文字を区別しないバイナリセーフな文字列比較を行います。
strncasecmp	;	バイナリセーフで大文字小文字を区別しない文字列比較を、最初の n 文字について行う	;	int strncasecmp ( string $str1, string $str2, int $len )	;	この関数は、 strcasecmp() に似ていますが、 各文字列から比較する文字数(の上限)(len) を指定できるという違いがあります。どちらかの文字列が lenより短い場合、その文字列の長さが比較時に使用されます。
each	;	配列から現在のキーと値のペアを返して、カーソルを進める	;	array each ( array &$array )	;	配列から現在のキーと値のペアを返して、カーソルを進めます。
error_reporting	;	出力する PHP エラーの種類を設定する	;	int error_reporting ([ int $level ] )	;	error_reporting() 関数は、 error_reporting ディレクティブを 実行時に設定します。PHP には多くのエラーレベルがあり、 この関数によりスクリプトの持続時間(実行時間)のレベルが設定されます。 オプションの level を指定しなかった場合は、 error_reporting() は単に現在のエラーレベルを返します。
define	;	名前を指定して定数を定義する	;	bool define ( string $name, mixed $value [, bool $case_insensitive = false ] )	;	実行時に、名前を指定して定数を定義します。
defined	;	指定した名前の定数が存在するかどうかを調べる	;	bool defined ( string $name )	;	指定した定数が存在し、定義されているかどうかを調べます。
get_class	;	オブジェクトのクラス名を返す	;	string get_class ([ object $object = NULL ] )	;	指定した object のクラス名を取得します。
get_called_class	;	"静的遅延束縛" のクラス名	;	string get_called_class ( void )	;	静的メソッドのコール元のクラス名を取得します。
get_parent_class	;	オブジェクトの親クラスの名前を取得する	;	string get_parent_class ([ mixed $object ] )	;	オブジェクトあるいはクラスの親クラスの名前を取得します。
method_exists	;	クラスメソッドが存在するかどうかを確認する	;	bool method_exists ( mixed $object, string $method_name )	;	指定した object にクラスメソッドが存在するかどうかを調べます。
property_exists	;	オブジェクトもしくはクラスにプロパティが存在するかどうかを調べる	;	bool property_exists ( mixed $class, string $property )	;	この関数は、与えられたプロパティ property が 指定されたクラスに存在するかどうかを確認します。
class_exists	;	クラスが定義済みかどうかを確認する	;	bool class_exists ( string $class_name [, bool $autoload = true ] )	;	この関数は指定したクラスが定義されているかどうかを調べます。
interface_exists	;	インターフェイスが宣言されているかどうかを確認する	;	bool interface_exists ( string $interface_name [, bool $autoload = true ] )	;	指定したインターフェイスが定義されているかどうかを調べます。
function_exists	;	指定した関数が定義されている場合に TRUE を返す	;	bool function_exists ( string $function_name )	;	組み込みの内部関数およびユーザー定義関数の中から、 function_name で指定した名前の関数を探します。
class_alias	;	クラスのエイリアスを作成する	;	bool class_alias ( string $original, string $alias [, bool $autoload = TRUE ] )	;	alias という名前のエイリアスを、 定義済みのクラス original に対して作成します。 エイリアスは、元のクラスとまったく同一のものとなります。
get_included_files	;	include または require で読み込まれたファイルの名前を配列として返す	;	array get_included_files ( void )	;	この関数は、 include 、 include_once 、 require あるいは require_once によりスクリプトにロードされたすべてのファイルの名前を取得します。
get_required_files	;	get_included_files()  のエイリアス	;		;	
is_subclass_of	;	あるオブジェクトが指定したクラスのサブクラスに属するかどうかを調べる	;	bool is_subclass_of ( mixed $object, string $class_name [, bool $allow_string = TRUE ] )	;	指定した object が、その親のひとつに class_name を持つかどうかを調べます。
is_a	;	オブジェクトがこのクラスのものであるか、このクラスをその親クラスのひとつとしているかどうかを調べる	;	bool is_a ( object $object, string $class_name [, bool $allow_string = FALSE ] )	;	指定した object がこのクラスのものであるか、 あるいはこのクラスをその親クラスのひとつとしているかどうかを調べます。
get_class_vars	;	クラスのデフォルトプロパティを取得する	;	array get_class_vars ( string $class_name )	;	指定したクラスのデフォルトプロパティを取得します。
get_object_vars	;	指定したオブジェクトのプロパティを取得する	;	array get_object_vars ( object $object )	;	指定した object について、 そのスコープ内でアクセス可能な非 static プロパティを取得します。
get_class_methods	;	クラスメソッドの名前を取得する	;	array get_class_methods ( mixed $class_name )	;	クラスメソッドの名前を取得します。
trigger_error	;	ユーザーレベルのエラー/警告/通知メッセージを生成する	;	bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )	;	ユーザーエラーを発生するために使用され、 組み込みのエラーハンドラまたは新しいエラーハンドラ ( set_error_handler() ) として設定済みのユーザー定義関数と組み合わせて使用されます。
user_error	;	trigger_error()  のエイリアス	;		;	
set_error_handler	;	ユーザー定義のエラーハンドラ関数を設定する	;	handler ( int $errno, string $errstr [, string $errfile [, int $errline [, array $errcontext ]]] )	;	スクリプトのエラー処理を行うユーザー関数 (error_handler)を設定します。
restore_error_handler	;	以前のエラーハンドラ関数を回復する	;	bool restore_error_handler ( void )	;	set_error_handler() を使用してエラーハンドラ関数を 変更した後、元のエラーハンドラ(組込またはユーザー定義関数)に戻すために 使用されます。
set_exception_handler	;	ユーザー定義の例外ハンドラ関数を設定する	;	callable set_exception_handler ( callable $exception_handler )	;	例外が try/catch ブロックの中でキャッチされなかった場合の デフォルトの例外ハンドラを設定します。 例外は、exception_handler がコールされた後に 停止します。
restore_exception_handler	;	以前の例外ハンドラ関数を回復する	;	bool restore_exception_handler ( void )	;	set_exception_handler() を使用して例外ハンドラ関数を 変更した後、元の例外ハンドラ(組込またはユーザー定義関数)に戻すために 使用されます。
get_declared_classes	;	定義済のクラスの名前を配列として返す	;	array get_declared_classes ( void )	;	Gets the declared classes.
get_declared_interfaces	;	宣言されている全てのインターフェイスの配列を返す	;	array get_declared_interfaces ( void )	;	宣言されているインターフェイスを取得します。
get_defined_functions	;	定義済みの全ての関数を配列で返す	;	array get_defined_functions ( void )	;	すべての定義済み関数を配列で返します。
get_defined_vars	;	全ての定義済の変数を配列で返す	;	array get_defined_vars ( void )	;	この関数は、環境変数、サーバー変数、 get_defined_vars() がコールされたスコープ内でユーザーが定義した変数を含む、全ての の定義済の変数のリストを有する多次元の配列を返します。
create_function	;	匿名関数 (ラムダ形式) を作成する	;	string create_function ( string $args, string $code )	;	指定したパラメータにより匿名関数を作成し、その関数のユニークな名前を返します。
get_resource_type	;	リソース型を返す	;	string get_resource_type ( resource $handle )	;	この関数は、指定したリソースの型を取得します。
get_loaded_extensions	;	コンパイル/ロードされている全てのモジュールの名前を配列として返す	;	array get_loaded_extensions ([ bool $zend_extensions = false ] )	;	この関数は、PHPインタプリタにコンパイル、 ロードされている全てのモジュールの名前を返します。
extension_loaded	;	ある拡張機能がロードされているかどうかを調べる	;	bool extension_loaded ( string $name )	;	拡張モジュールがロードされているかどうかを調べます。
get_extension_funcs	;	あるモジュールの関数名を配列として返す	;	array get_extension_funcs ( string $module_name )	;	この関数は、module_name で示したモジュールで定義された全ての関数の名前を返します。
get_defined_constants	;	すべての定数の名前とその値を連想配列として返す	;	array get_defined_constants ([ bool $categorize = false ] )	;	現在定義されている全ての定数の名前と値を返します。返される値には、 拡張モジュールにより作成された定数や define() 関数で作成された定数も含まれます。
debug_backtrace	;	バックトレースを生成する	;	array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )	;	debug_backtrace() は PHP バックトレースを生成します。
debug_print_backtrace	;	バックトレースを表示する	;	void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )	;	debug_print_backtrace() は PHP バックトレースを 表示します。関数のコール、include / require されているファイル、 そして eval() された内容などが表示されます。
gc_collect_cycles	;	すべての既存ガベージサイクルを強制的に収集する	;	int gc_collect_cycles ( void )	;	すべての既存ガベージサイクルを強制的に収集します。
gc_enabled	;	循環参照コレクタの状態を返す	;	bool gc_enabled ( void )	;	循環参照コレクタの状態を返します。
gc_enable	;	循環参照コレクタを有効にする	;	void gc_enable ( void )	;	zend.enable_gc を 1 に設定して、循環参照コレクタを有効にします。
gc_disable	;	循環参照コレクタを無効にする	;	void gc_disable ( void )	;	zend.enable_gc を 0 に設定して、循環参照コレクタを無効にします。
strtotime	;	英文形式の日付を Unix タイムスタンプに変換する	;	int strtotime ( string $time [, int $now = time() ] )	;	
date	;	ローカルの日付/時刻を書式化する	;	string date ( string $format [, int $timestamp = time() ] )	;	指定された引数 timestamp を、与えられた フォーマット文字列によりフォーマットし、日付文字列を返します。 タイムスタンプが与えられない場合は、現在の時刻が使われます。 つまり timestamp はオプションであり そのデフォルト値は time() の値です。
idate	;	ローカルな時刻/日付を整数として整形する	;	int idate ( string $format [, int $timestamp = time() ] )	;	指定された引数 timestamp を、 与えられたフォーマット文字列によりフォーマットし、日付数値を返します。 タイムスタンプが与えられない場合は、現在のローカル時刻が使われます。 つまり、timestamp はオプションであり、 そのデフォルト値は time() の値です。
gmdate	;	GMT/UTC の日付/時刻を書式化する	;	string gmdate ( string $format [, int $timestamp = time() ] )	;	date() 関数と同じですが、返される時刻が グリニッジ標準時 (GMT) であるところが異なります。
mktime	;	日付を Unix のタイムスタンプとして取得する	;	int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1 ]]]]]]] )	;	与えられた引数に従って UNIX のタイムスタンプを返します。 このタイムスタンプは、Unix epoch(1970年1月1日00:00:00 GMT)から 指定された時刻までの通算秒を表す長整数です。
gmmktime	;	GMT 日付から Unix タイムスタンプを取得する	;	int gmmktime ([ int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1 ]]]]]]] )	;	指定されるパラメータが GMT 日付を表すこと以外は mktime() と同じです。 gmmktime() は内部で mktime() を使用しているので、ローカル時刻として有効な値のみが使用可能です。
checkdate	;	グレゴリオ暦の日付/時刻の妥当性を確認します	;	bool checkdate ( int $month, int $day, int $year )	;	引数で指定された日付の妥当性をチェックします。 各パラメータが適切に指定されている場合に、妥当であると判断されます。
strftime	;	ロケールの設定に基づいてローカルな日付・時間をフォーマットする	;	string strftime ( string $format [, int $timestamp = time() ] )	;	ローカルの時刻・日付を、ロケール設定にもとづいてフォーマットします。 月および曜日の名前、およびその他の言語依存の文字列は、 setlocale() で設定された現在のロケールを尊重して表示されます。
gmstrftime	;	ロケールの設定に基づいて GMT/UTC 時刻/日付をフォーマットする	;	string gmstrftime ( string $format [, int $timestamp = time() ] )	;	グリニッジ標準時を返すこと以外は、 strftime() と同じ動作をします。例えば、東部標準時 (GMT -0500) で実行した場合、以下の最初の行は "Dec 31 1998 20:00:00" を出力し、二行目は "Jan 01 1999 01:00:00" を出力します。
time	;	現在の Unix タイムスタンプを返す	;	int time ( void )	;	現在時刻を Unix エポック (1970 年 1 月 1 日 00:00:00 GMT) からの通算秒として返します。
localtime	;	ローカルタイムを得る	;	array localtime ([ int $timestamp = time() [, bool $is_associative = false ]] )	;	localtime() 関数は、C 言語の 同名の関数コールにより返される構造体と同じ内容の配列を返します。
getdate	;	日付/時刻情報を取得する	;	array getdate ([ int $timestamp = time() ] )	;	timestamp に関する日付情報を有する連想配列を返します。 timestamp が指定されない場合は、現在のローカルな時間に関する情報を返します。
date_create	;	DateTime::__construct()  のエイリアス	;		;	
date_create_from_format	;	DateTime::createFromFormat()  のエイリアス	;		;	
date_parse	;	指定した日付に関する詳細な情報を連想配列で返す	;	array date_parse ( string $date )	;	
date_parse_from_format	;	指定した書式でフォーマットされた日付についての情報を取得する	;	array date_parse_from_format ( string $format, string $date )	;	指定した日付についての詳細情報を連想配列で返します。
date_get_last_errors	;	DateTime::getLastErrors()  のエイリアス	;		;	
date_format	;	DateTime::format()  のエイリアス	;		;	
date_modify	;	DateTime::modify()  のエイリアス	;		;	
date_add	;	DateTime::add()  のエイリアス	;		;	
date_sub	;	DateTime::sub()  のエイリアス	;		;	
date_timezone_get	;	DateTime::getTimezone()  のエイリアス	;		;	
date_timezone_set	;	DateTime::setTimezone()  のエイリアス	;		;	
date_offset_get	;	DateTime::getOffset()  のエイリアス	;		;	
date_diff	;	DateTime::diff()  のエイリアス	;		;	
date_time_set	;	DateTime::setTime()  のエイリアス	;		;	
date_date_set	;	DateTime::setDate()  のエイリアス	;		;	
date_isodate_set	;	DateTime::setISODate()  のエイリアス	;		;	
date_timestamp_set	;	DateTime::setTimestamp()  のエイリアス	;		;	
date_timestamp_get	;	DateTime::getTimestamp()  のエイリアス	;		;	
timezone_open	;	DateTimeZone::__construct()  のエイリアス	;		;	
timezone_name_get	;	DateTimeZone::getName()  のエイリアス	;		;	
timezone_name_from_abbr	;	略称からタイムゾーン名を返す	;	string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )	;	
timezone_offset_get	;	DateTimeZone::getOffset()  のエイリアス	;		;	
timezone_transitions_get	;	DateTimeZone::getTransitions()  のエイリアス	;		;	
timezone_location_get	;	DateTimeZone::getLocation()  のエイリアス	;		;	
timezone_identifiers_list	;	DateTimeZone::listIdentifiers()  のエイリアス	;		;	
timezone_abbreviations_list	;	DateTimeZone::listAbbreviations()  のエイリアス	;		;	
timezone_version_get	;	timezonedb のバージョンを取得する	;	string timezone_version_get ( void )	;	timezonedb の現在のバージョンを返します。
date_interval_create_from_date_string	;	DateInterval::createFromDateString()  のエイリアス	;		;	
date_interval_format	;	DateInterval::format()  のエイリアス	;		;	
date_default_timezone_set	;	スクリプト中の日付/時刻関数で使用されるデフォルトタイムゾーンを設定する	;	bool date_default_timezone_set ( string $timezone_identifier )	;	date_default_timezone_set() は、日付/時刻関数で 使用されるデフォルトタイムゾーンを設定します。
date_default_timezone_get	;	スクリプト中の日付/時刻関数で使用されるデフォルトタイムゾーンを取得する	;	string date_default_timezone_get ( void )	;	この関数は、デフォルトのタイムゾーンを以下の優先順位で取得して返します。 date_default_timezone_set() 関数を使用して 設定したタイムゾーン (もし何か設定されていれば) を読み込む PHP 5.4.0 より前のバージョンのみ: TZ 環境変数 (もし空白でなければ) を読み込む date.timezone ini オプション (設定されていれば) を読み込む PHP 5.4.0 より前のバージョンのみ: ホスト OS に問い合わせる (もし OS がそれに対応しており、許可されていれば)。 これは、タイムゾーンを推測するアルゴリズムを使います。 このアルゴリズムはあらゆる状況で正しく動作するとは限りません。 この段階に到達したときには警告が表示されます。 この推測が正しくなることに期待するのではなく、 date.timezone に正しいタイムゾーンを設定するようにしましょう。
date_sunrise	;	指定した日付と場所についての日の出時刻を返す	;	mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0 ]]]]] )	;	date_sunrise() は、与えられた日付 (timestamp で指定する) と場所についての日の出の時刻を返します。
date_sunset	;	指定した日付と場所についての日の入り時刻を返す	;	mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0 ]]]]] )	;	date_sunset() は、与えられた日付 (timestamp で指定する) と場所についての日の入り時刻を返します。
date_sun_info	;	日の出/日の入り時刻と薄明かり (twilight) の開始/終了時刻の情報を含む配列を返す	;	array date_sun_info ( int $time, float $latitude, float $longitude )	;	
ereg	;	正規表現によるマッチングを行う	;	int ereg ( string $pattern, string $string [, array &$regs ] )	;	
ereg_replace	;	正規表現による置換を行う	;	string ereg_replace ( string $pattern, string $replacement, string $string )	;	
eregi	;	大文字小文字を区別せずに正規表現によるマッチングを行う	;	int eregi ( string $pattern, string $string [, array &$regs ] )	;	この関数は、アルファベット文字をマッチングさせる際に 大文字小文字の区別をしないこと以外は ereg() と同じです。
eregi_replace	;	大文字小文字を区別せずに正規表現による置換を行う	;	string eregi_replace ( string $pattern, string $replacement, string $string )	;	この関数は、アルファベット文字をマッチングさせる際に大文字 小文字の区別をしないこと以外は ereg_replace() と同じです。
split	;	正規表現により文字列を分割し、配列に格納する	;	array split ( string $pattern, string $string [, int $limit = -1 ] )	;	string を、正規表現によって配列に分割します。
spliti	;	大文字小文字を区別しない正規表現により文字列を分割し、配列に格納する	;	array spliti ( string $pattern, string $string [, int $limit = -1 ] )	;	string を、正規表現によって配列に分割します。
sql_regcase	;	大文字小文字を区別しないマッチングのための正規表現を作成する	;	string sql_regcase ( string $string )	;	大文字小文字を区別しないマッチングのための正規表現を作成します。
libxml_set_streams_context	;	次のlibxmlドキュメントの読込／書きこみのためにストリームコンテキストを設定する	;	void libxml_set_streams_context ( resource $streams_context )	;	次のlibxmlドキュメントの読込／書きこみのためにストリームコンテキストを設定します。
libxml_use_internal_errors	;	libxmlエラーを無効にし、ユーザーが必要に応じてエラー情報を取得できるようにする	;	bool libxml_use_internal_errors ([ bool $use_errors = false ] )	;	libxml_use_internal_errors() により、 標準のlibxmlエラーを無効にし、ユーザーによるエラー処理を有効にすることができます。
libxml_get_last_error	;	libxmlから直近のエラーを取得する	;	LibXMLError libxml_get_last_error ( void )	;	libxmlから直近のエラーを取得します。
libxml_clear_errors	;	libxmlエラーハンドラをクリアする	;	void libxml_clear_errors ( void )	;	libxml_clear_errors() は、libxmlエラーバッファをクリアします。
libxml_get_errors	;	エラー配列を取得する	;	array libxml_get_errors ( void )	;	エラー配列を取得します。
libxml_disable_entity_loader	;	外部エンティティの読み込み機能を無効にする	;	bool libxml_disable_entity_loader ([ bool $disable = true ] )	;	外部エンティティ読み込み機能の有効/無効を切り替えます。
openssl_pkey_free	;	秘密鍵を開放する	;	void openssl_pkey_free ( resource $key )	;	この関数は、 openssl_pkey_new() で作成した秘密鍵を開放します。
openssl_pkey_new	;	新規に秘密鍵を生成する	;	resource openssl_pkey_new ([ array $configargs ] )	;	openssl_pkey_new() は、 新しい秘密鍵と公開鍵の鍵ペアを作成します。鍵の公開部は、 openssl_pkey_get_public() を使用して取得可能です。
openssl_pkey_export	;	エクスポート可能な形式で、キーを文字列に取得する	;	bool openssl_pkey_export ( mixed $key, string &$out [, string $passphrase [, array $configargs ]] )	;	openssl_pkey_export() は、 key を PEM エンコードした文字列として取得し、 out（参照渡し）に格納します。
openssl_pkey_export_to_file	;	エクスポート可能な形式で、キーをファイルに取得する	;	bool openssl_pkey_export_to_file ( mixed $key, string $outfilename [, string $passphrase [, array $configargs ]] )	;	openssl_pkey_export_to_file() は、ASCII 変換された (PEM エンコードされた) key を outfilename のファイルに保存します。
openssl_pkey_get_private	;	秘密鍵を取得する	;	resource openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] )	;	openssl_get_privatekey() は key をパースし、他の関数で使用できるよう準備します。
openssl_pkey_get_public	;	証明書から公開鍵を抽出し、使用できるようにする	;	resource openssl_pkey_get_public ( mixed $certificate )	;	openssl_get_publickey() は公開鍵を certificate から抽出し、 他の関数で使用できるよう準備します。
openssl_pkey_get_details	;	キーの詳細の配列を返す	;	array openssl_pkey_get_details ( resource $key )	;	この関数は、キーの詳細 (bits, key, type) を返します。
openssl_free_key	;	キーリソースを開放する	;	void openssl_free_key ( resource $key_identifier )	;	openssl_free_key() は、指定した key_identifier が指すキーをメモリから開放します。
openssl_get_privatekey	;	openssl_pkey_get_private()  のエイリアス	;		;	
openssl_get_publickey	;	openssl_pkey_get_public()  のエイリアス	;		;	
openssl_x509_read	;	X.509 証明書をパースし、リソース ID を返す	;	resource openssl_x509_read ( mixed $x509certdata )	;	openssl_x509_read() は、 x509certdata で指定した証明書をパースし、 その証明書用のリソースIDを返します。
openssl_x509_free	;	証明書リソースを開放する	;	void openssl_x509_free ( resource $x509cert )	;	openssl_x509_free() は、メモリから指定した x509cert リソースに関連した証明書を開放します。
openssl_x509_parse	;	X509 証明書をパースし、配列として情報を返す	;	array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )	;	openssl_x509_parse() は、指定した x509cert に関する情報を返します。この情報には 題名、発行者名、目的、発効日および有効期限等が含まれます。
openssl_x509_checkpurpose	;	証明書が特定の目的に使用可能かどうか確認する	;	int openssl_x509_checkpurpose ( mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )	;	openssl_x509_checkpurpose() は証明書を調べ、 purpose で指定した目的に使用可能であるかどうかを確認します。
openssl_x509_check_private_key	;	秘密鍵が証明書に対応するかを確認する	;	bool openssl_x509_check_private_key ( mixed $cert, mixed $key )	;	key が cert に対応する秘密鍵かどうかを調べます。
openssl_x509_export	;	証明書を文字列としてエクスポートする	;	bool openssl_x509_export ( mixed $x509, string &$output [, bool $notext = TRUE ] )	;	openssl_x509_export() は、 PEM エンコード形式の x509 を文字列 output に保存します。
openssl_x509_export_to_file	;	証明書をファイルにエクスポートする	;	bool openssl_x509_export_to_file ( mixed $x509, string $outfilename [, bool $notext = TRUE ] )	;	openssl_x509_export_to_file() は、 PEM エンコード形式の x509 をファイル outfilename に保存します。
openssl_pkcs12_export	;	PKCS#12 互換の証明書保存ファイルを変数にエクスポートする	;	bool openssl_pkcs12_export ( mixed $x509, string &$out, mixed $priv_key, string $pass [, array $args ] )	;	openssl_pkcs12_export() は、 x509 を PKCS#12 ファイルフォーマットにしたものを out で指定した文字列に格納します。
openssl_pkcs12_export_to_file	;	PKCS#12 互換の証明書保存ファイルをエクスポートする	;	bool openssl_pkcs12_export_to_file ( mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args ] )	;	openssl_pkcs12_export_to_file() は、 x509 をファイル filename に PKCS#12 フォーマットで保存します。
openssl_pkcs12_read	;	PKCS#12 認証ストアをパースして配列形式にする	;	bool openssl_pkcs12_read ( string $pkcs12, array &$certs, string $pass )	;	openssl_pkcs12_read() は、 pkcs12 で指定した PKCS#12 認証ストアをパースして certs で指定した配列に格納します。
openssl_csr_new	;	CSR を作成する	;	mixed openssl_csr_new ( array $dn, resource &$privkey [, array $configargs [, array $extraattribs ]] )	;	openssl_csr_new() は、新しい CSR (Certificate Signing Request) を dn の情報に基づいて作成します。dn は、証明書で使用される識別名です。
openssl_csr_export	;	CSR を文字列としてエクスポートする	;	bool openssl_csr_export ( resource $csr, string &$out [, bool $notext = true ] )	;	openssl_csr_export() は、Certificate Signing Request csr を受け取り、 それを out に ASCII テキストとして保存します。 このパラメータは参照で渡されます。
openssl_csr_export_to_file	;	CSR をファイルにエクスポートする	;	bool openssl_csr_export_to_file ( resource $csr, string $outfilename [, bool $notext = true ] )	;	openssl_csr_export_to_file() は、Certificate Signing Request csr を受け取り、 それを outfilename という名前のファイルに ASCII テキストとして保存します。
openssl_csr_sign	;	他の CERT（あるいは自分自身）で証明書をサインする	;	resource openssl_csr_sign ( mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs [, int $serial = 0 ]] )	;	openssl_csr_sign() は、 指定した CSR を用いて x509 証明書リソースを作成します。
openssl_csr_get_subject	;	CERT の subject を返す	;	array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )	;	
openssl_csr_get_public_key	;	CERT の公開鍵を返す	;	resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )	;	
openssl_digest	;	ダイジェストを計算	;	string openssl_digest ( string $data, string $method [, bool $raw_output = false ] )	;	与えられたメソッドを使って、与えられたデータに対するダイジェスト・ハッシュ値を計算し、 未加工の、または binhex エンコードされた文字列を返します。
openssl_encrypt	;	データを暗号化	;	string openssl_encrypt ( string $data, string $method, string $password [, bool $raw_output = false [, string $iv = "" ]] )	;	与えられた文字列を与えられたメソッドとキーで暗号化して、 未加工の、または base64 エンコードされた文字列を返します。
openssl_decrypt	;	データを復号	;	string openssl_decrypt ( string $data, string $method, string $password [, bool $raw_input = false [, string $iv = "" ]] )	;	未加工の、または base64 エンコードされた文字列を受け入れて、 与えられたメソッドとキーを使って文字列を復号します。
openssl_cipher_iv_length	;	暗号 iv の長さを取得	;	int openssl_cipher_iv_length ( string $method )	;	暗号 iv の長さを取得。
openssl_sign	;	署名を生成する	;	bool openssl_sign ( string $data, string &$signature, mixed $priv_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )	;	openssl_sign() は、指定した data に関してハッシュ計算に SHA1 を使用して 署名を計算し、その後 priv_key_id で 指定した秘密鍵を使用して暗号化を行います。data 自体は 暗号化されないことに注意してください。
openssl_verify	;	署名を検証する	;	int openssl_verify ( string $data, string $signature, mixed $pub_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )	;	openssl_verify() は、 pub_key_id が指す公開鍵を使用し、 指定した data に関して signature が正しいことを確認します。 署名が正しいと判定されるためには、 その公開鍵が署名の際に使用した秘密鍵に対応していることを必要とします。
openssl_seal	;	データをシール(暗号化)する	;	int openssl_seal ( string $data, string &$sealed_data, array &$env_keys, array $pub_key_ids [, string $method ] )	;	openssl_seal() は、ランダムに生成された秘密鍵により RC4 を使用して data をシール(暗号化) します。このキーは、pub_key_ids を ID とする 公開鍵で暗号化されます。これは、暗号化されたデータを複数の受信者に 送信できることを意味します（この際、各受信者は送信側に公開鍵を 提供します）。各受信者は、暗号化されたデータとその受信者の 公開鍵で暗号化されたエンベロープキーを受け取る必要があります。
openssl_open	;	シール(暗号化)されたデータをオープン(復号)する	;	bool openssl_open ( string $sealed_data, string &$open_data, string $env_key, mixed $priv_key_id [, string $method ] )	;	openssl_open() は、キー ID priv_key_id およびエンベロープキー env_key に関連する公開鍵を使用して、 sealed_data をオープン(復号)します。 エンベロープキーは、データがシール(暗号化)された際に生成され、特定の 一つの公開鍵でのみ使用することが可能です。詳細な情報については、 openssl_seal() を参照ください。
openssl_pkcs7_verify	;	S/MIME でサインされたメッセージの署名を検証する	;	mixed openssl_pkcs7_verify ( string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )	;	openssl_pkcs7_verify() は、 指定したファイルの S/MIME メッセージを読み込み、デジタル署名を評価します。
openssl_pkcs7_decrypt	;	S/MIME 暗号化されたメッセージを復号する	;	bool openssl_pkcs7_decrypt ( string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey ] )	;	infilename で指定したファイル中の S/MIME 暗号化されたメッセージを、recipcert および recipkey で指定した証明書と公開鍵を用いて復号します。
openssl_pkcs7_sign	;	S/MIME メッセージにサインする	;	bool openssl_pkcs7_sign ( string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )	;	openssl_pkcs7_sign() は、 infilename という名前のファイルの内容について パラメータ signcert および privkey で指定した証明書と公開鍵を用いてサインをします。
openssl_pkcs7_encrypt	;	S/MIME メッセージを暗号化する	;	bool openssl_pkcs7_encrypt ( string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )	;	openssl_pkcs7_encrypt() は、 infile という名前のファイルの内容を RC2 40 ビット暗号により暗号化します。この内容は、 recipcerts で指定した意図する受信者によってのみ読むことが可能です。
openssl_private_encrypt	;	秘密鍵でデータを暗号化する	;	bool openssl_private_encrypt ( string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_private_encrypt() は、data を秘密鍵 key で暗号化し、それを crypted に格納します。暗号化されたデータは、 openssl_public_decrypt() を用いて復号可能です。
openssl_private_decrypt	;	秘密鍵でデータを復号する	;	bool openssl_private_decrypt ( string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_private_decrypt() は、事前に openssl_public_encrypt() で暗号化された data を復号し、それを decrypted に格納します。
openssl_public_encrypt	;	公開鍵でデータを暗号化する	;	bool openssl_public_encrypt ( string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_public_encrypt() は、data を公開鍵 key で暗号化し、それを crypted に格納します。暗号化されたデータは openssl_private_decrypt() を用いて復号可能です。
openssl_public_decrypt	;	公開鍵でデータを復号する	;	bool openssl_public_decrypt ( string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_public_decrypt() は、事前に openssl_private_encrypt() で暗号化された data を復号し、それを decrypted に格納します。
openssl_get_md_methods	;	利用可能なダイジェスト・メソッドを取得	;	array openssl_get_md_methods ([ bool $aliases = false ] )	;	利用可能なダイジェスト・メソッドの一覧を取得します。
openssl_get_cipher_methods	;	利用可能な暗号メソッドを取得	;	array openssl_get_cipher_methods ([ bool $aliases = false ] )	;	利用可能な暗号メソッドの一覧を取得します。
openssl_dh_compute_key	;	リモート DH キー及びローカル DH キーの公開値に関して、共有される秘密を計算	;	string openssl_dh_compute_key ( string $pub_key, resource $dh_key )	;	
openssl_random_pseudo_bytes	;	疑似乱数のバイト文字列を生成する	;	string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )	;	疑似乱数のバイト文字列を生成します。長さは length パラメータで指定します。
openssl_error_string	;	OpenSSL エラーメッセージを返す	;	string openssl_error_string ( void )	;	openssl_error_string() は、 OpenSSL ライブラリから直近のエラーを返します。 エラーメッセージはキューに格納されるので、 すべての情報を集めるにはこの関数を複数回コールする必要があります。 最後のエラーが、いちばん最近に発生したエラーとなります。
preg_match	;	正規表現によるマッチングを行う	;	int preg_match ( string $pattern, string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] )	;	pattern で指定した正規表現により subject を検索します。
preg_match_all	;	繰り返し正規表現検索を行う	;	int preg_match_all ( string $pattern, string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )	;	subject を検索し、 pattern に指定した正規表現にマッチした すべての文字列を、flags で指定した 順番で、matches に代入します。
preg_replace	;	正規表現検索および置換を行う	;	mixed preg_replace ( mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count ]] )	;	subject に関して pattern を用いて検索を行い、 replacement に置換します。
preg_replace_callback	;	正規表現検索を行い、コールバック関数を使用して置換を行う	;	mixed preg_replace_callback ( mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int &$count ]] )	;	この関数の動作は、ほぼ preg_replace() と同じですが、 replacement の代わりに callback を指定するところが異なります。
preg_filter	;	正規表現による検索と置換を行う	;	mixed preg_filter ( mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count ]] )	;	preg_filter() は preg_replace() と似ていますが、マッチした結果 (を変換したもの) のみを返します。 この関数の挙動の詳細については preg_replace() のドキュメントを参照ください。
preg_split	;	正規表現で文字列を分割する	;	array preg_split ( string $pattern, string $subject [, int $limit = -1 [, int $flags = 0 ]] )	;	指定した文字列を、正規表現で分割します。
preg_quote	;	正規表現文字をクオートする	;	string preg_quote ( string $str [, string $delimiter = NULL ] )	;	preg_quote() は、str を引数とし、正規表現構文の特殊文字の前にバックスラッシュを挿入します。 この関数は、実行時に生成される文字列をパターンとしてマッチングを行う必要があり、 その文字列には正規表現の特殊文字が含まれているかも知れない場合に有用です。
preg_grep	;	パターンにマッチする配列の要素を返す	;	array preg_grep ( string $pattern, array $input [, int $flags = 0 ] )	;	input 配列の要素のうち、 指定した pattern にマッチするものを要素とする配列を返します。
preg_last_error	;	直近の PCRE 正規表現処理のエラーコードを返す	;	int preg_last_error ( void )	;	直近の PCRE 正規表現処理のエラーコードを返します。
ctype_alnum	;	英数字かどうかを調べる	;	bool ctype_alnum ( string $text )	;	与えられた文字列 text のすべての文字が英字または 数字であるかどうかを調べます。
ctype_alpha	;	英字かどうかを調べる	;	bool ctype_alpha ( string $text )	;	与えられた文字列 text のすべての文字が 英字であるかどうかを調べます。 標準の C ロケールの場合、文字は [A-Za-z] で、 ctype_alpha() は $text が一文字のみの場合の (ctype_upper($text) || ctype_lower($text)) と等価です。 しかし、他の言語には大文字でも小文字でもない文字が含まれています。
ctype_cntrl	;	制御文字かどうかを調べる	;	bool ctype_cntrl ( string $text )	;	与えられた文字列 text のすべての文字が制御文字であるかどうかを調べます。 制御文字とは、例えばラインフィードやタブ、エスケープなどです。
ctype_digit	;	数字かどうかを調べる	;	bool ctype_digit ( string $text )	;	与えられた文字列 text のすべての文字が 数字であるかどうかを調べます。
ctype_lower	;	小文字かどうかを調べる	;	bool ctype_lower ( string $text )	;	text のすべての文字が小文字だった場合に TRUE 、そうでない場合に FALSE を返します。
ctype_graph	;	空白以外の印字可能な文字かどうかを調べる	;	bool ctype_graph ( string $text )	;	与えられた文字列 text のすべての文字が 実際に目に見える出力を行うかどうかを調べます。
ctype_print	;	印字可能な文字かどうかを調べる	;	bool ctype_print ( string $text )	;	与えられた文字列 text のすべての文字が 印字可能な文字であるかどうかを調べます。
ctype_punct	;	空白、英数字以外の出力可能な文字かどうかを調べる	;	bool ctype_punct ( string $text )	;	与えられた文字列 text のすべての文字が 句読点であるかどうかを調べます。
ctype_space	;	空白文字かどうか調べる	;	bool ctype_space ( string $text )	;	与えられた文字列 text のすべての文字が 空白文字であるかどうかを調べます。
ctype_upper	;	大文字かどうか調べる	;	bool ctype_upper ( string $text )	;	与えられた文字列 text のすべての文字が 大文字であるかどうかを調べます。
ctype_xdigit	;	16 進数を表す文字かどうかを調べる	;	bool ctype_xdigit ( string $text )	;	与えられた文字列 text のすべての文字が 16 進の '数字' であるかどうかを調べます。
curl_init	;	cURL セッションを初期化する	;	resource curl_init ([ string $url = NULL ] )	;	新規セッションを初期化し、cURL ハンドルを返します。このハンドルは、関数 curl_setopt() , curl_exec() , curl_close() で使用します。
curl_copy_handle	;	cURL ハンドルを、その設定も含めてコピーする	;	resource curl_copy_handle ( resource $ch )	;	cURL ハンドルをコピーし、同じ設定を保持します。
curl_version	;	cURL のバージョンを返す	;	array curl_version ([ int $age = CURLVERSION_NOW ] )	;	cURL のバージョンについての情報を返します。
curl_setopt	;	cURL 転送用オプションを設定する	;	bool curl_setopt ( resource $ch, int $option, mixed $value )	;	指定した cURL セッションハンドルのオプションを設定します。
curl_setopt_array	;	CURL 転送用の複数のオプションを設定する	;	bool curl_setopt_array ( resource $ch, array $options )	;	cURL セッション用の複数のオプションを設定します。 この関数が便利なのは大量の cURL オプションを設定する場合で、 何度も繰り返して curl_setopt() をコールせずにすみます。
curl_exec	;	cURL セッションを実行する	;	mixed curl_exec ( resource $ch )	;	指定した cURL セッションを実行します。
curl_getinfo	;	指定した伝送に関する情報を得る	;	mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )	;	直近の転送に関する情報を取得します。
curl_error	;	現在のセッションに関する直近のエラー文字列を返す	;	string curl_error ( resource $ch )	;	直近の cURL 操作に関するエラーメッセージをクリアテキストで返します。
curl_errno	;	直近のエラー番号を返す	;	int curl_errno ( resource $ch )	;	直近の cURL 処理に関するエラー番号を返します。
curl_close	;	cURL セッションを閉じる	;	void curl_close ( resource $ch )	;	cURL セッションを閉じ、全てのリソースを開放します。 cURL ハンドル ch も削除されます。
curl_multi_init	;	新規 cURL マルチハンドルを返す	;	resource curl_multi_init ( void )	;	複数の cURL ハンドルを並列で実行できるようにします。
curl_multi_add_handle	;	cURL マルチハンドルに、通常の cURL ハンドルを追加する	;	int curl_multi_add_handle ( resource $mh, resource $ch )	;	ch ハンドルを、マルチハンドル mh に追加します。
curl_multi_remove_handle	;	cURL ハンドルのセットからマルチハンドルを削除する	;	int curl_multi_remove_handle ( resource $mh, resource $ch )	;	指定した ch ハンドルを、mh ハンドルから削除します。 ch ハンドルが削除されてからも、このハンドルで curl_exec() を実行できます。 使用中の ch ハンドルを削除する際には、 そのハンドルにかかわる進行中の転送をきちんと停止します。
curl_multi_select	;	curl_multi 接続のアクティビティを待つ	;	int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )	;	curl_multi 接続に関するアクティビティがあるまでブロックします。
curl_multi_exec	;	現在の cURL ハンドルから、サブ接続を実行する	;	int curl_multi_exec ( resource $mh, int &$still_running )	;	スタック内の各ハンドルを処理します。 このメソッドは、ハンドルがデータの読み書きを要するかどうかにかかわらずコール可能です。
curl_multi_getcontent	;	CURLOPT_RETURNTRANSFER が設定されている場合に、cURL ハンドルの内容を返す	;	string curl_multi_getcontent ( resource $ch )	;	CURLOPT_RETURNTRANSFER に何らかのハンドルが設定されている場合に、 この関数はその cURL ハンドルの内容を文字列形式で返します。
curl_multi_info_read	;	現在の転送についての情報を表示する	;	array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )	;	マルチハンドルに対して、個別の転送にメッセージ/情報が残っているかどうかを問い合わせます。 メッセージには、転送時のエラーコードや転送が完了したという情報が残っている可能性があります。
curl_multi_close	;	cURL ハンドルのセットを閉じる	;	void curl_multi_close ( resource $mh )	;	cURL ハンドルのセットを閉じます。
dom_import_simplexml	;	SimpleXMLElement オブジェクトから DOMElement オブジェクトを取得する	;	DOMElement dom_import_simplexml ( SimpleXMLElement $node )	;	この関数は、SimpleXML クラスの ノード node を受け取り、それを DOMElement ノードに変換します。新しいオブジェクトは、 DOMElement ノードとして使用可能です。
finfo_open	;	新しい fileinfo リソースを作成する	;	finfo::__construct() ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )	;	この関数は、magic データベースをオープンしてそのリソースを返します。
finfo_close	;	fileinfo リソースを閉じる	;	bool finfo_close ( resource $finfo )	;	この関数は、 finfo_open() がオープンしたリソースを閉じます。
finfo_set_flags	;	libmagic のオプションを設定する	;	bool finfo::set_flags ( int $options )	;	この関数は、さまざまな Fileinfo オプションを設定します。 finfo_open() やその他の Fileinfo 関数で、 オプションを直接指定することも可能です。
finfo_file	;	ファイルについての情報を返す	;	string finfo::file ( string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )	;	この関数は、ファイルについての情報を返すために使用します。
finfo_buffer	;	文字列バッファの情報を返す	;	string finfo::buffer ( string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )	;	この関数は、バイナリデータの情報を文字列形式で返すために使用します。
mime_content_type	;	ファイルの MIME Content-type を検出する (非推奨)	;	string mime_content_type ( string $filename )	;	magic.mime ファイルの情報を用いて、 ファイルの MIME content type を返します。
filter_input	;	指定した名前の変数を外部から受け取り、オプションでそれをフィルタリングする	;	mixed filter_input ( int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )	;	
filter_var	;	指定したフィルタでデータをフィルタリングする	;	mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )	;	
filter_input_array	;	外部から変数を受け取り、オプションでそれらをフィルタリングする	;	mixed filter_input_array ( int $type [, mixed $definition ] )	;	この関数を使用すると、大量のデータを取得する際に filter_input() を繰り返しコールする必要がなくなるので便利です。
filter_var_array	;	複数の変数を受け取り、オプションでそれらをフィルタリングする	;	mixed filter_var_array ( array $data [, mixed $definition ] )	;	この関数を使用すると、大量の変数を取得する際に filter_var() を繰り返しコールする必要がなくなるので便利です。
filter_list	;	サポートされるフィルタの一覧を返す	;	array filter_list ( void )	;	
filter_has_var	;	指定した型の変数が存在するかどうかを調べる	;	bool filter_has_var ( int $type, string $variable_name )	;	
filter_id	;	フィルタの名前からフィルタ ID を返す	;	int filter_id ( string $filtername )	;	
ftp_connect	;	FTP 接続をオープンする	;	resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )	;	ftp_connect() は、指定した host への FTP 接続をオープンします。
ftp_ssl_connect	;	セキュアな SSL-FTP 接続をオープンする	;	resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )	;	ftp_ssl_connect() は、指定した host への明示的な SSL-FTP 接続をオープンします。
ftp_login	;	FTP 接続にログインする	;	bool ftp_login ( resource $ftp_stream, string $username, string $password )	;	指定した FTP ストリームにログインします。
ftp_pwd	;	カレントのディレクトリ名を返す	;	string ftp_pwd ( resource $ftp_stream )	;	
ftp_cdup	;	親ディレクトリに移動する	;	bool ftp_cdup ( resource $ftp_stream )	;	親ディレクトリに移動します。
ftp_chdir	;	FTP サーバー上でディレクトリを移動する	;	bool ftp_chdir ( resource $ftp_stream, string $directory )	;	カレントディレクトリを、指定した場所に移動します。
ftp_exec	;	FTP サーバー上でのコマンドの実行をリクエストする	;	bool ftp_exec ( resource $ftp_stream, string $command )	;	FTP サーバーに SITE EXEC command リクエストを 送信します。
ftp_raw	;	FTP サーバーに任意のコマンドを送信する	;	array ftp_raw ( resource $ftp_stream, string $command )	;	任意の command を FTP サーバーに送信します。
ftp_mkdir	;	ディレクトリを作成する	;	string ftp_mkdir ( resource $ftp_stream, string $directory )	;	FTP サーバー上に、指定した directory を作成します。
ftp_rmdir	;	ディレクトリを削除する	;	bool ftp_rmdir ( resource $ftp_stream, string $directory )	;	FTP サーバー上の、指定した directory を削除します。
ftp_chmod	;	FTP 経由でファイルのパーミッションを設定する	;	int ftp_chmod ( resource $ftp_stream, int $mode, string $filename )	;	指定したリモートファイルのパーミッションを mode に設定します。
ftp_alloc	;	アップロードされるファイルのためのスペースを確保する	;	bool ftp_alloc ( resource $ftp_stream, int $filesize [, string &$result ] )	;	ALLO コマンドを FTP サーバーに送信し、 アップロードされるファイルのためのスペースを確保します。
ftp_nlist	;	指定したディレクトリのファイルの一覧を返す	;	array ftp_nlist ( resource $ftp_stream, string $directory )	;	
ftp_rawlist	;	指定したディレクトリの詳細なファイル一覧を返す	;	array ftp_rawlist ( resource $ftp_stream, string $directory [, bool $recursive = false ] )	;	ftp_rawlist() は、FTP LIST コマンドを実行し、結果を配列として返します。
ftp_systype	;	リモート FTP サーバーのシステム型 ID を返す	;	string ftp_systype ( resource $ftp_stream )	;	リモート FTP サーバーのシステム型 ID を返します。
ftp_pasv	;	パッシブモードをオンまたはオフにする	;	bool ftp_pasv ( resource $ftp_stream, bool $pasv )	;	ftp_pasv() はパッシブモードをオンまたはオフにします。 パッシブモードでは、データ接続はサーバーではなくクライアントにより 初期化されます。クライアントがファイアウォールの向こうにある場合に 必要となるでしょう。
ftp_get	;	FTP サーバーからファイルをダウンロードする	;	bool ftp_get ( resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_get() は FTP サーバーからリモートファイルを取得し、 それをローカルファイルに保存します。
ftp_fget	;	FTP サーバーからファイルをダウンロードし、オープン中のファイルに保存する	;	bool ftp_fget ( resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_fget() は、FTP サーバーから remote_file を取得し、指定したファイルポインタ fp に書きこみます。
ftp_put	;	FTP サーバーにファイルをアップロードする	;	bool ftp_put ( resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0 ] )	;	ftp_put() ローカルファイルを FTP サーバーに保存します。
ftp_fput	;	オープン中のファイルを FTP サーバーにアップロードする	;	bool ftp_fput ( resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0 ] )	;	ftp_fput() は、ファイルポインタが指すデータを FTP サーバー上のリモートファイルへアップロードします。
ftp_size	;	指定したファイルのサイズを返す	;	int ftp_size ( resource $ftp_stream, string $remote_file )	;	ftp_size() は指定されたファイルのサイズを バイト数で返します。
ftp_mdtm	;	指定したファイルが最後に更新された時刻を返す	;	int ftp_mdtm ( resource $ftp_stream, string $remote_file )	;	ftp_mdtm() はリモートファイルが最後に更新された時刻を取得します。
ftp_rename	;	FTP サーバー上のファイルまたはディレクトリの名前を変更する	;	bool ftp_rename ( resource $ftp_stream, string $oldname, string $newname )	;	ftp_rename() は FTP サーバー上のファイルやディレクトリの 名前を変更します。
ftp_delete	;	FTP サーバー上のファイルを削除する	;	bool ftp_delete ( resource $ftp_stream, string $path )	;	ftp_delete() は、path で指定したファイルを FTP サーバーから削除します。
ftp_site	;	SITEコマンドをサーバーに送信する	;	bool ftp_site ( resource $ftp_stream, string $command )	;	ftp_site() は、指定された SITE コマンドを FTP サーバーに送信します。
ftp_close	;	FTP 接続を閉じる	;	bool ftp_close ( resource $ftp_stream )	;	ftp_close() は、指定されたリンク ID を閉じて resource を開放します。
ftp_set_option	;	さまざまな FTP 実行時オプションを設定する	;	bool ftp_set_option ( resource $ftp_stream, int $option, mixed $value )	;	この関数は、指定した FTP ストリームに関してのさまざまな実行時オプションを 制御します。
ftp_get_option	;	カレント FTP ストリームでの種々の実行時動作を取得する	;	mixed ftp_get_option ( resource $ftp_stream, int $option )	;	この関数は、指定した FTP 接続について option の値を返します。
ftp_nb_fget	;	FTP サーバーからファイルをダウンロードし、オープン中のファイルに保存する（非ブロッキング）	;	int ftp_nb_fget ( resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_nb_fget() は、FTP サーバーからリモートファイルを取得します。
ftp_nb_get	;	FTP サーバーからファイルを取得し、ローカルファイルに書き込む（非ブロッキング）	;	int ftp_nb_get ( resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_nb_get() は FTP サーバーからリモートファイルを取得し、 それをローカルファイルに保存します。
ftp_nb_continue	;	ファイルの取得/送信を継続する（非ブロッキング）	;	int ftp_nb_continue ( resource $ftp_stream )	;	非ブロッキングモードで、ファイルの取得/送信を継続します。
ftp_nb_put	;	FTP サーバーにファイルを保存する（非ブロッキング）	;	int ftp_nb_put ( resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0 ] )	;	ftp_nb_put() はローカルファイルを FTP サーバーに保存します。
ftp_nb_fput	;	オープン中のファイルを FTP サーバーに保存する（非ブロッキング）	;	int ftp_nb_fput ( resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0 ] )	;	ftp_nb_fput() は、ファイルポインタが指すデータを FTP サーバー上のリモートファイルへアップロードします。
ftp_quit	;	ftp_close()  のエイリアス	;		;	
gd_info	;	現在インストールされているGDライブラリに関する情報を取得する	;	array gd_info ( void )	;	インストールされている GD ライブラリのバージョンとスペックに関する情報を取得します。
imagearc	;	部分楕円を描画する	;	bool imagearc ( resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color )	;	imagearc() は、指定した座標を中心とする円弧を描画します。
imageellipse	;	楕円を描画する	;	bool imageellipse ( resource $image, int $cx, int $cy, int $width, int $height, int $color )	;	指定した座標を中心とする楕円を描画します。
imagechar	;	水平に文字を描画する	;	bool imagechar ( resource $image, int $font, int $x, int $y, string $c, int $color )	;	imagechar() は、画像 im 上の座標 x,y(左上が 0, 0) に color 色で c の最初の文字を描画します。
imagecharup	;	垂直に文字を描画する	;	bool imagecharup ( resource $image, int $font, int $x, int $y, string $c, int $color )	;	指定した画像 image の指定した位置に、 文字 c を垂直に描画します。
imagecolorat	;	ピクセルの色のインデックスを取得する	;	int imagecolorat ( resource $image, int $x, int $y )	;	imageで指定された画像上の 特定位置にあるピクセルの色のインデックスを返します。
imagecolorallocate	;	画像で使用する色を作成する	;	int imagecolorallocate ( resource $image, int $red, int $green, int $blue )	;	指定した RGB を配色とする色の ID を返します。
imagepalettecopy	;	あるイメージから他のイメージにパレットをコピーする	;	void imagepalettecopy ( resource $destination, resource $source )	;	imagepalettecopy() は、パレットを source から destination にコピーします。
imagecreatefromstring	;	文字列の中のイメージストリームから新規イメージを作成する	;	resource imagecreatefromstring ( string $image )	;	imagecreatefromstring() は、指定した image から 得られたイメージを表すイメージ ID を返します。もし、PHP が JPEG, PNG, GIF, WBMP, GD2 をサポートするようビルドされている場合、 イメージの種類は自動的に判別されます。
imagecolorclosest	;	指定した色に最も近い色のインデックスを取得する	;	int imagecolorclosest ( resource $image, int $red, int $green, int $blue )	;	指定した RGB 値に「近い」 画像パレット中の色のインデックスを返します。
imagecolorclosesthwb	;	色合い、白、黒を有する色のインデックスを得る	;	int imagecolorclosesthwb ( resource $image, int $red, int $green, int $blue )	;	指定した色に最も近い色合い、白、黒を有する色のインデックスを取得します。
imagecolordeallocate	;	イメージの色リソースを開放する	;	bool imagecolordeallocate ( resource $image, int $color )	;	imagecolorallocate() または imagecolorallocatealpha() で確保された色を開放します。
imagecolorresolve	;	指定した色または出来るだけ近い色のインデックスを得る	;	int imagecolorresolve ( resource $image, int $red, int $green, int $blue )	;	この関数は、指定した色に関するインデックスを常に返します。 その色そのものまたは出来るだけ近い色へのインデックスが返されます。
imagecolorexact	;	指定した色のインデックスを取得する	;	int imagecolorexact ( resource $image, int $red, int $green, int $blue )	;	画像パレット中の特定の色のインデックスを返します。
imagecolorset	;	指定したパレットインデックスの色を設定する	;	void imagecolorset ( resource $image, int $index, int $red, int $green, int $blue [, int $alpha = 0 ] )	;	この関数は、パレット上で指定したインデックス index を 指定した色 color に設定します。 実際にぬりつぶしを実行するオーバーヘッドなしに パレット上の色を使用する画像をぬりつぶしたような効果を得る ことができ、便利です。
imagecolortransparent	;	透明色を定義する	;	int imagecolortransparent ( resource $image [, int $color ] )	;	指定した画像 image 上の透明色を設定します。
imagecolorstotal	;	画像パレットの色数を検出する	;	int imagecolorstotal ( resource $image )	;	指定した画像パレットの色数を返します。
imagecolorsforindex	;	カラーインデックスからカラーを取得する	;	array imagecolorsforindex ( resource $image, int $index )	;	指定したインデックスに対する色を取得します。
imagecopy	;	画像の一部をコピーする	;	bool imagecopy ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h )	;	src_imの一部、つまり、x,y座標 src_x, src_y を基準として幅src_w、高さ src_hの領域をdst_im にコピーします。指定された領域は、x,y座標 dst_x,dst_yにコピー されます。
imagecopymerge	;	イメージの一部をコピー、マージする	;	bool imagecopymerge ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )	;	src_imのsrc_x, src_y で始まる幅 src_w、高さsrc_hの領域を x,y座標で指定した dst_imにコピーします。 定義された部分は、x,y座標、dst_x、 dst_yにコピーされます。
imagecopymergegray	;	グレースケールでイメージの一部をコピー、マージする	;	bool imagecopymergegray ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )	;	imagecopymergegray() は、 src_im の X,Y座標 src_x, src_y から 始まる幅src_w、高さ src_h の領域を dst_imにコピーします。 定義された部分は、x、y座標dst_x、 dst_yにコピーされます。
imagecopyresized	;	画像の一部をコピーしサイズを変更する	;	bool imagecopyresized ( resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h )	;	imagecopyresized() は指定した画像の矩形部分を 別の画像へコピーします。dst_image はコピー先の イメージ ID、src_image はコピー元のイメージ ID です。
imagecreate	;	パレットを使用する新規画像を作成する	;	resource imagecreate ( int $width, int $height )	;	imagecreate() は、 指定した大きさの空の画像を表す画像 ID を返します。
imagecreatetruecolor	;	TrueColor イメージを新規に作成する	;	resource imagecreatetruecolor ( int $width, int $height )	;	imagecreatetruecolor() は、指定した大きさの黒い画像を表す画像 ID を返します。
imageistruecolor	;	画像が truecolor かどうか調べる	;	bool imageistruecolor ( resource $image )	;	imageistruecolor() は、 image が truecolor 画像かどうか調べます。
imagetruecolortopalette	;	TrueColor イメージをパレットイメージに変換する	;	bool imagetruecolortopalette ( resource $image, bool $dither, int $ncolors )	;	imagetruecolortopalette() は、TrueColorイメー ジをパレットイメージに変換します。この関数のコードは、元々 Independent JPEG Groupライブラリ用に書かれたもので、素晴らしいも のです。このコードは、色をできる限り維持することに加えて、アルファ チャネルに関する情報を出力されるパレットにおいてできるだけ維持す るように修正されています。これは、期待通りにうまくいきません。通 常は、最高の出力品質が保障されるTrueColor出力イメージを単に出力す るのが最良の方法です。
imagesetthickness	;	線描画用の線幅を設定する	;	bool imagesetthickness ( resource $image, int $thickness )	;	imagesetthickness() は、長方形、多角形、楕円等を描画する際の線幅を thickness ピクセルに設定します。
imagefilledarc	;	楕円弧を描画し、塗りつぶす	;	bool imagefilledarc ( resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style )	;	指定した image の指定した座標を中心とする、 楕円弧を描画します。
imagefilledellipse	;	塗りつぶされた楕円を描画する	;	bool imagefilledellipse ( resource $image, int $cx, int $cy, int $width, int $height, int $color )	;	指定した image の指定した座標を中心として楕円を描画します。
imagealphablending	;	イメージのブレンドモードを設定する	;	bool imagealphablending ( resource $image, bool $blendmode )	;	imagealphablending() によりTrueColorイメージに 二つの異なる描画モードを使用可能となります。ブレンドモードでは、 全ての描画関数に指定される色のalphaチャネル要素として使用され、 例えば imagesetpixel() では背景色の透過割合を定 義します。結果として、gd は描画色に関してその点に存在する色を自動 的にブレンドし、イメージに結果を保存します。結果のピクセルは、透 明になります。ブレンドモードでない場合、描画色は形式的にそのアル ファチャネル情報にコピーされ、出力ピクセルを置換します。ブレンド モードは、パレットイメージを描画している際には使用できません。
imagesavealpha	;	PNG 画像を保存する際に（単一色の透過設定ではない）完全な    アルファチャネル情報を保存するフラグを設定する	;	bool imagesavealpha ( resource $image, bool $saveflag )	;	imagesavealpha() は PNG 画像を保存する際に（単一色の透過設定ではない）完全な アルファチャネル情報を保存するフラグを設定します。
imagecolorallocatealpha	;	画像で使用する色を透過度を指定して作成する	;	int imagecolorallocatealpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	imagecolorallocatealpha() は、 透明度を指定するパラメータ alpha が追加されている以外は imagecolorallocate() と等価です。
imagecolorresolvealpha	;	指定した色+アルファ値または最も近い色のインデックスを取得する	;	int imagecolorresolvealpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	この関数は、指定した色のインデックスを必ず返します。そうでない場合、 正確な色または最も近い別の色のどちらかを返します。
imagecolorclosestalpha	;	指定した色+アルファ値に最も近い色のインデックスを取得する	;	int imagecolorclosestalpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	指定した RGB 値と alpha レベルに 「近い」画像パレット中の色のインデックスを返します。
imagecolorexactalpha	;	指定した色+アルファ値のインデックスを取得する	;	int imagecolorexactalpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	イメージのパレットで指定した色+アルファ値のインデックスを返します。
imagecopyresampled	;	再サンプリングを行いイメージの一部をコピー、伸縮する	;	bool imagecopyresampled ( resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h )	;	imagecopyresampled() は、イメージの矩形の部分 を別のイメージにコピーします。同時にピクセル値を滑らかに補間を行い、 このため、特にサイズを小さくした場合には鮮明さが維持されます。
imagerotate	;	指定された角度で画像を回転する	;	resource imagerotate ( resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0 ] )	;	画像 image を、 angle で指定された角度だけ回転します。
imageantialias	;	アンチエイリアス機能を使用すべきかどうかを判断する	;	bool imageantialias ( resource $image, bool $enabled )	;	直線や多角形を高速に描画するためのアンチエイリアス機能を有効にします。 アルファコンポーネントはサポートしていません。ダイレクトブレンド操作を 使用します。truecolor 画像に対してのみ動作します。
imagesettile	;	塗りつぶし用のイメージを設定する	;	bool imagesettile ( resource $image, resource $tile )	;	imagesettile() は、特別な色 IMG_COLOR_TILED を指定して塗りつぶされた場合に、 ( imagefill() や imagefilledpolygon() のような) 領域塗りつぶし関数で使用されるタイルイメージを設定します。
imagesetbrush	;	線の描画用にブラシイメージを設定する	;	bool imagesetbrush ( resource $image, resource $brush )	;	imagesetbrush() は、特別な色 IMG_COLOR_BRUSHED または IMG_COLOR_STYLEDBRUSHED で描画される際に ( imageline() や imagepolygon() のような) 全ての線描画関数で使用されるブラシイメージを設定します。
imagesetstyle	;	線描画用のスタイルを設定する	;	bool imagesetstyle ( resource $image, array $style )	;	imagesetstyle() は、特別な IMG_COLOR_STYLED または色を有するイメージの線 IMG_COLOR_STYLEDBRUSHED を描画する際に ( imageline() と imagepolygon() のような) 全ての線描画関数で使用されるスタイルを設定します。
imagecreatefrompng	;	新しい画像をファイルあるいは URL から作成する	;	resource imagecreatefrompng ( string $filename )	;	imagecreatefrompng() は引数 filename から得られる画像を表す画像 ID を返します。
imagecreatefromgif	;	新しい画像をファイルあるいは URL から作成する	;	resource imagecreatefromgif ( string $filename )	;	imagecreatefromgif() は、 指定したファイル名の画像を表す画像 ID を返します。
imagecreatefromjpeg	;	新しい画像をファイルあるいは URL から作成する	;	resource imagecreatefromjpeg ( string $filename )	;	imagecreatefromjpeg() は引数 filename から得られる画像を表すイメージIDを返します。
imagecreatefromwbmp	;	新しい画像をファイルあるいは URL から作成する	;	resource imagecreatefromwbmp ( string $filename )	;	imagecreatefromwbmp() は、指定したファイル名から 得られたイメージを表すイメージ ID を返します。
imagecreatefromxbm	;	新しい画像をファイルあるいは URL から作成する	;	resource imagecreatefromxbm ( string $filename )	;	imagecreatefromxbm() は、指定した filename から得られたイメージを表すイメージIDを返します。
imagecreatefromxpm	;	新しい画像をファイルあるいは URL から作成する	;	resource imagecreatefromxpm ( string $filename )	;	imagecreatefromxpm() は、指定した filename から得られたイメージを表すイメージ ID を返します。
imagecreatefromgd	;	GD ファイルまたは URL から新規イメージを生成する	;	resource imagecreatefromgd ( string $filename )	;	GD ファイルまたは URL から新規イメージを生成します。
imagecreatefromgd2	;	GD2 ファイルまたは URL から新規イメージを生成する	;	resource imagecreatefromgd2 ( string $filename )	;	GD2 ファイルまたは URL から新規イメージを生成します。
imagecreatefromgd2part	;	GD2 ファイルまたは URL の指定した部分から新規イメージを生成する	;	resource imagecreatefromgd2part ( string $filename, int $srcX, int $srcY, int $width, int $height )	;	GD2 ファイルまたは URL の指定した部分から新規イメージを生成します。
imagepng	;	PNG イメージをブラウザまたはファイルに出力する	;	bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )	;	指定した image から、PNG 画像を出力あるいは保存します。
imagegif	;	画像をブラウザあるいはファイルに出力する	;	bool imagegif ( resource $image [, string $filename ] )	;	imagegif() は画像 image から GIF ファイル filename を作成します。 引数 image は imagecreate() あるいは imagecreatefrom* 関数から返されたものです。
imagejpeg	;	画像をブラウザあるいはファイルに出力する	;	bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )	;	imagejpeg() は、画像 image から JPEG ファイルを作成します。
imagewbmp	;	画像をブラウザあるいはファイルに出力する	;	bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )	;	imagewbmp() は、指定した image を WBMP にして出力あるいは保存します。
imagegd	;	GD イメージをブラウザまたはファイルに出力する	;	bool imagegd ( resource $image [, string $filename ] )	;	GD イメージを、指定した filename に出力します。
imagegd2	;	GD2 イメージをブラウザまたはファイルに出力する	;	bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]] )	;	GD2 イメージを、指定した filename に出力します。
imagedestroy	;	画像を破棄する	;	bool imagedestroy ( resource $image )	;	imagedestroy() は画像 image を保持するメモリを解放します。
imagegammacorrect	;	GD イメージにガンマ補正を適用する	;	bool imagegammacorrect ( resource $image, float $inputgamma, float $outputgamma )	;	指定した GD 画像 image に 入力ガンマ値、出力ガンマ値を指定してガンマ補正を適用します。
imagefill	;	塗り潰す	;	bool imagefill ( resource $image, int $x, int $y, int $color )	;	指定した座標 (左上が 0, 0 です) から、指定した色 color で image を塗りつぶします。
imagefilledpolygon	;	塗りつぶした多角形を描画する	;	bool imagefilledpolygon ( resource $image, array $points, int $num_points, int $color )	;	imagefilledpolygon() は画像 image 上に塗りつぶした多角形を生成します。
imagefilledrectangle	;	塗りつぶした矩形を描画する	;	bool imagefilledrectangle ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	色 color で塗りつぶした矩形を、 指定した image 上に作成します。 開始位置と終了位置を指定します。0, 0 が画像の左上角を表します。
imagefilltoborder	;	特定色で塗りつぶす	;	bool imagefilltoborder ( resource $image, int $x, int $y, int $border, int $color )	;	imagefilltoborder() は、 borderで指定した色を境界色として塗りつぶし を行います。(x,y)が 塗りつぶしの始点(左上が0, 0)で、領域内を color色で塗りつぶします。
imagefontwidth	;	フォントの幅を取得する	;	int imagefontwidth ( int $font )	;	指定されたフォントの文字の幅をピクセル単位で返します。
imagefontheight	;	フォントの高さを取得する	;	int imagefontheight ( int $font )	;	指定されたフォントの文字の高さをピクセル単位で返します。
imageinterlace	;	インターレースを有効もしくは無効にする	;	int imageinterlace ( resource $image [, int $interlace = 0 ] )	;	imageinterlace() は、インターレースビットをon またはoffに切り替えます。
imageline	;	直線を描画する	;	bool imageline ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	指定したふたつの点を結ぶ直線を描画します。
imageloadfont	;	新しいフォントを読み込む	;	int imageloadfont ( string $file )	;	imageloadfont() はユーザーが定義したビットマップを読み込み、 その ID を返します。
imagepolygon	;	多角形を描画する	;	bool imagepolygon ( resource $image, array $points, int $num_points, int $color )	;	imagepolygon() は、指定した image に多角形を作成します。
imagerectangle	;	矩形を描画する	;	bool imagerectangle ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	imagerectangle() は、指定した座標から始まる矩形を作成します。
imagesetpixel	;	点を生成する	;	bool imagesetpixel ( resource $image, int $x, int $y, int $color )	;	imagesetpixel() は、指定した座標にピクセルを描画します。
imagestring	;	文字列を水平に描画する	;	bool imagestring ( resource $image, int $font, int $x, int $y, string $string, int $color )	;	指定した座標に文字列 string を描画します。
imagestringup	;	文字列を垂直に描画する	;	bool imagestringup ( resource $image, int $font, int $x, int $y, string $string, int $color )	;	文字列 string を、指定した座標で垂直に描画します。
imagesx	;	画像の幅を取得する	;	int imagesx ( resource $image )	;	指定した画像リソース image の幅を返します。
imagesy	;	画像の高さを取得する	;	int imagesy ( resource $image )	;	指定した画像リソース image の高さを返します。
imagedashedline	;	破線を描画する	;	bool imagedashedline ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	これは古い関数です。代わりに imagesetstyle() と imageline() の組み合せを使用してください。
imagettfbbox	;	TypeType フォントを使用したテキストの bounding box を生成する	;	array imagettfbbox ( float $size, float $angle, string $fontfile, string $text )	;	この関数は TrueType テキストの bounding box をピクセル単位で計算して 返します。
imagettftext	;	TrueType フォントを使用してテキストを画像に書き込む	;	array imagettftext ( resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text )	;	指定した text を、 TrueType フォントを使用して画像に書き込みます。
imageftbbox	;	freetype2 によるフォントを用いたテキストを囲む箱を取得する	;	array imageftbbox ( float $size, float $angle, string $fontfile, string $text [, array $extrainfo ] )	;	この関数は FreeType テキスト用のバウンディングボックスをピクセル単位で算出し、 それを返します。
imagefttext	;	FreeType 2 によるフォントを用いてイメージにテキストを描画する	;	array imagefttext ( resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo ] )	;	
imagepsloadfont	;	ファイルから PostScript Type 1 フォントをロードする	;	resource imagepsloadfont ( string $filename )	;	指定した filename から PostScript Type 1 フォントを読み込みます。
imagepsfreefont	;	PostScript Type 1 フォント用メモリを解放する	;	bool imagepsfreefont ( resource $font_index )	;	imagepsfreefont() は PostScript Type 1 フォントが使用したメモリを解放します。
imagepsencodefont	;	フォントの文字エンコードベクトルを変更する	;	bool imagepsencodefont ( resource $font_index, string $encodingfile )	;	ファイルから文字エンコードベクトルをロードし、変更します。 PostScript フォントのデフォルトベクトルは、127以上の位置には文字 がほとんどないので、英語以外の言語を使用する場合には 恐らくこの部分を変更したいと思うことでしょう。
imagepsextendfont	;	フォントを展開または圧縮する	;	bool imagepsextendfont ( resource $font_index, float $extend )	;	フォント(font_index)を展開または圧縮します。 パラメータextendの値が1より小さい場合、 フォントの圧縮が行われます。
imagepsslantfont	;	フォントを傾ける	;	bool imagepsslantfont ( resource $font_index, float $slant )	;	指定したフォントを傾けます。
imagepstext	;	PostScript Type1 フォントを用いて画像の上に文字列を描く	;	array imagepstext ( resource $image, string $text, resource $font_index, int $size, int $foreground, int $background, int $x, int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] )	;	PostScript Type1 フォントを使用して、画像の上にテキストを描画します。
imagepsbbox	;	PostScript Type1 フォントを用いてテキスト矩形のバウンディングボックスを指定する	;	array imagepsbbox ( string $text, resource $font, int $size, int $space, int $tightness, float $angle )	;	PostScript Type1 フォントを用いてテキスト矩形のバウンディングボックスを指定します。
imagetypes	;	この PHP がサポートしている画像形式を返す	;	int imagetypes ( void )	;	現在使用している PHP がサポートする画像形式を返します。
jpeg2wbmp	;	JPEG イメージファイルから WBMP イメージファイルに変換する	;	bool jpeg2wbmp ( string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold )	;	JPEG ファイルを WBMP ファイルに変換します。
png2wbmp	;	PNG イメージファイルから WBMP イメージファイルに変換する	;	bool png2wbmp ( string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold )	;	PNG ファイルを WBMP ファイルに変換します。
image2wbmp	;	画像をブラウザあるいはファイルに出力する	;	bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )	;	image2wbmp() は、イメージ im から filename に WBMP ファイルを作成します。
imagelayereffect	;	アルファブレンディングフラグを設定し、    libgd にバンドルされているレイヤ効果を使用する	;	bool imagelayereffect ( resource $image, int $effect )	;	アルファブレンディングフラグを設定し、 libgd にバンドルされているレイヤ効果を使用します。
imagexbm	;	XBM 画像をブラウザあるいはファイルに出力する	;	bool imagexbm ( resource $image, string $filename [, int $foreground ] )	;	imagewbmp() は、指定した image を XBM にして出力あるいは保存します。
imagecolormatch	;	パレットイメージの色を True カラーイメージに近づける	;	bool imagecolormatch ( resource $image1, resource $image2 )	;	パレットイメージの色を True カラーイメージに近づけます。
imagefilter	;	画像にフィルタを適用する	;	bool imagefilter ( resource $image, int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )	;	imagefilter() は、指定したフィルタ filtertype を image に適用します。
imageconvolution	;	div および offset の係数を使用し、3x3 の畳み込み配列を適用する	;	bool imageconvolution ( resource $image, array $matrix, float $div, float $offset )	;	画像に畳み込み配列を適用します。 指定した係数とオフセットを使用します。
hash	;	ハッシュ値 (メッセージダイジェスト) を生成する	;	string hash ( string $algo, string $data [, bool $raw_output = false ] )	;	
hash_file	;	ファイルの内容から、ハッシュ値を生成する	;	string hash_file ( string $algo, string $filename [, bool $raw_output = false ] )	;	
hash_hmac	;	HMAC 方式を使用してハッシュ値を生成する	;	string hash_hmac ( string $algo, string $data, string $key [, bool $raw_output = false ] )	;	
hash_hmac_file	;	HMAC 方式を使用して、指定されたファイルの内容からハッシュ値を生成する	;	string hash_hmac_file ( string $algo, string $filename, string $key [, bool $raw_output = false ] )	;	
hash_init	;	段階的なハッシュコンテキストを初期化する	;	resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )	;	
hash_update	;	アクティブなハッシュコンテキストにデータを投入する	;	bool hash_update ( resource $context, string $data )	;	
hash_update_stream	;	アクティブなハッシュコンテキストに、オープンしているストリームから    データを投入する	;	int hash_update_stream ( resource $context, resource $handle [, int $length = -1 ] )	;	
hash_update_file	;	アクティブなハッシュコンテキストに、ファイルから    データを投入する	;	bool hash_update_file ( resource $context, string $filename [, resource $context = NULL ] )	;	
hash_final	;	段階的なハッシュ処理を終了し、出来上がったダイジェストを返す	;	string hash_final ( resource $context [, bool $raw_output = false ] )	;	
hash_copy	;	ハッシュコンテキストをコピーする	;	resource hash_copy ( resource $context )	;	
hash_algos	;	登録されているハッシュアルゴリズムの一覧を返す	;	array hash_algos ( void )	;	
iconv	;	文字列を指定した文字エンコーディングに変換する	;	string iconv ( string $in_charset, string $out_charset, string $str )	;	文字列 str の文字セットを in_charset から out_charset に変換します。
ob_iconv_handler	;	出力バッファハンドラとして文字エンコーディングを変換する	;	string ob_iconv_handler ( string $contents, int $status )	;	internal_encoding でエンコードされた文字列を output_encodingに変換します。
iconv_get_encoding	;	iconv 拡張モジュールの内部設定変数を取得する	;	mixed iconv_get_encoding ([ string $type = "all" ] )	;	iconv 拡張モジュールの内部設定変数を取得します。
iconv_set_encoding	;	文字エンコーディング変換用の設定を行なう	;	bool iconv_set_encoding ( string $type, string $charset )	;	type で指定された内部設定変数の値を、 charset に変更します。
iconv_strlen	;	文字列の文字数を返す	;	int iconv_strlen ( string $str [, string $charset = ini_get("iconv.internal_encoding") ] )	;	strlen() とは違い、 iconv_strlen() は与えられたバイト列 str 中に現れる文字の数を 指定された文字セットに基づいて数えます。この結果は、必ずしも文字列の バイト数と一致するとは限りません。
iconv_substr	;	文字列の一部を切り出す	;	string iconv_substr ( string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	文字列 str の、 start と length で指定された一部を返します。
iconv_strpos	;	文字列が最初に現れる場所を見つける	;	int iconv_strpos ( string $haystack, string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	needle が haystack の中で最初に現れる位置を探します。
iconv_strrpos	;	文字列が最後に現れる場所を見つける	;	int iconv_strrpos ( string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding") ] )	;	needle が haystack の中で最後に現れる位置を探します。
iconv_mime_encode	;	MIME ヘッダフィールドを作成する	;	string iconv_mime_encode ( string $field_name, string $field_value [, array $preferences = NULL ] )	;	有効な MIME ヘッダフィールドを作成し、返します。 これは以下のような形式になります。 Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile 上の例では "Subject" がフィールド名、"=?ISO-8859-1?..." で始まる部分が フィールドの値となります。
iconv_mime_decode	;	MIME ヘッダフィールドをデコードする	;	string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	MIME ヘッダフィールドをデコードします。
iconv_mime_decode_headers	;	複数の MIME ヘッダフィールドを一度にデコードする	;	array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	複数の MIME ヘッダフィールドを一度にデコードします。
json_encode	;	値を JSON 形式にして返す	;	string json_encode ( mixed $value [, int $options = 0 ] )	;	value を JSON 形式にした文字列を返します。
json_decode	;	JSON 文字列をデコードする	;	mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )	;	JSON エンコードされた文字列を受け取り、それを PHP の変数に変換します。
json_last_error	;	直近に発生したエラーを返す	;	int json_last_error ( void )	;	直近の JSON エンコード/デコード処理中に発生したエラー (もし存在すれば) を返します。
mb_convert_case	;	文字列に対してケースフォルディングを行う	;	string mb_convert_case ( string $str, int $mode = MB_CASE_UPPER [, string $encoding = mb_internal_encoding() ] )	;	mode で指定された方法で string に対してケースフォルディングを行います。
mb_strtoupper	;	文字列を大文字にする	;	string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )	;	str のすべてのアルファベットを大文字にして返します。
mb_strtolower	;	文字列を小文字にする	;	string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )	;	str のすべてのアルファベットを小文字にして返します。
mb_language	;	現在の言語を設定あるいは取得する	;	mixed mb_language ([ string $language ] )	;	現在の言語を設定あるいは取得します。
mb_internal_encoding	;	内部文字エンコーディングを設定あるいは取得する	;	mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )	;	内部文字エンコーディングを設定あるいは取得します。
mb_http_input	;	HTTP 入力文字エンコーディングを検出する	;	mixed mb_http_input ([ string $type = "" ] )	;	
mb_http_output	;	HTTP 出力文字エンコーディングを設定あるいは取得する	;	mixed mb_http_output ([ string $encoding ] )	;	HTTP 出力文字エンコーディングを設定あるいは取得します。 この関数を実行した後、 出力は encoding に変換されます。
mb_detect_order	;	文字エンコーディング検出順序を設定あるいは取得する	;	mixed mb_detect_order ([ mixed $encoding_list ] )	;	自動文字エンコーディング検出の順番を encoding_list に設定します。
mb_substitute_character	;	置換文字を設定あるいは取得する	;	mixed mb_substitute_character ([ mixed $substrchar ] )	;	入力文字エンコーディングが無効、 または出力文字エンコーディングに文字コードが存在しない場合の代替文字を指定します。 無効な文字は、NULL (出力しない)、文字列または整数値 (Unicode 文字コード値) に置換することが可能です。
mb_parse_str	;	GET/POST/COOKIE データをパースし、グローバル変数を設定する	;	bool mb_parse_str ( string $encoded_string [, array &$result ] )	;	GET/POST/COOKIE データをパースし、 グローバル変数を設定します。PHPは、生の POST/COOKIE を提供しないため、 現状では GET データでのみ使用可能です。この関数は、URL エンコードされたデータをパース、エンコーディングを検出、 内部エンコーディングへ変換し、配列result またはグローバル配列に設定します。
mb_output_handler	;	出力バッファ内で文字エンコーディングを変換するコールバック関数	;	string mb_output_handler ( string $contents, int $status )	;	mb_output_handler() は、 ob_start() のコールバック関数です。 mb_output_handler() は、出力バッファの文字を 内部文字エンコーディングから HTTP 出力文字エンコーディングに変換します。
mb_preferred_mime_name	;	MIME 文字設定を文字列で得る	;	string mb_preferred_mime_name ( string $encoding )	;	指定したエンコーディングの MIME charset 文字列を取得します。
mb_strlen	;	文字列の長さを得る	;	int mb_strlen ( string $str [, string $encoding ] )	;	文字列の長さを取得します。
mb_strpos	;	文字列の中に指定した文字列が最初に現れる位置を見つける	;	int mb_strpos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding ]] )	;	ある文字列の中で別の文字列が最初に現れる位置を見つけます。
mb_strrpos	;	文字列の中に指定した文字列が最後に現れる位置を見つける	;	int mb_strrpos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding ]] )	;	mb_strrpos() は、マルチバイト対応の strrpos() 操作を、文字数に基づいて行います。 needle の位置を haystack の先頭から順に数えていきます。 最初の文字の位置は 0、二番目の文字の位置は 1 という具合です。
mb_stripos	;	大文字小文字を区別せず、    文字列の中で指定した文字列が最初に現れる位置を探す	;	int mb_stripos ( string $haystack, string $needle [, int $offset [, string $encoding ]] )	;	mb_stripos() は、 needle が haystack の中で最初に現れる位置を返します。 mb_strpos() とは異なり、 mb_stripos() は大文字小文字を区別しません。 needle が見つからなかった場合は FALSE を返します。
mb_strripos	;	大文字小文字を区別せず、    文字列の中で指定した文字列が最後に現れる位置を探す	;	int mb_strripos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding ]] )	;	mb_strripos() は、マルチバイト対応の strripos() 操作を、文字数に基づいて行います。 needle の位置を haystack の先頭から順に数えていきます。 最初の文字の位置は 0、二番目の文字の位置は 1 という具合です。 mb_strrpos() とは異なり、 mb_strripos() は大文字小文字を区別しません。
mb_strstr	;	文字列の中で、指定した文字列が最初に現れる位置を見つける	;	string mb_strstr ( string $haystack, string $needle [, bool $before_needle = false [, string $encoding ]] )	;	mb_strstr() は、 haystack の中で最初に needle が現れる場所を探し、 haystack の部分文字列を返します。 needle が見つからなかった場合は FALSE を返します。
mb_strrchr	;	別の文字列の中で、ある文字が最後に現れる場所を見つける	;	string mb_strrchr ( string $haystack, string $needle [, bool $part = false [, string $encoding ]] )	;	mb_strrchr() は、 haystack の中で最後に needle が現れる場所を探し、 haystack の部分文字列を返します。 needle が見つからなかった場合は FALSE を返します。
mb_stristr	;	大文字小文字を区別せず、    文字列の中で指定した文字列が最初に現れる位置を探す	;	string mb_stristr ( string $haystack, string $needle [, bool $before_needle = false [, string $encoding ]] )	;	mb_stristr() は、 haystack の中で最初に needle が現れる場所を探し、 haystack の部分文字列を返します。 mb_strstr() とは異なり、 mb_stristr() は大文字小文字を区別しません。 needle が見つからなかった場合は FALSE を返します。
mb_strrichr	;	大文字小文字を区別せず、    別の文字列の中である文字が最後に現れる場所を探す	;	string mb_strrichr ( string $haystack, string $needle [, bool $part = false [, string $encoding ]] )	;	mb_strrichr() は、 haystack の中で最後に needle が現れる場所を探し、 haystack の部分文字列を返します。 mb_strrchr() とは異なり、 mb_strrichr() は大文字小文字を区別しません。 needle が見つからなかった場合は FALSE を返します。
mb_substr_count	;	部分文字列の出現回数を数える	;	int mb_substr_count ( string $haystack, string $needle [, string $encoding ] )	;	文字列 haystack の中での部分文字列 needle の出現回数を数えます。
mb_substr	;	文字列の一部を得る	;	string mb_substr ( string $str, int $start [, int $length [, string $encoding ]] )	;	文字数に基づきマルチバイト対応の substr() 処理を行います。位置は、 str の始めから数えられます。 最初の文字の位置は 0、2 番目の文字の位置は 1、といったようになります。
mb_strcut	;	文字列の一部を得る	;	string mb_strcut ( string $str, int $start [, int $length [, string $encoding ]] )	;	mb_strcut() は、ある文字列からの部分文字列の抽出を mb_substr() と同じ方法で行います。ただし、 処理は文字単位ではなくバイト単位で行います。 切り出し位置がたまたまマルチバイト文字の 2 バイト目以降だった場合、 切り出しはその文字の最初のバイトから行われます。この挙動もまた substr() 関数と異なるところです。 substr() の場合は、 マルチバイト文字の 2 バイト目以降であってもその位置から切り出しを行い、 結果的に壊れたバイト列を返すことになります。
mb_strwidth	;	文字列の幅を返す	;	int mb_strwidth ( string $str [, string $encoding ] )	;	文字列 str の幅を返します。
mb_strimwidth	;	指定した幅で文字列を丸める	;	string mb_strimwidth ( string $str, int $start, int $width [, string $trimmarker [, string $encoding ]] )	;	文字列 str を指定した幅 width で丸めます。
mb_convert_encoding	;	文字エンコーディングを変換する	;	string mb_convert_encoding ( string $str, string $to_encoding [, mixed $from_encoding ] )	;	文字列 strの文字エンコーディングを、 オプションで指定した from_encoding から to_encoding に変換します。
mb_detect_encoding	;	文字エンコーディングを検出する	;	string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )	;	文字列 str の文字エンコーディングを検出します。
mb_list_encodings	;	サポートするすべてのエンコーディングの配列を返す	;	array mb_list_encodings ( void )	;	サポートするすべてのエンコーディングの配列を返します。
mb_encoding_aliases	;	既知のエンコーディング・タイプのエイリアスを取得	;	array mb_encoding_aliases ( string $encoding )	;	既知の encoding タイプに関するエイリアスの配列を返します。
mb_convert_kana	;	カナを("全角かな"、"半角かな"等に)変換する	;	string mb_convert_kana ( string $str [, string $option = "KV" [, string $encoding ]] )	;	文字列 str に関して「半角」-「全角」変換を行います。 この関数は、日本語のみで使用可能です。
mb_encode_mimeheader	;	MIMEヘッダの文字列をエンコードする	;	string mb_encode_mimeheader ( string $str [, string $charset [, string $transfer_encoding [, string $linefeed = "\r\n" [, int $indent = 0 ]]]] )	;	MIME ヘッダエンコーディング方式によって文字列 str をエンコードします。
mb_decode_mimeheader	;	MIME ヘッダフィールドの文字列をデコードする	;	string mb_decode_mimeheader ( string $str )	;	エンコードされた MIME ヘッダの文字列 str をデコードします。
mb_convert_variables	;	変数の文字コードを変換する	;	string mb_convert_variables ( string $to_encoding, mixed $from_encoding, mixed &$vars [, mixed &$... ] )	;	エンコーディング from_encoding の変数 vars をエンコーディング to_encoding に変換します。
mb_encode_numericentity	;	文字を HTML 数値エンティティにエンコードする	;	string mb_encode_numericentity ( string $str, array $convmap, string $encoding )	;	strの中で指定した文字コードを HTML 数値エンティティから文字コードに変換します。
mb_decode_numericentity	;	HTML 数値エンティティを文字にデコードする	;	string mb_decode_numericentity ( string $str, array $convmap, string $encoding )	;	文字列 str において指定した文字領域にある数値エンティティを変換し、 変換後の文字列を返します。
mb_send_mail	;	エンコード変換を行ってメールを送信する	;	bool mb_send_mail ( string $to, string $subject, string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )	;	email を送信します。ヘッダと本文は mb_language() の設定に基づき変換、エンコードされます。 これは mail() のラッパー関数です。詳細は、 mail() を参照ください。
mb_get_info	;	mbstring の内部設定値を取得する	;	mixed mb_get_info ([ string $type = "all" ] )	;	
mb_check_encoding	;	文字列が、指定したエンコーディングで有効なものかどうかを調べる	;	bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )	;	そのバイトストリームが指定したエンコーディングで有効なものかどうかを調べます。 これは、いわゆる「不正なエンコーディングによる攻撃」を防ぐのに役立ちます。
mb_regex_encoding	;	現在の正規表現用のエンコーディングを文字列として返す	;	mixed mb_regex_encoding ([ string $encoding ] )	;	現在のマルチバイト正規表現用のエンコーディングを文字列として返す
mb_regex_set_options	;	マルチバイト正規表現関数のデフォルトオプションを取得または設定する	;	string mb_regex_set_options ([ string $options = "msr" ] )	;	
mb_ereg	;	マルチバイト文字列に正規表現マッチを行う	;	int mb_ereg ( string $pattern, string $string [, array $regs ] )	;	
mb_eregi	;	マルチバイト文字列に大文字小文字を区別しない正規表現マッチを行う	;	int mb_eregi ( string $pattern, string $string [, array $regs ] )	;	
mb_ereg_replace	;	マルチバイト文字列に正規表現による置換を行う	;	string mb_ereg_replace ( string $pattern, string $replacement, string $string [, string $option = "msr" ] )	;	
mb_eregi_replace	;	マルチバイト文字列に大文字小文字を区別せずに正規表現による置換を行う	;	string mb_eregi_replace ( string $pattern, string $replace, string $string [, string $option = "msri" ] )	;	
mb_split	;	マルチバイト文字列を正規表現により分割する	;	array mb_split ( string $pattern, string $string [, int $limit = -1 ] )	;	
mb_ereg_match	;	マルチバイト文字列が正規表現に一致するか調べる	;	bool mb_ereg_match ( string $pattern, string $string [, string $option = "msr" ] )	;	マルチバイト文字列に対する正規表現マッチングを行います。
mb_ereg_search	;	指定したマルチバイト文字列が正規表現に一致するか調べる	;	bool mb_ereg_search ([ string $pattern [, string $option = "ms" ]] )	;	指定したマルチバイト文字列に対するマルチバイト正規表現マッチングを行います。
mb_ereg_search_pos	;	指定したマルチバイト文字列が正規表現に一致する部分の位置と長さを返す	;	array mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] )	;	マルチバイト文字列の中で正規表現に一致した部分の位置と長さを配列で返します。
mb_ereg_search_regs	;	指定したマルチバイト文字列が正規表現に一致する部分を取得する	;	array mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] )	;	マルチバイト正規表現にマッチした部分を返します。
mb_ereg_search_init	;	マルチバイト正規表現検索用の文字列と正規表現を設定する	;	bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] )	;	mb_ereg_search_init() は、マルチバイト対応の正規 表現検索において検索対象の文字列 string および正規表現 pattern を設定します。 この設定は、 mb_ereg_search() , mb_ereg_search_pos() , mb_ereg_search_regs() で使用されます。
mb_ereg_search_getregs	;	マルチバイト文字列が正規表現に一致する部分があるか調べる	;	array mb_ereg_search_getregs ( void )	;	
mb_ereg_search_getpos	;	次の正規表現検索を開始する位置を取得する	;	int mb_ereg_search_getpos ( void )	;	
mb_ereg_search_setpos	;	次の正規表現検索を開始する位置を設定する	;	bool mb_ereg_search_setpos ( int $position )	;	
mbregex_encoding	;		;		;	
mbereg	;		;		;	
mberegi	;		;		;	
mbereg_replace	;		;		;	
mberegi_replace	;		;		;	
mbsplit	;		;		;	
mbereg_match	;		;		;	
mbereg_search	;		;		;	
mbereg_search_pos	;		;		;	
mbereg_search_regs	;		;		;	
mbereg_search_init	;		;		;	
mbereg_search_getregs	;		;		;	
mbereg_search_getpos	;		;		;	
mbereg_search_setpos	;		;		;	
mcrypt_ecb	;	非推奨: ECB モードでデータを暗号化/復号する	;	string mcrypt_ecb ( string $cipher, string $key, string $data, int $mode [, string $iv ] )	;	最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は libmcrypt 2.4.x とリンクした場合です。 mode は MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかとなります。
mcrypt_cbc	;	CBC モードでデータを暗号化/復号する	;	string mcrypt_cbc ( string $cipher, string $key, string $data, int $mode [, string $iv ] )	;	最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は、 libmcrypt 2.4.x とリンクした場合のものです。 mode は MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかです。
mcrypt_cfb	;	CFB モードでデータを暗号化/復号する	;	string mcrypt_cfb ( string $cipher, string $key, string $data, int $mode [, string $iv ] )	;	最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は、 libmcrypt 2.4.x とリンクした場合のものです。 mode は MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかです。
mcrypt_ofb	;	OFB モードでデータを暗号化/復号する	;	string mcrypt_ofb ( string $cipher, string $key, string $data, int $mode [, string $iv ] )	;	最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は libmcrypt 2.4.x 以降とリンクした場合です。 mode は、 MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかです。
mcrypt_get_key_size	;	指定した暗号のキーの長さを得る	;	int mcrypt_get_key_size ( string $cipher, string $mode )	;	最初のプロトタイプは libmcrypt 2.2.x とリンクした場合であり、2 番目の ものは libmcrypt 2.4.x あるいは 2.5.x とリンクした場合です。
mcrypt_get_block_size	;	指定した暗号のブロックサイズを得る	;	int mcrypt_get_block_size ( string $cipher, string $mode )	;	最初のプロトタイプは libmcrypt 2.2.x とリンクした場合であり、2 番目 のものは libmcrypt 2.4.x あるいは 2.5.x とリンクした場合です。
mcrypt_get_cipher_name	;	指定した暗号の名前を得る	;	string mcrypt_get_cipher_name ( string $cipher )	;	mcrypt_get_cipher_name() は、指定した暗号(cipher) の名前を得るために使用されます。
mcrypt_create_iv	;	乱数ソースから初期化ベクトル(IV)を生成する	;	string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_RANDOM ] )	;	初期化ベクトルを、ランダムなソースから作成します。
mcrypt_list_algorithms	;	サポートされる全ての暗号を配列として取得する	;	array mcrypt_list_algorithms ([ string $lib_dir = ini_get("mcrypt.algorithms_dir") ] )	;	lib_dir パラメータにあるサポートするすべてのアルゴリズムの一覧を取得します。
mcrypt_list_modes	;	サポートされる全てのモードの配列を取得する	;	array mcrypt_list_modes ([ string $lib_dir = ini_get("mcrypt.modes_dir") ] )	;	lib_dir にあるすべてのサポートするモードの一覧を取得します。
mcrypt_get_iv_size	;	指定した暗号/モードの組み合わせに属する IV の大きさを返す	;	int mcrypt_get_iv_size ( string $cipher, string $mode )	;	指定した cipher/mode の組み合わせにおける IV の大きさを取得します。
mcrypt_encrypt	;	指定したパラメータでプレーンテキストを暗号化する	;	string mcrypt_encrypt ( string $cipher, string $key, string $data, string $mode [, string $iv ] )	;	データを暗号化して、それを返します。
mcrypt_decrypt	;	指定したパラメータで暗号化されたテキストを復号する	;	string mcrypt_decrypt ( string $cipher, string $key, string $data, string $mode [, string $iv ] )	;	data を復号し、復号されたデータを返します。
mcrypt_module_open	;	使用するアルゴリズムおよびモードのモジュールをオープンする	;	resource mcrypt_module_open ( string $algorithm, string $algorithm_directory, string $mode, string $mode_directory )	;	この関数は、使用するアルゴリズムおよびモードのモジュールをオープン します。アルゴリズム名は、たとえば "twofish" のように名前で指定するか定数 MCRYPT_暗号名 のいずれかを使用して指定します。 ライブラリは mcrypt_module_close() をコールする ことによりクローズされます。
mcrypt_generic_init	;	暗号化に必要な全てのバッファを初期化する	;	int mcrypt_generic_init ( resource $td, string $key, string $iv )	;	mcrypt_generic() または mdecrypt_generic() をコールする前に、 常にこの関数をコールする必要があります。
mcrypt_generic	;	データを暗号化する	;	string mcrypt_generic ( resource $td, string $data )	;	この関数は、データを暗号化します。データ長を n * blocksize とする ために、データは "\0" で埋められます。 この関数は、暗号化されたデータを返します。 データのパディングが行われるため、返される文字列の長さは 入力よりも長いことがあることに注意してください。
mdecrypt_generic	;	データを復号する	;	string mdecrypt_generic ( resource $td, string $data )	;	この関数は、データを復号します。データのパディングが行われるため、 返される文字列の長さは暗号化前の文字列よりも長くなる可能性があることに 注意してください。
mcrypt_generic_end	;	暗号処理を終了する	;	bool mcrypt_generic_end ( resource $td )	;	警告 この関数は非推奨です。かわりに mcrypt_generic_deinit() を使用してください。 mcrypt_module_close() とともに使用すると、 複数バッファの開放によりクラッシュを引き起こすことがあります。
mcrypt_generic_deinit	;	暗号化モジュールを終了する	;	bool mcrypt_generic_deinit ( resource $td )	;	この関数は、暗号化記述子(td)で指定した 暗号化を終了します。すべてのバッファを消去しますが、モジュールは 閉じません。 mcrypt_module_close() をコールする 必要があります(しかし、スクリプトの終了時に PHP が自動でこれを 行います)。
mcrypt_enc_self_test	;	オープンしたモジュールのセルフテストを実行する	;	int mcrypt_enc_self_test ( resource $td )	;	この関数は、記述子 td で指定したアルゴリズムの セルフテストを実行します。
mcrypt_enc_is_block_algorithm_mode	;	オープンされたモードの暗号がブロックモードで動作するかどうかを調べる	;	bool mcrypt_enc_is_block_algorithm_mode ( resource $td )	;	オープンされているモードがブロックモードで動作するかどうかを調べます (たとえば素簿リームでは FALSE、cbc や cfb、ofb では TRUE)。
mcrypt_enc_is_block_algorithm	;	オープンされたモードの暗号がブロックアルゴリズムであるかどうかを調べる	;	bool mcrypt_enc_is_block_algorithm ( resource $td )	;	オープンされたモードの暗号がブロックアルゴリズムであるかどうかを調べます。
mcrypt_enc_is_block_mode	;	オープンされたモードがブロック出力を行うかどうかを調べる	;	bool mcrypt_enc_is_block_mode ( resource $td )	;	オープンされたモードがブロック出力を行うかどうかを調べます (例: cbc と ecb の場合に TRUE、cfb と stream の場合に FALSE)。
mcrypt_enc_get_block_size	;	オープンされたアルゴリズムのブロックサイズを返す	;	int mcrypt_enc_get_block_size ( resource $td )	;	オープンされたアルゴリズムのブロックサイズを取得します。
mcrypt_enc_get_key_size	;	オープンされたモードでサポートされる最大キー長を返す	;	int mcrypt_enc_get_key_size ( resource $td )	;	そのアルゴリズムでサポートされる最大キー長をバイト単位で返します。
mcrypt_enc_get_supported_key_sizes	;	オープンされたアルゴリズムでサポートされるキー長を配列にして返す	;	array mcrypt_enc_get_supported_key_sizes ( resource $td )	;	オープンしたアルゴリズムでサポートするキーの長さを取得します。
mcrypt_enc_get_iv_size	;	オープンされたアルゴリズムの IV の大きさを返す	;	int mcrypt_enc_get_iv_size ( resource $td )	;	この関数は、暗号化記述子で指定したアルゴリズムの iv の大きさを バイト単位で返します。IV は、cbc、cfb、ofbモード およびストリームモードのいくつかのアルゴリズムで使用されます。
mcrypt_enc_get_algorithms_name	;	オープンされたアルゴリズムの名前を返す	;	string mcrypt_enc_get_algorithms_name ( resource $td )	;	この関数はアルゴリズム名を返します。
mcrypt_enc_get_modes_name	;	オープンされたモードの名前を返す	;	string mcrypt_enc_get_modes_name ( resource $td )	;	この関数はモード名を返します。
mcrypt_module_self_test	;	指定したモジュールのセルフテストを実行する	;	bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )	;	この関数は、指定したアルゴリズムのセルフテストを実行します。
mcrypt_module_is_block_algorithm_mode	;	指定したモジュールがブロックアルゴリズムであるかどうかを返す	;	bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )	;	この関数は、mode がブロックアルゴリズムを使用する場合に TRUE、 その他の場合に FALSE を返します。(例: stream の場合に FALSE、 cbc、cfb、ofb の場合に TRUE)
mcrypt_module_is_block_algorithm	;	指定したアルゴリズムがブロックアルゴリズムであるかを調べる	;	bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )	;	この関数は、指定したアルゴリズムがブロックアルゴリズムの場合に TRUE、ストリームアルゴリズムの場合に FALSE を返します。
mcrypt_module_is_block_mode	;	指定したモードがブロック出力を行うかどうかを返す	;	bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )	;	この関数は、ブロック出力を行うモードの場合に TRUE、バイトのみを 出力する場合に FALSE を返します(例: cbc と ecb の場合に TRUE、 cfb と streamの場合に FALSE)。
mcrypt_module_get_algo_block_size	;	指定したアルゴリズムのブロック長を返す	;	int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )	;	指定したアルゴリズムのブロック長を取得します。
mcrypt_module_get_algo_key_size	;	オープンされたモードでサポートされる最大キー長を返す	;	int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )	;	オープンされたモードでサポートされる最大キー長を取得します。
mcrypt_module_get_supported_key_sizes	;	オープンされたアルゴリズムでサポートされるキーのサイズを配列として返す	;	array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )	;	指定したアルゴリズムでサポートされるキーのサイズを配列で返します。 この関数が空の配列を返した場合、1 から mcrypt_module_get_algo_key_size() の返り値の間のすべてのサイズのキーがアルゴリズムでサポートされます。
mcrypt_module_close	;	mcrypt モジュールを閉じる	;	bool mcrypt_module_close ( resource $td )	;	指定した暗号化ハンドルを閉じます。
mysql_connect	;	MySQL サーバーへの接続をオープンする	;	resource mysql_connect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = false [, int $client_flags = 0 ]]]]] )	;	MySQL サーバーへの接続をオープンあるいは再利用します。
mysql_pconnect	;	MySQL サーバーへの持続的な接続をオープンする	;	resource mysql_pconnect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0 ]]]] )	;	MySQL サーバーとの持続的な接続を確立します。
mysql_close	;	MySQL 接続を閉じる	;	bool mysql_close ([ resource $link_identifier = NULL ] )	;	mysql_close() は、指定した link_identifier が指す MySQL データベースへの非持続的リンクを閉じます。 link_identifier が指定されない場合、最後に オープンされたリンクが使用されます。
mysql_select_db	;	MySQL データベースを選択する	;	bool mysql_select_db ( string $database_name [, resource $link_identifier = NULL ] )	;	指定したリンク ID が指すサーバー上のデータベースを、アクティブな データベースに設定します。それ以降にコールされる mysql_query() は、すべてアクティブなデータベース上で 実行されます。
mysql_query	;	MySQL クエリを送信する	;	resource mysql_query ( string $query [, resource $link_identifier = NULL ] )	;	mysql_query() は、 ひとつのクエリを送信します (複数クエリの送信はサポートしません)。 送信先は、link_identifier で指定したサーバー上にある、現在アクティブなデータベースです。
mysql_unbuffered_query	;	MySQL に SQL クエリを送信するが、結果に対してのフェッチやバッファリングは行わない	;	resource mysql_unbuffered_query ( string $query [, resource $link_identifier = NULL ] )	;	mysql_unbuffered_query() は SQL クエリ query を MySQL に送信します。その際、 mysql_query() が行っているような自動バッファリングを 行いません。一方、この挙動により SQL クエリが消費するメモリの量を おさえられます。また、最初の 1 行目が取得されたらすぐに処理を はじめることができます。SQL の処理が完全に終わるまで待つ必要がありません。 複数の DB 接続を利用する場合には、オプションのパラメータ link_identifier を指定する必要があります。
mysql_db_query	;	データベースを選択し、そこでクエリーを実行する	;	resource mysql_db_query ( string $database, string $query [, resource $link_identifier = NULL ] )	;	mysql_db_query() はデータベースを選択し、 そこでクエリーを実行します。
mysql_list_dbs	;	MySQL サーバー上で利用可能なデータベースのリストを得る	;	resource mysql_list_dbs ([ resource $link_identifier = NULL ] )	;	現在の mysql デーモンで利用可能なデータベースの結果ポインタを返します。
mysql_list_tables	;	MySQL データベース上のテーブルのリストを得る	;	resource mysql_list_tables ( string $database [, resource $link_identifier = NULL ] )	;	MySQL データベースから、テーブル名のリストを取得します。
mysql_list_fields	;	MySQL テーブルのフィールドのリストを得る	;	resource mysql_list_fields ( string $database_name, string $table_name [, resource $link_identifier = NULL ] )	;	指定された名前のテーブルについての情報を取得します。
mysql_list_processes	;	MySQL プロセスのリストを得る	;	resource mysql_list_processes ([ resource $link_identifier = NULL ] )	;	現在の MySQL サーバーのスレッドを取得します。
mysql_error	;	直近に実行された MySQL 操作のエラーメッセージを返す	;	string mysql_error ([ resource $link_identifier = NULL ] )	;	直近の MySQL 関数からのエラー文字列を返します。 MySQL データベースバックエンドから返ってくるエラーは、 警告を発生しません。代わりに mysql_error() を用いて エラー文字列を取得してください。この関数が返すのは、直近に実行された MySQL 関数（ mysql_error() と mysql_errno() は除く）のエラー文字列だけであることに 注意しましょう。この関数を利用するなら、別の MySQL 関数をコールする前に 値を調べることを忘れないようにしましょう。
mysql_errno	;	直近の MySQL 処理からエラーメッセージのエラー番号を返す	;	int mysql_errno ([ resource $link_identifier = NULL ] )	;	直近の MySQL 関数で発生したエラーの番号を返します。
mysql_affected_rows	;	一番最近の操作で変更された行の数を得る	;	int mysql_affected_rows ([ resource $link_identifier = NULL ] )	;	link_identifier と関連付けられた直近の INSERT、UPDATE、REPLACE、DELETE クエリによって変更された行の数を取得します。
mysql_insert_id	;	直近のクエリで生成された ID を得る	;	int mysql_insert_id ([ resource $link_identifier = NULL ] )	;	直近のクエリ (通常は INSERT) により AUTO_INCREMENT カラム用に生成された ID を取得します。
mysql_result	;	結果データを得る	;	string mysql_result ( resource $result, int $row [, mixed $field = 0 ] )	;	MySQL の結果セットからひとつのセルの内容を取得します。
mysql_num_rows	;	結果における行の数を得る	;	int mysql_num_rows ( resource $result )	;	結果セットから行の数を取得します。このコマンドは、 SELECT や SHOW のような、実際に結果セットを返す文に対してのみ有効です。 INSERT、UPDATE、REPLACE、DELETE クエリで変更された行の数を得るには、 mysql_affected_rows() を使用してください。
mysql_num_fields	;	結果におけるフィールドの数を得る	;	int mysql_num_fields ( resource $result )	;	クエリから、フィールドの数を取得します。
mysql_fetch_row	;	結果を添字配列として取得する	;	array mysql_fetch_row ( resource $result )	;	取得された行に対応する配列を返し、内部のデータポインタを前に進めます。
mysql_fetch_array	;	連想配列、添字配列、またはその両方として結果の行を取得する	;	array mysql_fetch_array ( resource $result [, int $result_type = MYSQL_BOTH ] )	;	取得した行に対応する配列を返し、内部のデータポインタを前に進めます。
mysql_fetch_assoc	;	連想配列として結果の行を取得する	;	array mysql_fetch_assoc ( resource $result )	;	取得した行に対応する連想配列を返し、内部のデータポインタを前に進めます。 mysql_fetch_assoc() は、 mysql_fetch_array() の 2 番目のパラメータを MYSQL_ASSOC に指定してコールするのと同じ働きをします。つまり、 連想配列のみを返します。
mysql_fetch_object	;	結果の行をオブジェクトとして取得する	;	object mysql_fetch_object ( resource $result [, string $class_name [, array $params ]] )	;	取得された行を表すプロパティを有するオブジェクトを返し、 内部のデータポインタを前に進めます。
mysql_data_seek	;	内部的な結果ポインタを移動する	;	bool mysql_data_seek ( resource $result, int $row_number )	;	mysql_data_seek() は、指定した結果 ID （result_identifier）が指す MySQL 結果の内部ポインタが指定した行番号 （row_number）を指すように移動します。 この後、たとえば mysql_fetch_assoc() のような MySQL のフェッチ関数をコールした場合には、 ここで指定した行の内容が返されます。
mysql_fetch_lengths	;	結果における各出力の長さを得る	;	array mysql_fetch_lengths ( resource $result )	;	MySQL により一番最近に取得された行における各フィールドの長さを 格納した配列を返します。
mysql_fetch_field	;	結果からカラム情報を取得し、オブジェクトとして返す	;	object mysql_fetch_field ( resource $result [, int $field_offset = 0 ] )	;	フィールド情報を含むオブジェクトを返します。特定のクエリー結果の中の フィールドに関する情報を得るために使用可能です。
mysql_field_seek	;	結果ポインタを指定したフィールドオフセットにセットする	;	bool mysql_field_seek ( resource $result, int $field_offset )	;	指定したフィールドオフセットに移動します。 mysql_field_seek() をコールした後、 mysql_fetch_field() をフィールドオフセットを付けずに コールした場合、このフィールドが返されます。
mysql_free_result	;	結果保持用メモリを開放する	;	bool mysql_free_result ( resource $result )	;	mysql_free_result() は、結果 ID result に関するすべてのメモリを開放します。
mysql_field_name	;	結果において指定したフィールド名を取得する	;	string mysql_field_name ( resource $result, int $field_offset )	;	mysql_field_name() は、指定したフィールドの 名前を返します。
mysql_field_table	;	指定したフィールドが含まれるテーブルの名前を取得する	;	string mysql_field_table ( resource $result, int $field_offset )	;	指定したフィールドが含まれるテーブルの名前を返します。
mysql_field_len	;	指定したフィールドの長さを返す	;	int mysql_field_len ( resource $result, int $field_offset )	;	mysql_field_len() は指定したフィールドの長さを 返します。
mysql_field_type	;	結果において指定したフィールドの型を取得する	;	string mysql_field_type ( resource $result, int $field_offset )	;	mysql_field_type() は、 mysql_field_name() 関数に似ています。 引数は同じですが、この関数ではフィールドの型が返されます。
mysql_field_flags	;	結果において指定したフィールドのフラグを取得する	;	string mysql_field_flags ( resource $result, int $field_offset )	;	mysql_field_flags() は、指定したフィールドの フィールドフラグを返します。個々のフラグは、空白一つで区切られた 形式で返されます。このため、返された値を explode() で分割することができます。
mysql_escape_string	;	mysql_query で使用するために文字列をエスケープする	;	string mysql_escape_string ( string $unescaped_string )	;	この関数は、 mysql_query() で指定可能なように unescaped_string をエスケープします。 この関数は非推奨です。
mysql_real_escape_string	;	SQL 文中で用いる文字列の特殊文字をエスケープする	;	string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier = NULL ] )	;	現在の接続の文字セットで unescaped_string の特殊文字をエスケープし、 mysql_query() で安全に利用できる形式に変換します。バイナリデータを挿入しようとしている場合、 必ずこの関数を利用しなければなりません。
mysql_stat	;	現在のシステムの状態を取得する	;	string mysql_stat ([ resource $link_identifier = NULL ] )	;	mysql_stat() は現在のサーバーの状態を返します。
mysql_thread_id	;	カレントのスレッド ID を返す	;	int mysql_thread_id ([ resource $link_identifier = NULL ] )	;	カレントのスレッド ID を取得します。接続が一度切断され、 mysql_ping() によって再接続された場合には、 スレッド ID は変わります。つまり、スレッド ID は必要になったその時点で 取得すべきだということです。
mysql_client_encoding	;	文字セット名を返す	;	string mysql_client_encoding ([ resource $link_identifier = NULL ] )	;	MySQL の character_set 変数の値を取得します。
mysql_ping	;	サーバーとの接続状況を調べ、接続されていない場合は再接続する	;	bool mysql_ping ([ resource $link_identifier = NULL ] )	;	サーバーとの接続が有効かどうかを調べます。 もし接続が切れていた場合、自動的に再接続が試みられます。 この関数は、アイドル期間が長いスクリプトで利用し、 サーバーが接続を切断したかどうかを確認するために用いられます。
mysql_get_client_info	;	MySQL クライアント情報を取得する	;	string mysql_get_client_info ( void )	;	mysql_get_client_info() は、 クライアントライブラリのバージョンを表す文字列を返します。
mysql_get_host_info	;	MySQL ホスト情報を取得する	;	string mysql_get_host_info ([ resource $link_identifier = NULL ] )	;	使用されている接続の型を返します。その中にはサーバーのホスト名も含まれます。
mysql_get_proto_info	;	MySQL プロトコル情報を取得する	;	int mysql_get_proto_info ([ resource $link_identifier = NULL ] )	;	MySQL プロトコルを取得します。
mysql_get_server_info	;	MySQL サーバー情報を取得する	;	string mysql_get_server_info ([ resource $link_identifier = NULL ] )	;	MySQL サーバーのバージョンを取得します。
mysql_info	;	直近のクエリについての情報を得る	;	string mysql_info ([ resource $link_identifier = NULL ] )	;	直近のクエリについての詳細な情報を返します。
mysql_set_charset	;	クライアントの文字セットを設定する	;	bool mysql_set_charset ( string $charset [, resource $link_identifier = NULL ] )	;	現在の接続における、デフォルトの文字セットを設定します。
mysql	;		;		;	
mysql_fieldname	;		;		;	
mysql_fieldtable	;		;		;	
mysql_fieldlen	;		;		;	
mysql_fieldtype	;		;		;	
mysql_fieldflags	;		;		;	
mysql_selectdb	;		;		;	
mysql_freeresult	;		;		;	
mysql_numfields	;		;		;	
mysql_numrows	;		;		;	
mysql_listdbs	;		;		;	
mysql_listtables	;		;		;	
mysql_listfields	;		;		;	
mysql_db_name	;	mysql_list_dbs()  のコール結果からデータベース名を取得する	;	string mysql_db_name ( resource $result, int $row [, mixed $field = NULL ] )	;	mysql_list_dbs() をコールした結果からデータベース名を取得します。
mysql_dbname	;		;		;	
mysql_tablename	;	フィールドのテーブル名を得る	;	string mysql_tablename ( resource $result, int $i )	;	result からテーブル名を取得します。
mysql_table_name	;		;		;	
mysqli_affected_rows	;		;		;	
mysqli_autocommit	;	データベース更新の自動コミットをオンまたはオフにする	;	bool mysqli_autocommit ( mysqli $link, bool $mode )	;	指定されたデータベース接続リソースに対するクエリの 自動コミットモードをオンまたはオフにします。
mysqli_change_user	;		;		;	
mysqli_character_set_name	;		;		;	
mysqli_close	;	事前にオープンしているデータベース接続を閉じる	;	bool mysqli_close ( mysqli $link )	;	既に開いているデータベース接続を閉じます。
mysqli_commit	;	現在のトランザクションをコミットする	;	bool mysqli_commit ( mysqli $link )	;	データベース接続の現在のトランザクションをコミットします。
mysqli_connect	;	mysqli::__construct()  のエイリアス	;		;	
mysqli_connect_errno	;		;		;	
mysqli_connect_error	;		;		;	
mysqli_data_seek	;		;		;	
mysqli_dump_debug_info	;		;		;	
mysqli_debug	;	デバッグ操作を行う	;	bool mysqli_debug ( string $message )	;	Fred Fish debugging library を使用してデバッグを行います。
mysqli_errno	;	直近の関数コールによるエラーコードを返す	;	int mysqli_errno ( mysqli $link )	;	直近の MySQLi 関数のコールが成功あるいは失敗した際のエラーコードを返します。
mysqli_error	;	直近のエラーの内容を文字列で返す	;	string mysqli_error ( mysqli $link )	;	直近の MySQLi 関数のコールが成功あるいは失敗した際のエラーメッセージを返します。
mysqli_stmt_execute	;	プリペアドクエリを実行する	;	bool mysqli_stmt_execute ( mysqli_stmt $stmt )	;	事前に mysqli_prepare() 関数で用意されたクエリを実行します。 パラメータマーカが存在する場合、その内容は自動的に適切なデータに置き換えられます。
mysqli_execute	;	mysqli_stmt_execute()  のエイリアス	;		;	
mysqli_fetch_field	;		;		;	
mysqli_fetch_fields	;		;		;	
mysqli_fetch_field_direct	;		;		;	
mysqli_fetch_lengths	;		;		;	
mysqli_fetch_array	;		;		;	
mysqli_fetch_assoc	;		;		;	
mysqli_fetch_object	;		;		;	
mysqli_fetch_row	;		;		;	
mysqli_field_count	;		;		;	
mysqli_field_seek	;		;		;	
mysqli_field_tell	;		;		;	
mysqli_free_result	;		;		;	
mysqli_get_charset	;		;		;	
mysqli_get_client_info	;		;		;	
mysqli_get_client_version	;		;		;	
mysqli_get_host_info	;		;		;	
mysqli_get_proto_info	;		;		;	
mysqli_get_server_info	;		;		;	
mysqli_get_server_version	;		;		;	
mysqli_get_warnings	;		;		;	
mysqli_init	;	MySQLi を初期化し、mysqli_real_connect() で使用するリソースを返す	;	mysqli mysqli_init ( void )	;	mysqli_options() および mysqli_real_connect() で使用可能な MYSQL オブジェクトを割り当て、初期化します。
mysqli_info	;	直近に実行されたクエリの情報を取得する	;	string mysqli_info ( mysqli $link )	;	mysqli_info() 関数は、直近に実行されたクエリに ついての情報を文字列で返します。文字列の詳細は以下のとおりです。
mysqli_insert_id	;		;		;	
mysqli_kill	;	サーバーに MySQL スレッドの停止を問い合わせる	;	bool mysqli_kill ( mysqli $link, int $processid )	;	この関数は、processid で指定した MySQL スレッドの停止をサーバーに問い合わせます。この値は、 mysqli_thread_id() 関数で取得したものである 必要があります。
mysqli_set_local_infile_default	;		;		;	
mysqli_set_local_infile_handler	;		;		;	
mysqli_more_results	;		;		;	
mysqli_multi_query	;		;		;	
mysqli_next_result	;		;		;	
mysqli_num_fields	;		;		;	
mysqli_num_rows	;		;		;	
mysqli_options	;	オプションを設定する	;	bool mysqli_options ( mysqli $link, int $option, mixed $value )	;	接続に関する追加オプションを設定し、 接続の振る舞いに影響を与えるために使用します。
mysqli_ping	;	サーバーとの接続をチェックし、もし切断されている場合は再接続を試みる	;	bool mysqli_ping ( mysqli $link )	;	サーバーとの接続が動作中かどうかを確かめます。もし切断されており、 グローバルオプション mysqli.reconnect が有効な場合は再接続を試みます。
mysqli_prepare	;	実行するための SQL ステートメントを準備する	;	mysqli_stmt mysqli_prepare ( mysqli $link, string $query )	;	SQL クエリを準備し、後でそのステートメントを操作するために使用する ステートメントハンドルを返します。 クエリは、単一の SQL 文である必要があります。
mysqli_report	;	内部のレポート関数を有効あるいは無効にする	;	bool mysqli_report ( int $flags )	;	mysqli_report() は、開発やテストのフェーズにおいて クエリの機能を向上させる強力な関数です。フラグの設定により、この関数は インデックスを使用しない（あるいは間違ったインデックスを使用している） mysqli 関数コールやクエリに対してエラーを報告します。
mysqli_query	;	データベース上でクエリを実行する	;	mixed mysqli_query ( mysqli $link, string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )	;	データベースに対してクエリ query を実行します。
mysqli_real_connect	;		;		;	
mysqli_real_escape_string	;		;		;	
mysqli_real_query	;		;		;	
mysqli_rollback	;	現在のトランザクションをロールバックする	;	bool mysqli_rollback ( mysqli $link )	;	データベースの現在のトランザクションをロールバックします。
mysqli_select_db	;		;		;	
mysqli_set_charset	;		;		;	
mysqli_stmt_affected_rows	;		;		;	
mysqli_stmt_attr_get	;		;		;	
mysqli_stmt_attr_set	;		;		;	
mysqli_stmt_bind_param	;		;		;	
mysqli_stmt_bind_result	;		;		;	
mysqli_stmt_close	;	プリペアドステートメントを閉じる	;	bool mysqli_stmt_close ( mysqli_stmt $stmt )	;	プリペアドステートメントを閉じます。また、 mysqli_stmt_close() は stmt が指すステートメントハンドルを開放します。 現在のステートメントが実行中あるいはまだ結果を取得していない場合、 この関数はキャンセルされ、次のクエリが実行されます。
mysqli_stmt_data_seek	;		;		;	
mysqli_stmt_errno	;	直近のステートメントのコールに関するエラーコードを返す	;	int mysqli_stmt_errno ( mysqli_stmt $stmt )	;	直近に実行されたステートメントが 成功あるいは失敗した際のエラーコードを返します。
mysqli_stmt_error	;	直近のステートメントのエラー内容を文字列で返す	;	string mysqli_stmt_error ( mysqli_stmt $stmt )	;	直近に実行されたステートメントが 成功あるいは失敗した際のエラーメッセージを返します。
mysqli_stmt_fetch	;	プリペアドステートメントから結果を取得し、バインド変数に格納する	;	bool mysqli_stmt_fetch ( mysqli_stmt $stmt )	;	プリペアドステートメントから結果を読み込み、 mysqli_stmt_bind_result() でバインドした変数に格納します。
mysqli_stmt_field_count	;		;		;	
mysqli_stmt_free_result	;		;		;	
mysqli_stmt_get_warnings	;		;		;	
mysqli_stmt_init	;		;		;	
mysqli_stmt_insert_id	;		;		;	
mysqli_stmt_num_rows	;		;		;	
mysqli_stmt_param_count	;		;		;	
mysqli_stmt_prepare	;	SQL ステートメントを実行するために準備する	;	bool mysqli_stmt_prepare ( mysqli_stmt $stmt, string $query )	;	null で終わる文字列で指定した SQL クエリを準備します。
mysqli_stmt_reset	;	プリペアドステートメントをリセットする	;	bool mysqli_stmt_reset ( mysqli_stmt $stmt )	;	クライアントおよびサーバーで、実行後のプリペアドステートメントをリセットします。
mysqli_stmt_result_metadata	;		;		;	
mysqli_stmt_send_long_data	;		;		;	
mysqli_stmt_store_result	;		;		;	
mysqli_stmt_sqlstate	;	直前のステートメントの操作での SQLSTATE エラーを返す	;	string mysqli_stmt_sqlstate ( mysqli_stmt $stmt )	;	直近に実行されたプリペアドステートメントのエラーについて、 SQLSTATE エラーコードを含む文字列を返します。 エラーコードは 5 つの文字で構成されています。'00000' はエラーが発生しなかったことを意味します。この値は、ANSI SQL および ODBC で定義されています。とりうる値の一覧は &raquo;&nbsp;http://dev.mysql.com/doc/mysql/en/error-handling.html を参照ください。
mysqli_sqlstate	;	直前の MySQL の操作での SQLSTATE エラーを返す	;	string mysqli_sqlstate ( mysqli $link )	;	直近のエラーについて、SQLSTATE エラーコードを含む文字列を返します。 エラーコードは 5 つの文字で構成されています。'00000' はエラーが発生しなかったことを意味します。この値は、ANSI SQL および ODBC で定義されています。とりうる値の一覧は &raquo;&nbsp;http://dev.mysql.com/doc/mysql/en/error-handling.html を参照ください。
mysqli_ssl_set	;		;		;	
mysqli_stat	;	現在のシステム状態を取得する	;	string mysqli_stat ( mysqli $link )	;	mysqli_stat() は、'mysqladmin status' コマンドが 返すのと同じ情報を返します。この中には、起動からの秒数・起動中の スレッドの数・リロード数および開かれているテーブルなどが含まれます。
mysqli_store_result	;		;		;	
mysqli_thread_id	;		;		;	
mysqli_thread_safe	;		;		;	
mysqli_use_result	;		;		;	
mysqli_warning_count	;		;		;	
mysqli_refresh	;	リフレッシュする	;	int mysqli_refresh ( resource $link, int $options )	;	テーブルやキャッシュのフラッシュ、あるいはレプリケーションサーバー情報のリセットを行います。
mysqli_bind_param	;	mysqli_stmt_bind_param()  のエイリアス	;		;	
mysqli_bind_result	;	mysqli_stmt_bind_result()  のエイリアス	;		;	
mysqli_client_encoding	;	mysqli_character_set_name()  のエイリアス	;		;	
mysqli_escape_string	;	mysqli_real_escape_string()  のエイリアス	;		;	
mysqli_fetch	;	mysqli_stmt_fetch()  のエイリアス	;		;	
mysqli_param_count	;	mysqli_stmt_param_count()  のエイリアス	;		;	
mysqli_get_metadata	;	mysqli_stmt_result_metadata()  のエイリアス	;		;	
mysqli_send_long_data	;	mysqli_stmt_send_long_data()  のエイリアス	;		;	
mysqli_set_opt	;	mysqli_options()  のエイリアス	;		;	
spl_classes	;	利用可能な SPL クラスを返す	;	array spl_classes ( void )	;	この関数は現在利用可能な SPL クラスを配列で返します。
spl_autoload	;	__autoload() のデフォルト実装	;	void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )	;	この関数は、 __autoload() のデフォルト実装として使用されることを意図しています。 ほかに何も指定されておらず、 autoload_register() がパラメータなしでコールされた場合には、 その後の __autoload() のコール時にはこの関数が使用されます。
spl_autoload_extensions	;	spl_autoload 用のデフォルトの拡張子を登録し、それを返す	;	string spl_autoload_extensions ([ string $file_extensions ] )	;	この関数は、 __autoload() 用の代替関数である spl_autoload() が使用するファイル拡張子を変更したり調べたりします。
spl_autoload_register	;	指定した関数を __autoload() の実装として登録する	;	bool spl_autoload_register ([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]] )	;	指定した関数を、spl が提供する __autoload スタックに登録します。 スタックがまだアクティブになっていない場合は、まずアクティブにします。
spl_autoload_unregister	;	指定した関数の、__autoload() の実装としての登録を解除する	;	bool spl_autoload_unregister ( mixed $autoload_function )	;	spl が提供する __autoload スタックから、関数の登録を解除します。 スタックがアクティブであり、かつこの関数の実行後にスタックが空になった場合は スタックが非アクティブ化されます。
spl_autoload_functions	;	すべての登録済み __autoload() 関数を返す	;	array spl_autoload_functions ( void )	;	すべての登録済み __autoload() 関数を取得します。
spl_autoload_call	;	要求されたクラスを読み込むために、すべての登録済みの __autoload() 関数を試す	;	void spl_autoload_call ( string $class_name )	;	この関数は、登録済みの __autoload 関数を使用して クラスあるいはインターフェイスを手動で探すために使用することができます。
class_parents	;	与えられたクラスの親クラスを返す	;	array class_parents ( mixed $class [, bool $autoload = true ] )	;	この関数は、与えられたクラス class の親クラス名を 配列で返します。
class_implements	;	与えられたクラスが実装しているインターフェイスを返す	;	array class_implements ( mixed $class [, bool $autoload = true ] )	;	この関数は、与えられたクラス class とその親が実装しているインターフェイスを配列で返します。
spl_object_hash	;	指定したオブジェクトのハッシュ ID を返す	;	string spl_object_hash ( object $obj )	;	この関数は、オブジェクトの一意な識別子を返します。この ID は、 オブジェクトを保存する際のハッシュのキーとして使用できますし、 オブジェクトを識別するための値として使用することもできます。
iterator_to_array	;	イテレータを配列にコピーする	;	array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ] )	;	イテレータの要素を配列にコピーします。
iterator_count	;	イテレータにある要素をカウントする	;	int iterator_count ( Traversable $iterator )	;	イテレータにある要素をカウントします。
iterator_apply	;	ユーザー関数をイテレータのすべての要素でコールする	;	int iterator_apply ( Traversable $iterator, callable $function [, array $args ] )	;	イテレータ内のすべての要素に対して関数をコールします。
pdo_drivers	;		;		;	
posix_kill	;	プロセスにシグナルを送信する	;	bool posix_kill ( int $pid, int $sig )	;	シグナル sig をプロセス ID pid のプロセスに送信します。
posix_getpid	;	現在のプロセス ID を返す	;	int posix_getpid ( void )	;	現在のプロセスのプロセス ID を返します。
posix_getppid	;	親プロセスの ID を返す	;	int posix_getppid ( void )	;	現在のプロセスの親プロセスの ID を返します。
posix_getuid	;	現在のプロセスの実際のユーザー ID を返す	;	int posix_getuid ( void )	;	現在のプロセスの実際のユーザー ID を返します。
posix_setuid	;	現在のプロセスの UID を設定する	;	bool posix_setuid ( int $uid )	;	現在のプロセスの実際のユーザー ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。
posix_geteuid	;	現在のプロセスの有効なユーザー ID を返す	;	int posix_geteuid ( void )	;	現在のプロセスの有効なユーザー ID を返します。 使用可能なユーザー名に変換する方法に関する情報については、 posix_getpwuid() も参照ください。
posix_seteuid	;	現在のプロセスの実効 UID を設定する	;	bool posix_seteuid ( int $uid )	;	現在のプロセスの実効ユーザー ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。
posix_getgid	;	現在のプロセスの実際のグループ ID を返す	;	int posix_getgid ( void )	;	現在のプロセスの実際のグループ ID を返します。
posix_setgid	;	現在のプロセスの GID を設定する	;	bool posix_setgid ( int $gid )	;	現在のプロセスのグループ ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。 posix_setgid() を最初に、 posix_setuid() を最後にコールするのが、 関数コールの正しい順序となります。
posix_getegid	;	現在のプロセスの有効なグループ ID を返す	;	int posix_getegid ( void )	;	現在のプロセスの有効なグループ ID を返します。
posix_setegid	;	現在のプロセスの実効 GID を設定する	;	bool posix_setegid ( int $gid )	;	現在のプロセスの実効グループ ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。
posix_getgroups	;	現在のプロセスのグループセットを返す	;	array posix_getgroups ( void )	;	現在のプロセスのグループセットを取得します。
posix_getlogin	;	ログイン名を返す	;	string posix_getlogin ( void )	;	現在のプロセスを所有するユーザーのログイン名を返します。
posix_getpgrp	;	現在のプロセスのグループ ID を返す	;	int posix_getpgrp ( void )	;	現在のプロセスのグループ ID を返します。
posix_setsid	;	現在のプロセスをセッションリーダーにする	;	int posix_setsid ( void )	;	現在のプロセスをセッションリーダーにします。
posix_setpgid	;	ジョブ制御のプロセスグループ ID を設定する	;	bool posix_setpgid ( int $pid, int $pgid )	;	プロセス pid をプロセスグループ pgid に加えます。
posix_getpgid	;	ジョブ制御のプロセスグループ ID を得る	;	int posix_getpgid ( int $pid )	;	プロセス pid のプロセスグループ ID を返します。失敗した場合に FALSE を返します。
posix_getsid	;	プロセスの現在の sid を得る	;	int posix_getsid ( int $pid )	;	プロセス pid のセッション ID を返します。 プロセスのセッション ID とは、セッションリーダーのプロセスグループ ID のことです。
posix_uname	;	システム名を得る	;	array posix_uname ( void )	;	システムについての情報を取得します。
posix_times	;	プロセス時間を得る	;	array posix_times ( void )	;	現在の CPU 使用状況についての情報を取得します。
posix_ctermid	;	制御する端末のパス名を得る	;	string posix_ctermid ( void )	;	そのプロセスで現在制御している端末のパス名を表す文字列を作成します。 エラーが発生した場合は errno を設定します。この値を調べるには posix_get_last_error() を使用します。
posix_ttyname	;	端末のデバイス名を調べる	;	string posix_ttyname ( int $fd )	;	ファイル記述子 fd 上でオープンしている現在の端末デバイスへの絶対パスを文字列で返します。
posix_isatty	;	ファイル記述子が対話型端末であるかどうかを定義する	;	bool posix_isatty ( int $fd )	;	ファイル記述子 fd が、 有効な端末デバイスを指しているかどうかを調べます。
posix_getcwd	;	現在のディレクトリのパス名	;	string posix_getcwd ( void )	;	スクリプトの現在の実行ディレクトリのパスを、絶対パスで取得します。 エラー時には errno を設定します。この値は posix_get_last_error() で取得することができます。
posix_mkfifo	;	fifo スペシャルファイル(名前付きパイプ)を作成する	;	bool posix_mkfifo ( string $pathname, int $mode )	;	posix_mkfifo() は、 FIFO スペシャルファイルを作成します。 これはファイルシステム内に存在し、プロセス間の双方向通信の末端として 動作します。
posix_mknod	;	スペシャルファイルあるいは通常のファイルを作成する (POSIX.1)	;	bool posix_mknod ( string $pathname, int $mode [, int $major = 0 [, int $minor = 0 ]] )	;	スペシャルファイルあるいは通常のファイルを作成します。
posix_access	;	ファイルのアクセス権限を判断する	;	bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )	;	posix_access() は、ファイルに対するユーザーの アクセス権限を調べます。
posix_getgrnam	;	指定した名前のグループに関する情報を返す	;	array posix_getgrnam ( string $name )	;	指定した名前のグループに関する情報を取得します。
posix_getgrgid	;	指定したグループ ID を有するグループに関する情報を返す	;	array posix_getgrgid ( int $gid )	;	指定した ID のグループに関する情報を取得します。
posix_getpwnam	;	指定した名前のユーザーに関する情報を返す	;	array posix_getpwnam ( string $username )	;	指定したユーザーに関する情報を配列で返します。
posix_getpwuid	;	指定 ID のユーザーに関する情報を返す	;	array posix_getpwuid ( int $uid )	;	指定したユーザー ID のユーザーについての情報を配列で返します。
posix_getrlimit	;	システムリソース制限に関する情報を返す	;	array posix_getrlimit ( void )	;	posix_getrlimit() は、 現在のリソースにおけるソフトリミットおよびハードリミットを配列で返します。
posix_get_last_error	;	直近で失敗した posix 関数が設定したエラー番号を取得する	;	int posix_get_last_error ( void )	;	直近で失敗した posix 関数が設定したエラー番号を取得します。 エラー番号に対応するエラーメッセージを取得するには posix_strerror() を使用します。
posix_errno	;	posix_get_last_error()  のエイリアス	;		;	
posix_strerror	;	指定したエラー番号に対応するシステムのエラーメッセージを取得する	;	string posix_strerror ( int $errno )	;	指定したエラー番号 errno に対応する POSIX システムエラーメッセージを返します。 errno を取得するには、 posix_get_last_error() をコールします。
posix_initgroups	;	グループアクセスリストを求める	;	bool posix_initgroups ( string $name, int $base_group_id )	;	指定した名前のユーザーについてのグループアクセスリストを求めます。
session_name	;	現在のセッション名を取得または設定する	;	string session_name ([ string $name ] )	;	session_name() は、現在のセッション名を返します。 name を渡すと、 session_name() はセッション名を上書きして元のセッション名を返します。
session_module_name	;	現在のセッションモジュールを取得または設定する	;	string session_module_name ([ string $module ] )	;	session_module_name() は、 現在のセッションモジュールの名前を返します。
session_save_path	;	現在のセッションデータ保存パスを取得または設定する	;	string session_save_path ([ string $path ] )	;	session_save_path() は、 現在のセッションデータ保存パスを返します。
session_id	;	現在のセッション ID を取得または設定する	;	string session_id ([ string $id ] )	;	session_id() は現在のセッション ID を取得 または設定するために使用されます。
session_regenerate_id	;	現在のセッションIDを新しく生成したものと置き換える	;	bool session_regenerate_id ([ bool $delete_old_session = false ] )	;	session_regenerate_id() は現在のセッションIDを 新しいものと置き換えます。その際、現在のセッション情報は維持されます。
session_decode	;	セッションエンコードされた文字列からセッションデータをデコードする	;	bool session_decode ( string $data )	;	session_decode() は、 $data のセッションデータをデコードし、 スーパーグローバル $_SESSION にその結果を格納します。
session_register	;	現在のセッションに1つ以上の変数を登録する	;	bool session_register ( mixed $name [, mixed $... ] )	;	session_register() の引数の数は可変であり、 各引数は変数名を保持する文字列または変数名からなる配列 とすることが可能です。 各変数名が処理される毎に、 session_register() は、その変数名のグローバル変数を現在のセッションに登録します。
session_unregister	;	現在のセッションから変数の登録を削除する	;	bool session_unregister ( string $name )	;	session_unregister() は現在のセッションから name という名前のグローバル変数の登録を削除します。
session_is_registered	;	変数がセッションに登録されているかどうかを調べる	;	bool session_is_registered ( string $name )	;	グローバル変数がセッションに登録されているかどうかを調べます。
session_encode	;	現在のセッションデータを、セッションエンコードされた文字列に変換する	;	string session_encode ( void )	;	session_encode() は、 現在のセッションの内容をシリアライズした文字列を返します． 現在のセッションの内容は、スーパーグローバル $_SESSION から取得します。
session_start	;	新しいセッションを開始、あるいは既存のセッションを再開する	;	bool session_start ( void )	;	session_start() は、セッションを作成します。 もしくは、リクエスト上で GET, POST またはクッキーにより渡されたセッション ID に基づき現在のセッションを復帰します。
session_destroy	;	セッションに登録されたデータを全て破棄する	;	bool session_destroy ( void )	;	
session_unset	;	全てのセッション変数を開放する	;	void session_unset ( void )	;	関数 session_unset() は現在登録されている全てのセッション変数を開放します。
session_set_save_handler	;	ユーザー定義のセッション保存関数を設定する	;	bool session_set_save_handler ( SessionHandlerInterface $sessionhandler [, bool $register_shutdown = true ] )	;	session_set_save_handler() は、セッションに 関連するデータを保存および取得するために使用されるユーザー定義の セッション保存関数を設定します。この関数は、セッションデータを ローカルデータベースに保存する場合のように PHP セッションにより 提供されるもの以外の保存方法を使用したい場合に有用です。
session_cache_limiter	;	現在のキャッシュリミッタを取得または設定する	;	string session_cache_limiter ([ string $cache_limiter ] )	;	session_cache_limiter() は、 現在のキャッシュリミッタの名前を返します。
session_cache_expire	;	現在のキャッシュの有効期限を返す	;	int session_cache_expire ([ string $new_cache_expire ] )	;	session_cache_expire() は現在の session.cache_expire の設定を返します。
session_set_cookie_params	;	セッションクッキーパラメータを設定する	;	void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )	;	ファイル php.ini で定義されたクッキーパラメータを設定します。 この関数の効果が持続するのは、スクリプトの実行が終了するまでです。 したがって、リクエスト毎や session_start() がコールされる前に session_set_cookie_params() をコールする必要があります。
session_get_cookie_params	;	セッションクッキーのパラメータを得る	;	array session_get_cookie_params ( void )	;	セッションクッキーのパラメータを取得します。
session_write_close	;	セッションデータを書き込んでセッションを終了する	;	void session_write_close ( void )	;	現在のセッションを終了し、セッションデータを書き込みます。
session_commit	;	session_write_close()  のエイリアス	;		;	
simplexml_load_file	;	XMLファイルをパースし、オブジェクトに代入する	;	SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false ]]]] )	;	指定したファイルの中の整形式 XML ドキュメントをオブジェクトに変換します。
simplexml_load_string	;	XML 文字列をオブジェクトに代入する	;	SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns [, bool $is_prefix = false ]]]] )	;	整形式 XML 文字列をオブジェクトとして返します。
simplexml_import_dom	;	DOM ノードから SimpleXMLElement オブジェクトを取得する	;	SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] )	;	この関数は、DOM ドキュメントのノードを引数とし、 SimpleXML ノードを作成します。この新しいオブジェクトは、 この後、通常の SimpleXML 要素として使用できます。
use_soap_error_handler	;	SOAP エラーハンドラを使用するかどうかを設定する	;	bool use_soap_error_handler ([ bool $handler = true ] )	;	この関数は、SOAP サーバーで SOAP エラーハンドラを使用するかどうかを設定します。 それまでに設定されていた値を返します。 TRUE に設定すると、 SoapServer アプリケーションでのエラーの詳細が SOAP フォールトメッセージとしてクライアントに送信されます。 FALSE の場合は PHP の標準エラーハンドラを使います。 デフォルトは、PHP の標準エラーハンドラを使います。
is_soap_fault	;	SOAP コールが失敗したかどうかを調べる	;	bool is_soap_fault ( mixed $object )	;	この関数は、SOAP コールが失敗したかどうかを調べたいが、例外を使用したくない 場合に有用です。 この関数を使用するには、オプション exceptions に ゼロまたは FALSE を指定して SoapClient オブジェクトを作成する必要があります。 この場合、SOAP メソッドは、特別な SoapFault オブジェクトを返します。 このオブジェクトには、フォルトの詳細 (faultcode, faultstring, faultactor および faultdetails) が含まれています。
sqlite_open	;	SQLiteデータベースをオープンする。データベースが存在しない場合は作    成する	;	SQLiteDatabase::__construct() ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	;	SQLite データベースをオープン、 もしくは存在しない場合データベースを生成します。
sqlite_popen	;	SQLiteデータベースへの持続的ハンドルをオープンする。存在しない場合    には、データベースを作成する	;	resource sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	;	
sqlite_close	;	オープンされたSQLiteデータベースを閉じる	;	void sqlite_close ( resource $dbhandle )	;	指定したデータベースハンドル db_handle を閉じます。 このデータベースに持続性がある場合、このデータベースは閉じられ、 持続的データベースリストから削除されます。
sqlite_query	;	指定したデータベースに対してクエリを実行し、結果ハンドル   を返す	;	SQLiteResult SQLiteDatabase::query ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )	;	指定したデータベースにより query で指定した SQL ステートメントを実行します。
sqlite_exec	;	与えられたデータベースに対して結果を伴わないクエリを実行する	;	bool SQLiteDatabase::queryExec ( string $query [, string &$error_msg ] )	;	与えられたデータベースハンドル (dbhandle パラメータで指定される) に対して query によって指定される SQL ステートメントを実行します。
sqlite_array_query	;	指定したデータベースに対してクエリを実行し、配列を返す	;	array SQLiteDatabase::arrayQuery ( string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	sqlite_array_query() は与えられたクエリを実行し、 結果セット全体を配列で返します。これは、結果セットの各レコードに関して sqlite_query() に続いて sqlite_fetch_array() をコールすることに似ています。 sqlite_array_query() は前述の方法よりも著しく高速です。
sqlite_single_query	;	クエリを実行し、単一カラムもしくは先頭レコードの値に対する配列を返す	;	array SQLiteDatabase::singleQuery ( string $query [, bool $first_row_only [, bool $decode_binary ]] )	;	オブジェクト指向型 (メソッド):
sqlite_fetch_array	;	結果セットから次のレコードを配列として取得する	;	array SQLiteUnbuffered::fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	指定した結果ハンドル result から次のレコードを取得 します。レコードがもうない場合は FALSEを返し、それ以外は レコードデータを含む連想配列を返します。
sqlite_fetch_object	;	結果セットから次のレコードをオブジェクトとして取得する	;	object SQLiteUnbuffered::fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = true ]]] )	;	オブジェクト指向型 (メソッド):
sqlite_fetch_single	;	結果セットの最初のカラムを文字列として取得する	;	string SQLiteUnbuffered::fetchSingle ([ bool $decode_binary = true ] )	;	sqlite_fetch_single() は、 レコードセットの最初のカラムの値を返すことを除いて sqlite_fetch_array() と等価です。
sqlite_fetch_string	;	sqlite_fetch_single()  のエイリアス	;		;	
sqlite_fetch_all	;	結果セットから全てのレコードを配列の配列として取得する	;	array SQLiteUnbuffered::fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	sqlite_fetch_all() は結果リソース result から全結果セットの配列を返します。 これは sqlite_query() (もしくは sqlite_unbuffered_query() ) の後に結果セットの各レコードに対して sqlite_fetch_array() を行うことと等価です。
sqlite_current	;	結果セットからカレントのレコードを配列として取得する	;	array SQLiteUnbuffered::current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	sqlite_current() は sqlite_fetch_array() と同じですが、 データを返す前に次のレコードに移動せず、カレントの位置からのみデー タを返すという違いがあります。
sqlite_column	;	カレントの結果セットのレコードからカラムを1列取得する	;	mixed SQLiteUnbuffered::column ( mixed $index_or_name [, bool $decode_binary = true ] )	;	クエリ結果ハンドルresult の現在のレコードから index_or_name (文字列の場合) というカラム名、 または、カラム番号 index_or_name (整数の場合) の値を取得します。
sqlite_libversion	;	リンクされているSQLiteライブラリのバージョンを返す	;	string sqlite_libversion ( void )	;	リンクされているSQLiteライブラリのバージョンを文字列として返します。
sqlite_libencoding	;	リンクされているSQLiteライブラリのエンコーディングを返す	;	string sqlite_libencoding ( void )	;	SQLiteライブラリは、ISO-8859-1またはUTF-8 互換モードのどちらかでコンパイルすることができます。この関数により、 使用するライブラリのエンコーディングを特定することが可能です。
sqlite_changes	;	直近のSQLステートメントにより変更されたレコード数を返す	;	int SQLiteDatabase::changes ( void )	;	データベースハンドル dbhandle に対して実行された 直近のSQLステートメントによって変更されたレコード数を返します。
sqlite_last_insert_rowid	;	直近に挿入されたレコードのrowidを返す	;	int SQLiteDatabase::lastInsertRowid ( void )	;	データベースdbhandleに直近に挿入されたレコードの rowid を返します。ただし、この rowid が auto-increment フィールドとして作成されている場合に限ります。
sqlite_num_rows	;	結果セットのレコード数を返す	;	int SQLiteResult::numRows ( void )	;	バッファされた結果セット result のレコード数を返します。
sqlite_num_fields	;	結果セットのフィールド数を返す	;	int SQLiteUnbuffered::numFields ( void )	;	結果セット result のフィールド数を返します。
sqlite_field_name	;	特定のフィールドの名前を返す	;	string SQLiteUnbuffered::fieldName ( int $field_index )	;	Given the ordinal column number, field_index, sqlite_field_name() returns the name of that field in the result set result.
sqlite_seek	;	特定のレコード番号へシークする	;	bool SQLiteResult::seek ( int $rownum )	;	sqlite_seek() は、パラメータ rownumで指定したレコードにシークします。
sqlite_rewind	;	先頭レコード番号へシークする	;	bool SQLiteResult::rewind ( void )	;	sqlite_rewind() は、 結果セットの先頭レコードへシークします。
sqlite_next	;	次のレコード番号へシークする	;	bool SQLiteUnbuffered::next ( void )	;	sqlite_next() は、結果ハンドル resultを次のレコードへ進めます。
sqlite_prev	;	結果セットの前のレコード番号へシークする	;	bool SQLiteResult::prev ( void )	;	sqlite_prev() は、結果ハンドル result を前のレコードに戻します。
sqlite_valid	;	まだレコードが残っているかどうかを返す	;	bool SQLiteUnbuffered::valid ( void )	;	与えられた結果ハンドルにまだレコードが残っているかを検査します。
sqlite_has_more	;	まだレコードがあるかないかを返す	;	bool sqlite_has_more ( resource $result )	;	与えられた結果セット中にまだレコードがあるかどうかを見つけます。
sqlite_has_prev	;	前のレコードがあるかどうかを返す	;	bool SQLiteResult::hasPrev ( void )	;	与えられた結果ハンドルに前のレコードがあるかどうかを検査します。
sqlite_escape_string	;	クエリパラメータ用に文字列をエスケープする	;	string sqlite_escape_string ( string $item )	;	sqlite_escape_string() は、 item で指定した文字列を SQLite SQLステートメントで使用できるように正しくクオートします。 この際、シングルクオート(')は2重にされ、 クエリ文字列のバイナリセーフでない文字がチェックされます。
sqlite_busy_timeout	;	ビジータイムアウト時間を設定またはビジーハンドラを無効にする	;	void SQLiteDatabase::busyTimeout ( int $milliseconds )	;	SQLite データベース databaseが利用可能となるまでの 最大の待ち時間を milliseconds に設定します。
sqlite_last_error	;	データベースに関する直近のエラーコードを返す	;	int SQLiteDatabase::lastError ( void )	;	dbhandle (データベースハンドル)、 上で実行された直近の処理のエラーコード、 あるいはエラーが発生しなかった場合に 0 を返します。人が読み取れるエラーコードの詳細は、 sqlite_error_string() で取得可能です。
sqlite_error_string	;	エラーコードの説明を返す	;	string sqlite_error_string ( int $error_code )	;	sqlite_last_error() から返される error_codeの可読性が高い説明を返します。
sqlite_unbuffered_query	;	事前取得していないクエリを実行し、全てのデータをバッファリングする	;	SQLiteUnbuffered SQLiteDatabase::unbufferedQuery ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )	;	sqlite_unbuffered_query() は sqlite_query() と同じですが、 連続的に前方のみにアクセス可能な結果セットが返され、 各レコードを１件ずつ読み込むことだけしかできないところが異なります。
sqlite_create_aggregate	;	SQLステートメントで使用する集約UDFを登録する	;	void SQLiteDatabase::createAggregate ( string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1 ] )	;	sqlite_create_aggregate() は、 sqlite_create_function() に似ていますが、 クエリの全レコードを通じて集約された結果を計算するために使用される 関数を登録するところが異なります。
sqlite_create_function	;	SQLステートメントで使用するために"通常の"ユーザー定義関数を登録する	;	void SQLiteDatabase::createFunction ( string $function_name, callable $callback [, int $num_args = -1 ] )	;	sqlite_create_function() により、SQLiteにPHP関数 をUDF (ユーザー定義関数)として登録することが可能で す。この関数は、SQLステートメントの中からコールできます。
sqlite_factory	;	SQLite データベースをオープンし、SQLiteDatabse オブジェクトを返す	;	SQLiteDatabase sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	;	sqlite_factory() は sqlite_open() と同様に SQLite データベースをオープン、もしくはデータベースが存在しない場合は生成しようと試みます。しかしながら、リソースの代わりに SQLiteDatabase オブジェクトが返されます。詳細な使用法と注意事項については、 sqlite_open() を参照ください。
sqlite_udf_encode_binary	;	UDFから返す前にバイナリデータをエンコードする	;	string sqlite_udf_encode_binary ( string $data )	;	sqlite_udf_encode_binary() は (元のlibsqlite APIはバイナリ対応ではないため)、 クエリから安全に値を返せるようにdata にバイ ナリエンコーディングを適用します。
sqlite_udf_decode_binary	;	UDFにパラメータとして渡されたバイナリデータをデコードする	;	string sqlite_udf_decode_binary ( string $data )	;	パラメータで渡されたバイナリデータを UDF にデコードします。
sqlite_fetch_column_types	;	特定のテーブルからカラム型の配列を返す	;	array SQLiteDatabase::fetchColumnTypes ( string $table_name [, int $result_type = SQLITE_ASSOC ] )	;	sqlite_fetch_column_types() は、 指定されたテーブル table_name からカラムのデータ型の配列を返します。
constant	;	定数の値を返す	;	mixed constant ( string $name )	;	
bin2hex	;	2進表現のデータを16進表現に変換する	;	string bin2hex ( string $str )	;	str を16進表現に変換したASCII文字列を返します。 変換は、上位ニブルからバイト毎に行われます。
sleep	;	実行を遅延させる	;	int sleep ( int $seconds )	;	
usleep	;	マイクロ秒単位で実行を遅延する	;	void usleep ( int $micro_seconds )	;	指定したマイクロ秒数だけプログラムの実行を遅延させます。
time_nanosleep	;	秒およびナノ秒単位で実行を遅延する	;	mixed time_nanosleep ( int $seconds, int $nanoseconds )	;	指定した seconds および nanoseconds の時間だけプログラムの実行を遅延させます。
time_sleep_until	;	指定した時刻まで実行を遅延する	;	bool time_sleep_until ( float $timestamp )	;	指定した timestamp までスクリプトの実行を遅延させます。
strptime	;	strftime()  が生成した日付/時刻をパースする	;	array strptime ( string $date, string $format )	;	strptime() は date をパースした結果を配列で返します。エラー時には FALSE を返します。
flush	;	出力バッファをフラッシュする	;	void flush ( void )	;	PHP および PHP が使っている (CGI, Web サーバーなどの) バックエンドの書き込みバッファをフラッシュします。 それまでのすべての出力をユーザーのブラウザに対して出力しようと試みますが、 注意すべき点があります。
wordwrap	;	指定した文字数で文字列を分割する	;	string wordwrap ( string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = false ]]] )	;	指定した文字数で、指定した文字を用いて文字列を分割します。
htmlspecialchars	;	特殊文字を HTML エンティティに変換する	;	string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )	;	文字の中には HTML において特殊な意味を持つものがあり、 それらの本来の値を表示したければ HTML の表現形式に変換してやらなければなりません。 この関数は、これらの変換を行った結果の文字列を返します。 入力文字列の中で名前付きエンティティに関連づけられたものを すべて変換する必要がある場合には、代わりに htmlentities() を使用してください。
htmlentities	;	適用可能な文字を全て HTML エンティティに変換する	;	string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )	;	この関数は htmlspecialchars() と同じですが、 HTML エンティティと等価な意味を有する文字をHTMLエンティティに変換します。
html_entity_decode	;	HTML エンティティを適切な文字に変換する	;	string html_entity_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]] )	;	html_entity_decode() は htmlentities() の反対で、string にあるすべての HTML エンティティを適切な文字に変換します。
htmlspecialchars_decode	;	特殊な HTML エンティティを文字に戻す	;	string htmlspecialchars_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ] )	;	この関数は htmlspecialchars() の反対です。 特殊な HTML エンティティを文字に戻します。
get_html_translation_table	;	htmlspecialchars()  および  htmlentities()  で使用される変換テーブルを返す	;	array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]]] )	;	get_html_translation_table() は、 htmlspecialchars() および htmlentities() において内部的に使用される変換テーブルを返します。
sha1	;	文字列の sha1 ハッシュを計算する	;	string sha1 ( string $str [, bool $raw_output = false ] )	;	
sha1_file	;	ファイルの sha1 ハッシュを計算する	;	string sha1_file ( string $filename [, bool $raw_output = false ] )	;	
md5	;	文字列のmd5ハッシュ値を計算する	;	string md5 ( string $str [, bool $raw_output = false ] )	;	&raquo;&nbsp;RSA Data Security, Inc. の MD5メッセージダイジェストアルゴリズム を用いて str の MD5 ハッシュ値を計算し、 そのハッシュを返します。
md5_file	;	指定したファイルのMD5ハッシュ値を計算する	;	string md5_file ( string $filename [, bool $raw_output = false ] )	;	&raquo;&nbsp;RSA Data Security, Inc. MD5 メッセージダイジェストアルゴリズムを用いて filenameパラメータで指定したファイルの MD5ハッシュを計算し、そのハッシュを返します。 ハッシュは、32 文字の 16 進数です。
crc32	;	文字列の crc32 多項式計算を行う	;	int crc32 ( string $str )	;	str の 32 ビット長の CRC (cyclic redundancy checksum) チェックサムを生成します。 これは通常、送信したデータの整合性を検証するために使用します。
iptcparse	;	バイナリの IPTC ブロックのタグをパースする	;	array iptcparse ( string $iptcblock )	;	&raquo;&nbsp;IPTC ブロックをパースします。
iptcembed	;	バイナリ IPTC データを JPEG イメージに埋めこむ	;	mixed iptcembed ( string $iptcdata, string $jpeg_file_name [, int $spool ] )	;	バイナリ IPTC データを JPEG イメージに埋めこみます。
getimagesize	;	画像の大きさを取得する	;	array getimagesize ( string $filename [, array &$imageinfo ] )	;	getimagesize() 関数は任意の画像ファイルの大きさを決定し、 ファイルの型と高さ/幅を表す文字列を返します。これらは HTML の IMG タグや HTTP の content type として使用できます。
image_type_to_mime_type	;	getimagesize, exif_read_data, exif_thumbnail, exif_imagetypeから返される    画像形式のMIMEタイプを取得する	;	string image_type_to_mime_type ( int $imagetype )	;	image_type_to_mime_type() は IMAGETYPE 定数で指定される Mime-Type を取得します。
image_type_to_extension	;	画像形式からファイルの拡張子を取得する	;	string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )	;	指定した定数 IMAGETYPE_XXX に対応する拡張子を返します。
phpinfo	;	PHP の設定情報を出力する	;	bool phpinfo ([ int $what = INFO_ALL ] )	;	現在の PHP の状態に関する、多くの情報を出力します。出力される情報には、 PHP コンパイルオプションと拡張機能、PHP のバージョン、 サーバー情報と環境（モジュールとしてコンパイルされた場合）、 PHP の環境、OS バージョン情報、パス、構成オプションのマスター およびローカルの値、HTTP ヘッダ、PHP License などがあります。
phpversion	;	現在の PHP バージョンを取得する	;	string phpversion ([ string $extension ] )	;	現在動作中の PHP パーサあるいは拡張モジュールのバージョンを表す文字列を返します。
phpcredits	;	PHP に関するクレジットを出力する	;	bool phpcredits ([ int $flag = CREDITS_ALL ] )	;	この関数は、PHP 開発者、モジュール等のリストを有するクレジットを出力します。 ページに情報を挿入するために、適切な HTML コードが生成されます。
php_logo_guid	;	ロゴの guid を取得する	;	string php_logo_guid ( void )	;	ビルトインされている画像を使って PHP ロゴを表示する際に使用できる ID を返します。 ロゴが表示されるのは、expose_php が On の場合のみです。
php_real_logo_guid	;		;		;	
php_egg_logo_guid	;		;		;	
zend_logo_guid	;	Zend guid を取得する	;	string zend_logo_guid ( void )	;	この関数は、ビルトインされている画像を使って Zend ロゴを表示する際に使用できる ID を返します。
php_sapi_name	;	ウェブサーバーと PHP の間のインターフェイスの型を返す	;	string php_sapi_name ( void )	;	
php_uname	;	PHP が稼動しているオペレーティングシステムに関する情報を返す	;	string php_uname ([ string $mode = "a" ] )	;	php_uname() は、PHP が稼動しているオペレーティング システムに関する説明を返します。これは、 phpinfo() の出力の先頭に出てくるものと同じです。 単に OS の名前を取得したい場合には PHP_OS 定数の利用を考えてください。ただし、 この定数が返すのは PHP が構築された OS の 情報であることに注意しましょう。
php_ini_scanned_files	;	追加の ini ディレクトリにある .ini ファイルのリストを取得する	;	string php_ini_scanned_files ( void )	;	php_ini_scanned_files() は、php.iniをパースした 後で、設定ファイルのリストをカンマ区切りで返します。 これらのファイルは、PHPのコンパイル時に --with-config-file-scan-dir オプションを使って指定されたディレクトリから取得されます。
php_ini_loaded_file	;	読み込まれた php.ini ファイルのパスを取得する	;	string php_ini_loaded_file ( void )	;	php.ini ファイルが読み込まれているかどうかを調べ、 そのパスを取得します。
strnatcmp	;	"自然順"アルゴリズムにより文字列比較を行う	;	int strnatcmp ( string $str1, string $str2 )	;	この関数は、人間が行うような手法でアルファベットまたは数字の 文字列の順序を比較するアルゴリズムを実装します。この手法は、"自然順" と言われます。 この比較は、大文字小文字を区別することに注意してください。
strnatcasecmp	;	"自然順"アルゴリズムにより大文字小文字を区別しない文字列比較を行う	;	int strnatcasecmp ( string $str1, string $str2 )	;	この関数は、人間が行うような手法でアルファベットまたは数字の 文字列の順序を比較するアルゴリズムを実装します。この関数の動作は、 strnatcmp() に似ていますが、 比較が大文字小文字を区別しない違いがあります。 詳細な情報については、Martin Pool の &raquo;&nbsp;自然順文字列比較 のページを参照ください。
substr_count	;	副文字列の出現回数を数える	;	int substr_count ( string $haystack, string $needle [, int $offset = 0 [, int $length ]] )	;	substr_count() は、文字列 haystack の中での副文字列 needle の出現回数を返します。 needle は英大小文字を区別することに注意してください。
strspn	;	指定したマスク内に含まれる文字からなる文字列の最初のセグメントの長さを探す	;	int strspn ( string $subject, string $mask [, int $start [, int $length ]] )	;	subject の中で、 mask 内の文字だけを含む最初の部分の長さを返します。
strcspn	;	マスクにマッチしない最初のセグメントの長さを返す	;	int strcspn ( string $str1, string $str2 [, int $start [, int $length ]] )	;	str1 において str2 の文字がどれも含まれていない最初のセグメントの長さを返します。
strtok	;	文字列をトークンに分割する	;	string strtok ( string $token )	;	strtok() は文字列 (str) を 何らかの文字 token によって区切られている小さな文字列 (トークン) に分割します。 "This is an example string" のような文字列がある場合、 空白文字をトークンとするとこの文字列を個々の単語に分割することができます。
strtoupper	;	文字列を大文字にする	;	string strtoupper ( string $string )	;	string のアルファベット部分をすべて大文字にして返します｡
strtolower	;	文字列を小文字にする	;	string strtolower ( string $str )	;	string のアルファベット部分をすべて小文字にして返します｡
strpos	;	文字列内の部分文字列が最初に現れる場所を見つける	;	int strpos ( string $haystack, mixed $needle [, int $offset = 0 ] )	;	文字列 haystack の中で、 needle が最初に現れる位置を探します。
stripos	;	大文字小文字を区別せずに文字列が最初に現れる位置を探す	;	int stripos ( string $haystack, string $needle [, int $offset = 0 ] )	;	文字列 haystack の中で needle が最初に現れる位置を探します。
strrpos	;	文字列中に、ある部分文字列が最後に現れる場所を探す	;	int strrpos ( string $haystack, string $needle [, int $offset = 0 ] )	;	文字列 haystack の中で、 needle が最後に現れる位置を探します。
strripos	;	文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れた位置を探す	;	int strripos ( string $haystack, string $needle [, int $offset = 0 ] )	;	文字列 haystack の中で、 needle が最後に現れる位置を探します。
strrev	;	文字列を逆順にする	;	string strrev ( string $string )	;	string を逆順にして返します。
hebrev	;	論理表記のヘブライ語を物理表記に変換する	;	string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )	;	論理表記のヘブライ語を物理表記に変換します。
hebrevc	;	論理表記のヘブライ語を、改行の変換も含めて物理表記に変換する	;	string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )	;	この関数は、 hebrev() に似ていますが、 改行 (\n) を "<br>\n" に変換するところが異なります。
nl2br	;	改行文字の前に HTML の改行タグを挿入する	;	string nl2br ( string $string [, bool $is_xhtml = true ] )	;	string に含まれるすべての改行文字 (\r\n、 \n\r、\n および \r) の前に '<br />' あるいは '<br>' を挿入して返します。
basename	;	パスの最後にある名前の部分を返す	;	string basename ( string $path [, string $suffix ] )	;	ファイルあるいはディレクトリへのパスを含む文字列を受け取って、 最後にある名前の部分を返します。
dirname	;	親ディレクトリのパスを返す	;	string dirname ( string $path )	;	ファイルあるいはディレクトリへのパスを含む文字列を受け取って、 親ディレクトリのパスを返します。
pathinfo	;	ファイルパスに関する情報を返す	;	mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )	;	pathinfo() は、path に関する情報を返します。options によって連想配列あるいは文字列のどちらかとなります。
stripslashes	;	クォートされた文字列のクォート部分を取り除く	;	string stripslashes ( string $str )	;	クォートされた文字列を元に戻します。
stripcslashes	;	addcslashes()  でクォートされた文字列をアンクォートする	;	string stripcslashes ( string $str )	;	バックスラッシュを取り除いた文字列を返します。C言語と同様に \n, \r ..., 8進表現, 16進表現を認識します。
strstr	;	文字列が最初に現れる位置を見つける	;	string strstr ( string $haystack, mixed $needle [, bool $before_needle = false ] )	;	haystack の中で needle が最初に現れる場所を含めてそこから文字列の終わりまでを返します。
stristr	;	大文字小文字を区別しない  strstr()	;	string stristr ( string $haystack, mixed $needle [, bool $before_needle = false ] )	;	haystack において needle が最初に見つかった位置を含めてそこから最後までを返します。
strrchr	;	文字列中に文字が最後に現れる場所を取得する	;	string strrchr ( string $haystack, mixed $needle )	;	この関数は、文字列 haystack の中で needle が最後に現れた位置から、 haystack の終わりまでを返します。
str_shuffle	;	文字列をランダムにシャッフルする	;	string str_shuffle ( string $str )	;	
str_word_count	;	文字列に使用されている単語についての情報を返す	;	mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )	;	string の単語数を数えます。 オプションの format が指定されていない場合、 見つかった単語の数を整数値で返します。 format が指定されている場合は結果が配列で返され、 配列の内容は format に依存します。 format に設定できる値と対応する出力については 以下で示します。
str_split	;	文字列を配列に変換する	;	array str_split ( string $string [, int $split_length = 1 ] )	;	文字列を配列に変換します。
strpbrk	;	文字列の中から任意の文字を探す	;	string strpbrk ( string $haystack, string $char_list )	;	strpbrk() は、文字列 haystack から char_list を探します。
substr_compare	;	指定した位置から指定した長さの 2 つの文字列について、バイナリ対応で比較する	;	int substr_compare ( string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = false ]] )	;	substr_compare() は、main_str の offset 文字目以降の最大 length 文字を、str と比較します。
strcoll	;	ロケールに基づく文字列比較	;	int strcoll ( string $str1, string $str2 )	;	この比較は大文字小文字を区別すること、そして、 strcmp() とは異なり、 バイナリセーフではないことに注意してください。
money_format	;	数値を金額文字列にフォーマットする	;	string money_format ( string $format, float $number )	;	money_format() は、number をフォーマットして返します。この関数は C のライブラリ関数 strfmon() をラップしたものですが、一度に 変換できる数値がひとつだけであるという点が異なります。
substr	;	文字列の一部分を返す	;	string substr ( string $string, int $start [, int $length ] )	;	文字列 string の、start で指定された位置から length バイト分の文字列を返します。
substr_replace	;	文字列の一部を置換する	;	mixed substr_replace ( mixed $string, mixed $replacement, mixed $start [, mixed $length ] )	;	substr_replace() は、文字列 stringの start および (オプションの) length パラメータで区切られた部分を replacement で指定した文字列に置換します。
quotemeta	;	メタ文字をクォートする	;	string quotemeta ( string $str )	;	文字列 str について、 . \ + * ? [ ^ ] ( $ ) の前にバックスラッシュ文字 (\) でクォートして返します。
ucfirst	;	文字列の最初の文字を大文字にする	;	string ucfirst ( string $str )	;	str の最初の文字がアルファベットであれば、 それを大文字にします。
lcfirst	;	文字列の最初の文字を小文字にする	;	string lcfirst ( string $str )	;	str の最初の文字がアルファベットであれば、 それを小文字にします。
ucwords	;	文字列の各単語の最初の文字を大文字にする	;	string ucwords ( string $str )	;	文字がアルファベットの場合、str の各単語の最初の文字を大文字にしたものを返します。
strtr	;	文字の変換あるいは部分文字列の置換を行う	;	string strtr ( string $str, array $replace_pairs )	;	引数を三つ渡した場合、この関数は str のコピーを返します。その際に、文字列中に from の各文字 (シングルバイト) があれば to の対応する文字に変換します。つまり、すべての $from[$n] が $to[$n] に置換されることになります。ここで $n は、どちらの引数でも共通に有効なオフセットです。
addslashes	;	文字列をスラッシュでクォートする	;	string addslashes ( string $str )	;	データベースへの問い合わせなどに際してクォートされるべき文字の前に バックスラッシュを挿入した文字列を返します。 クォートされるべき文字とは、シングルクォート('), ダブルクォート("),バックスラッシュ (\) ,NUL (NULL バイト) です。
addcslashes	;	C 言語と同様にスラッシュで文字列をクォートする	;	string addcslashes ( string $str, string $charlist )	;	charlist パラメータに羅列された文字の前にバックスラッシュを付けた文字列を返します。
rtrim	;	文字列の最後から空白 (もしくはその他の文字) を取り除く	;	string rtrim ( string $str [, string $charlist ] )	;	この関数は文字列 str の最後から空白文字を取り除き、 取り除かれた文字列を返します。
str_replace	;	検索文字列に一致したすべての文字列を置換する	;	mixed str_replace ( mixed $search, mixed $replace, mixed $subject [, int &$count ] )	;	この関数は、subject の中の search を全て replace に置換します。
str_ireplace	;	大文字小文字を区別しない  str_replace()	;	mixed str_ireplace ( mixed $search, mixed $replace, mixed $subject [, int &$count ] )	;	この関数は、subject の中に現れるすべての search(大文字小文字を区別しない)を replace に置き換えた文字列あるいは配列を返します。 一般に、凝った置換ルールが必要ないのであれば、 preg_replace() で i 修正子を使用するかわりにこの関数を使用すべきです。
str_repeat	;	文字列を反復する	;	string str_repeat ( string $input, int $multiplier )	;	input を multiplier 回を繰り返した文字列を返します。
count_chars	;	文字列で使用されている文字に関する情報を返す	;	mixed count_chars ( string $string [, int $mode = 0 ] )	;	string において各バイト値 (0..255) が存在する数をかぞえ、様々な手法で返します。
chunk_split	;	文字列をより小さな部分に分割する	;	string chunk_split ( string $body [, int $chunklen = 76 [, string $end = "\r\n" ]] )	;	文字列をより小さな部分に分割する際に使用され、 base64_encode() の出力を RFC 2045の規約に基づいた出力に変換するといった用途に適しています。 この関数は、chunklen 文字毎に文字列 end を挿入します。
trim	;	文字列の先頭および末尾にあるホワイトスペースを取り除く	;	string trim ( string $str [, string $charlist ] )	;	この関数は str の最初および最後から空白文字を取り除き、 取り除かれた文字列を返します。2番目のパラメータを指定しない場合、 trim() は以下の文字を削除します。 " " (ASCII 32 (0x20)), 通常の空白。 "\t" (ASCII 9 (0x09)), タブ。 "\n" (ASCII 10 (0x0A)), リターン。 "\r" (ASCII 13 (0x0D)), 改行。 "\0" (ASCII 0 (0x00)), NULバイト "\x0B" (ASCII 11 (0x0B)), 垂直タブ
ltrim	;	文字列の最初から空白 (もしくはその他の文字) を取り除く	;	string ltrim ( string $str [, string $charlist ] )	;	文字列の最初から空白 (もしくはその他の文字) を取り除きます。
strip_tags	;	文字列から HTML および PHP タグを取り除く	;	string strip_tags ( string $str [, string $allowable_tags ] )	;	この関数は、指定した文字列 (str) から全ての NUL バイトと HTML および PHP タグを取り除きます。 この関数は、 fgetss() 関数と同じタグ除去アルゴリズムを使用します。
similar_text	;	二つの文字列の間の類似性を計算する	;	int similar_text ( string $first, string $second [, float &$percent ] )	;	この関数は、Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1) に記述されたように二つの文字列の間の類似性を計算します。 この実装は Oliver の擬似コードの様にスタックを使用せず、 プロセス全体の速度が改善されるかどうかにかかわらず再帰呼び出しを行うことに注意してください。 このアルゴリズムの複雑さは、O(N**3) であることにも注意してください。 ただし、N は最も長い文字列の長さです。
explode	;	文字列を文字列により分割する	;	array explode ( string $delimiter, string $string [, int $limit ] )	;	文字列の配列を返します。この配列の各要素は、 string を文字列 delimiter で区切った部分文字列となります。
implode	;	配列要素を文字列により連結する	;	string implode ( array $pieces )	;	配列の要素を glue 文字列で連結します。
join	;	implode()  のエイリアス	;		;	
setlocale	;	ロケール情報を設定する	;	string setlocale ( int $category, array $locale )	;	ロケール情報を設定します。
localeconv	;	数値に関するフォーマット情報を得る	;	array localeconv ( void )	;	ローカルな数値および通貨フォーマット情報を有する連想配列を返します。
nl_langinfo	;	言語およびロケール情報を検索する	;	string nl_langinfo ( int $item )	;	nl_langinfo() はロケールカテゴリの独立した要素にアクセスするために使用されます。 localeconv() と異なり、全ての要素を返します。 nl_langinfo() はいかなる特定要素も取得可能です。
soundex	;	文字列の soundex キーを計算する	;	string soundex ( string $str )	;	str の soundex キーを計算します。
levenshtein	;	二つの文字列のレーベンシュタイン距離を計算する	;	int levenshtein ( string $str1, string $str2, int $cost_ins, int $cost_rep, int $cost_del )	;	レーベンシュタイン距離は、str1 を str2 に変換するために置換、挿入、削除 しなければならない最小の文字数として定義されます。アルゴリズムの複雑さは、 O(m*n) です。 ここで、n および m はそれぞれ str1 および str2 の長さです (O(max(n,m)**3) となる similar_text() よりは良いですが、 まだかなりの計算量です)。
chr	;	特定の文字を返す	;	string chr ( int $ascii )	;	asciiで指定された、1文字からなる文字列を返します。
ord	;	文字の ASCII 値を返す	;	int ord ( string $string )	;	string の先頭文字の ASCII 値を返します。
parse_str	;	文字列を処理し、変数に代入する	;	void parse_str ( string $str [, array &$arr ] )	;	URL 経由で渡されるクエリ文字列と同様に str を処理し、現在のスコープに変数をセットします。
str_getcsv	;	CSV 文字列をパースして配列に格納する	;	array str_getcsv ( string $input [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]] )	;	CSV 形式の文字列入力のフィールドをパースして、 読み込んだフィールドの内容を配列で返します。
str_pad	;	文字列を固定長の他の文字列で埋める	;	string str_pad ( string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT ]] )	;	この関数は文字列 input の左、右または両側を指定した長さで埋めます。オプションの引数 pad_string が指定されていない場合は、 input は空白で埋められ、それ以外の場合は、 pad_string からの文字で制限まで埋められます。
chop	;	rtrim()  のエイリアス	;		;	
strchr	;	strstr()  のエイリアス	;		;	
sprintf	;	フォーマットされた文字列を返す	;	string sprintf ( string $format [, mixed $args [, mixed $... ]] )	;	フォーマット文字列 format に基づき生成された文字列を返します。
printf	;	フォーマット済みの文字列を出力する	;	int printf ( string $format [, mixed $args [, mixed $... ]] )	;	
vprintf	;	フォーマットされた文字列を出力する	;	int vprintf ( string $format, array $args )	;	formatに基づき文字列フォーマットされた文字列を出力します (フォーマットは sprintf() のドキュメントに既述されています)。
vsprintf	;	フォーマットされた文字列を返す	;	string vsprintf ( string $format, array $args )	;	sprintf() と動作は同じですが、 可変長の引数ではなく配列を引数とします。
fprintf	;	フォーマットされた文字列をストリームに書き込む	;	int fprintf ( resource $handle, string $format [, mixed $args [, mixed $... ]] )	;	format によって作成された文字列を handle で指定したストリームに書き込みます。
vfprintf	;	フォーマットされた文字列をストリームに書き込む	;	int vfprintf ( resource $handle, string $format, array $args )	;	format によって作成された文字列を handle で指定したストリームに書き込みます。
sscanf	;	フォーマット文字列に基づき入力を処理する	;	mixed sscanf ( string $str, string $format [, mixed &$... ] )	;	関数 sscanf() は、 printf() の入力版です。 sscanf() は、文字列 str を読み込み、これを指定したフォーマット format に基づき解釈します。 このフォーマットは、 sprintf() のマニュアルに記述されています。
fscanf	;	フォーマットに基づきファイルからの入力を処理する	;	mixed fscanf ( resource $handle, string $format [, mixed &$... ] )	;	関数 fscanf() は sscanf() に似ていますが、handle が指すファイルから入力を取得し、 指定したフォーマット format に基づき解釈を行います。 フォーマットについては sprintf() に解説されています。
parse_url	;	URL を解釈し、その構成要素を返す	;	mixed parse_url ( string $url [, int $component = -1 ] )	;	この関数は、URL の様々な構成要素のうち特定できるものに関して 連想配列にして返します。
urlencode	;	文字列を URL エンコードする	;	string urlencode ( string $str )	;	この関数は、URL の問い合わせ部分に使用する文字列のエンコードや 次のページへ変数を渡す際に便利です。
urldecode	;	URL エンコードされた文字列をデコードする	;	string urldecode ( string $str )	;	与えられた文字列中のあらゆるエンコード文字 %## をデコードします。 プラス記号 ('+') は、スペース文字にデコードします。
rawurlencode	;	RFC 3986 に基づき URL エンコードを行う	;	string rawurlencode ( string $str )	;	指定した文字列を &raquo;&nbsp;RFC 3986 にもとづいてエンコードします。
rawurldecode	;	URL エンコードされた文字列をデコードする	;	string rawurldecode ( string $str )	;	文字列の中にパーセント記号 (%) に続いて 2 つの 16 進数があるような表現形式を、文字定数に置き換えて返します。
http_build_query	;	URL エンコードされたクエリ文字列を生成する	;	string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )	;	与えられた連想配列 (もしくは添字配列) から URL エンコードされたクエリ文字列を生成します。
readlink	;	シンボリックリンク先を返す	;	string readlink ( string $path )	;	readlink() は同名の C 関数と同じ動作をします。
linkinfo	;	リンクに関する情報を取得する	;	int linkinfo ( string $path )	;	リンクに関する情報を取得します。
symlink	;	シンボリックリンクを作成する	;	bool symlink ( string $target, string $link )	;	symlink() は、指定されたリンク名 link で既存のファイル target へのシンボリックリンクを作成します。
link	;	ハードリンクを作成する	;	bool link ( string $target, string $link )	;	link() はハードリンクを作成します。
unlink	;	ファイルを削除する	;	bool unlink ( string $filename [, resource $context ] )	;	filename を削除します。 Unix C 言語の関数 unlink() と動作は同じです。 失敗した場合は E_WARNING レベルのエラーが発生します。
exec	;	外部プログラムを実行する	;	string exec ( string $command [, array &$output [, int &$return_var ]] )	;	exec() は指定されたコマンド command を実行します。
system	;	外部プログラムを実行し、出力を表示する	;	string system ( string $command [, int &$return_var ] )	;	system() は、指定した command を実行し、結果を出力する C 言語の system 関数に似ています。
escapeshellcmd	;	シェルのメタ文字をエスケープする	;	string escapeshellcmd ( string $command )	;	escapeshellcmd() は、文字列中においてシェルコマンドを だまして勝手なコマンドを実行する可能性がある文字をエスケープします。 この関数は、ユーザーに入力されたデータを関数 exec() または system() または、 バックティック演算子 に渡す前に全てエスケープを行う場合に使用するべきです。
escapeshellarg	;	シェル引数として使用される文字列をエスケープする	;	string escapeshellarg ( string $arg )	;	escapeshellarg() は、文字列をシングルクオート で括り、既存のシングルクオートを全てクオート/エスケープします。こ れにより、文字列を直接シェル関数に渡し、単一の安全な引数として処 理することを可能にします。この関数は、ユーザー入力からの入力を シェル関数への引数として渡す際にエスケープするために使用する必要 があります。シェル関数には、 exec() , system() そして バックティック演算子 を含むシェル関数が含まれます。
passthru	;	外部プログラムを実行し、未整形の出力を表示する	;	void passthru ( string $command [, int &$return_var ] )	;	passthru() 関数は exec() 関数と同様、 commandを実行します。 引数 return_var を指定した場合、 Unix コマンドのステータスで置換されます。 この関数は Unix コマンドからの出力がバイナリデータであり、 ブラウザーへ直接返す必要がある場合、 exec() もしくは system() の代わりに使用する必要があります。 よく使うのは、直接画像ストリームを出力することができる pbmplus ユーティリティの様なものを実行する場合です。content-type を image/gif に設定して、gifを出力するpbmplus プログラムを呼び出すことにより、直接画像を出力する PHP スクリプトを作成 することができます。
shell_exec	;	シェルによりコマンドを実行し、文字列として出力全体を返す	;	string shell_exec ( string $cmd )	;	この関数は バックティック演算子 と等価です。
proc_open	;	コマンドを実行し、入出力用にファイルポインタを開く	;	resource proc_open ( string $cmd, array $descriptorspec, array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )	;	proc_open() は popen() と よく似ていますが、プログラムの実行をさらに細かく制御できる点で違います。
proc_close	;	proc_open()  で開かれたプロセスを閉じ、   そのプロセスの終了コードを返す	;	int proc_close ( resource $process )	;	proc_close() は pclose() と似ていますが、 proc_open() で開かれたプロセスに対してのみ機能するという点で異なります。 proc_close() は、プロセスが終了するまで待った後で、 終了コードを返します。もし、そのプロセスに対してパイプが開かれていた場合は、 デッドロックを避けるため、 fclose() 関数で、 この関数を呼び出す前にそれらを閉じておかなくてはなりません - パイプが開いている間、子プロセスは終了できないからです。
proc_terminate	;	proc_open でオープンされたプロセスを強制終了する	;	bool proc_terminate ( resource $process [, int $signal = 15 ] )	;	終了させる ( proc_open() を用いて生成された) process にシグナルを送信します。 proc_terminate() は即座に返され、 プロセスの終了を待ちません。
proc_get_status	;	proc_open()    で開かれたプロセスに関する情報を取得する	;	array proc_get_status ( resource $process )	;	proc_get_status() は、 proc_open() で開かれたプロセスに関する情報を取得します。
proc_nice	;	現在のプロセスの優先度を変更する	;	bool proc_nice ( int $increment )	;	proc_nice() は、現在のプロセスの優先度を increment で指定された値に変更します。 increment が正数の場合、 現在のプロセスの優先度をより低くし、increment が負数の場合は優先度が上がります。
rand	;	乱数を生成する	;	int rand ( int $min, int $max )	;	
srand	;	乱数ジェネレータを初期化する	;	void srand ([ int $seed ] )	;	シード seed で乱数ジェネレータを初期化します。 seed を省略した場合はランダムな値が設定されます。
getrandmax	;	乱数の最大値を取得する	;	int getrandmax ( void )	;	
mt_rand	;	よりよい乱数値を生成する	;	int mt_rand ( int $min, int $max )	;	
mt_srand	;	改良型乱数生成器にシードを指定する	;	void mt_srand ([ int $seed ] )	;	seed により乱数生成器にシードを指定します。 seed を指定しなかった場合は、 ランダムな値を設定します。
mt_getrandmax	;	乱数値の最大値を表示する	;	int mt_getrandmax ( void )	;	
getservbyname	;	インターネットサービスおよびプロトコルが関連するポート番号を取得する	;	int getservbyname ( string $service, string $protocol )	;	getservbyname() は、 /etc/services に基づき 指定したプロトコル protocol に関して service に対応するインターネットポートを返します。
getservbyport	;	ポートおよびプロトコルに対応するインターネットサービスを得る	;	string getservbyport ( int $port, string $protocol )	;	getservbyport() は、 /etc/services に基づき 指定したプロトコル protocol に関してポート port に関連するインターネットサービスを返します。
getprotobyname	;	プロトコル名のプロトコル番号を得る	;	int getprotobyname ( string $name )	;	getprotobyname() は、プロトコル name のプロトコル番号を /etc/protocols から取得して返します。
getprotobynumber	;	プロトコル番号が指すプロトコル名を取得する	;	string getprotobynumber ( int $number )	;	getprotobynumber() は、 /etc/protocols に基づき プロトコル番号 number が指すプロトコル名を返します。
getmyuid	;	PHP スクリプト所有者のユーザー ID を取得する	;	int getmyuid ( void )	;	
getmygid	;	PHP スクリプトの所有者の GID を得る	;	int getmygid ( void )	;	
getmypid	;	PHP のプロセス ID を取得する	;	int getmypid ( void )	;	現在の PHP プロセスの ID を取得します。
getmyinode	;	現在のスクリプトの inode を取得する	;	int getmyinode ( void )	;	現在のスクリプトの inode を取得します。
getlastmod	;	最終更新時刻を取得する	;	int getlastmod ( void )	;	現在のページの最終更新時刻を取得します。
base64_decode	;	MIME base64 方式によりエンコードされたデータをデコードする	;	string base64_decode ( string $data [, bool $strict = false ] )	;	base64 でエンコードされた data をデコードします。
base64_encode	;	MIME base64 方式でデータをエンコードする	;	string base64_encode ( string $data )	;	指定した data を base64 でエンコードします。
convert_uuencode	;	文字列を uuencode する	;	string convert_uuencode ( string $data )	;	convert_uuencode() は、uuencode アルゴリズムを使用して文字列をエンコードします。
convert_uudecode	;	uuencode された文字列をデコードする	;	string convert_uudecode ( string $data )	;	convert_uudecode() は、uuencode された文字列をデコードします。
abs	;	絶対値	;	number abs ( mixed $number )	;	number の絶対値を返します。
ceil	;	端数の切り上げ	;	float ceil ( float $value )	;	
floor	;	端数の切り捨て	;	float floor ( float $value )	;	
round	;	浮動小数点数を丸める	;	float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )	;	val を、指定した precision(小数点以下の桁数)に丸めた値を 返します。precision を負またはゼロ(デフォルト) とすることも可能です。
sin	;	正弦（サイン）	;	float sin ( float $arg )	;	sin() は、arg のサインを 返します。arg はラジアンです。
cos	;	余弦（コサイン）	;	float cos ( float $arg )	;	cos() は、arg のコサインを 返します。arg はラジアンです。
tan	;	正接（タンジェント）	;	float tan ( float $arg )	;	tan() は、arg のタンジェントを 返します。arg はラジアンです。
asin	;	逆正弦（アークサイン）	;	float asin ( float $arg )	;	arg のアークサインをラジアンで返します。 asin() は sin() の逆関数で、 asin() がとりうる範囲内のすべての a について a==sin(asin(a)) が成立します。
acos	;	逆余弦（アークコサイン）	;	float acos ( float $arg )	;	arg のアークコサインをラジアンで返します。 acos() は cos() の逆関数で、 acos() がとりうる範囲内のすべての a について a==cos(acos(a)) が成立します。
atan	;	逆正接（アークタンジェント）	;	float atan ( float $arg )	;	arg のアークタンジェントをラジアンで返します。 atan() is the は tan() の逆関数で、 atan() がとりうる範囲内のすべての a について a==tan(atan(a)) が成立します。
atanh	;	逆双曲線正接（アークハイパボリックタンジェント）	;	float atanh ( float $arg )	;	arg のアークハイパボリックタンジェントを返します。 つまり、ハイパボリックタンジェントが arg となる値です。
atan2	;	2 変数のアークタンジェント	;	float atan2 ( float $y, float $x )	;	
sinh	;	双曲線正弦（ハイパボリックサイン）	;	float sinh ( float $arg )	;	arg のハイパボリックサインを返します。 これは、(exp(arg) - exp(-arg))/2 で定義されます。
cosh	;	双曲線余弦（ハイパボリックコサイン）	;	float cosh ( float $arg )	;	arg のハイパボリックコサインを返します。 これは、(exp(arg) + exp(-arg))/2 で定義されます。
tanh	;	双曲線正接（ハイパボリックタンジェント）	;	float tanh ( float $arg )	;	arg のハイパボリックタンジェントを返します。 これは sinh(arg)/cosh(arg) で定義されます。
asinh	;	逆双曲線正弦（アークハイパボリックサイン）	;	float asinh ( float $arg )	;	arg のアークハイパボリックサインを返します。 つまり、ハイパボリックサインが arg となる値です。
acosh	;	逆双曲線余弦（アークハイパボリックコサイン）	;	float acosh ( float $arg )	;	arg のアークハイパボリックコサインを返します。 つまり、ハイパボリックコサインが arg となる値です。
expm1	;	値がゼロに近い時にでも精度を保つために exp(number) - 1 を返す	;	float expm1 ( float $arg )	;	expm1() は、 'exp(number) - 1' の値を返します。 number がゼロに近く、 'exp (number) - 1' が引き算時の桁落ちのために 不正確となるような場合でも正確な値が計算できる方法を使用します。
log1p	;	値がゼロに近い時にでも精度を保つ方法で計算した log(1 + number) を返す	;	float log1p ( float $number )	;	log1p() は、 log(1 + number) の値を返します。 number がゼロに近い場合でも正確な値が 計算できる方法を使用します。 log() は、このような場合には 精度の問題で log(1) の値を返してしまいます。
pi	;	円周率の値を得る	;	float pi ( void )	;	
is_finite	;	値が有限の数値であるかどうかを判定する	;	bool is_finite ( float $val )	;	val が このプラットフォーム上で有効な有限値であるかどうかを調べます。
is_nan	;	値が数値でないかどうかを判定する	;	bool is_nan ( float $val )	;	val が '非数値 (not a number)' であるかどうかを調べます。たとえば acos(1.01) の結果などがこれにあたります。
is_infinite	;	値が無限大であるかどうかを判定する	;	bool is_infinite ( float $val )	;	val が（正または負の）無限大である場合に TRUE を返します。たとえば log(0) の結果、 あるいはこのプラットフォーム上で扱える float の範囲を超えた数などが あてはまります。
pow	;	指数表現	;	number pow ( number $base, number $exp )	;	base の exp 乗を返します。
exp	;	e の累乗を計算する	;	float exp ( float $arg )	;	e を arg 乗した値を返します。
log	;	自然対数	;	float log ( float $arg [, float $base = M_E ] )	;	オプションの base パラメータを指定した場合は log() は logbase arg を返します。それ以外の場合は log() は arg の自然対数を返します。
log10	;	底が 10 の対数	;	float log10 ( float $arg )	;	底を 10 とする arg の対数を返します。
sqrt	;	平方根	;	float sqrt ( float $arg )	;	arg の平方根を返します。
hypot	;	直角三角形の斜辺の長さを計算する	;	float hypot ( float $x, float $y )	;	hypot() は、直角をはさむ 2 辺の長さが x および y である 直角三角形の斜辺の長さ、すなわち原点と (x, y) との距離を返します。 これは sqrt(x*x + y*y) と等価です。
deg2rad	;	度単位の数値をラジアン単位に変換する	;	float deg2rad ( float $number )	;	この関数は、number の単位を度からラジアンに変換します。
rad2deg	;	ラジアン単位の数値を度単位に変換する	;	float rad2deg ( float $number )	;	この関数は、number の単位をラジアンから度に変換します。
bindec	;	2 進数 を 10 進数に変換する	;	number bindec ( string $binary_string )	;	引数 binary_string により指定された 2 進数と等価な 10 進数を返します。
hexdec	;	16 進数を 10 進数に変換する	;	number hexdec ( string $hex_string )	;	引数 hex_string により指定された 16 進数に 等価な 10 進数を返します。 hexdec() は、16 進数を 表す文字列を 10 進数に変換します。
octdec	;	8 進数を 10 進数に変換する	;	number octdec ( string $octal_string )	;	octal_string により指定された 8 進数を 10 進数表現した数値を返します。
decbin	;	10 進数を 2 進数に変換する	;	string decbin ( int $number )	;	引数 number を 2 進数表現した文字列を返します。
decoct	;	10 進数を 8 進数に変換する	;	string decoct ( int $number )	;	引数 number を 8 進数表現した文字列を返します。 変換出来る最大の数字は 10 進数の 4294967295 であり、"37777777777" を返します。
dechex	;	10 進数を 16 進数に変換する	;	string dechex ( int $number )	;	number で指定した符号なし整数値を 16 進数表現した文字列を返します。
base_convert	;	数値の基数を任意に変換する	;	string base_convert ( string $number, int $frombase, int $tobase )	;	number を基数 tobase で表した文字列を返します。 number の基数は、 frombase で指定します。 frombase および tobase は、ともに 2 から 36 までである必要があります。 10 より大きな基数を有する数の各桁は、文字 a-z で表されます。 この場合、a は 10、b は 11、z は 35 を意味します。
number_format	;	数字を千位毎にグループ化してフォーマットする	;	string number_format ( float $number, int $decimals = 0, string $dec_point = '.' , string $thousands_sep = ',' )	;	この関数は 1 つか 2 つもしくは 4 つのパラメータを受け取ります (3 つはありません) :
fmod	;	引数で除算をした際の剰余を返す	;	float fmod ( float $x, float $y )	;	被除数（x）を除数（y） で割った余りを返します。余り（r）は、 整数 i を使用して x = i * y + r で定義されます。 y がゼロ以外の場合はr は x と同符号で、絶対値は y より小さくなります。
inet_ntop	;	パックされたインターネットアドレスを、人間が読める形式に変換する	;	string inet_ntop ( string $in_addr )	;	
inet_pton	;	人間が読める形式の IP アドレスを、パックされた in_addr 形式に変換する	;	string inet_pton ( string $address )	;	この関数は、人間が読める形式の IPv4 あるいは IPv6 (PHP が IPv6 サポートを有効にしてビルドされている場合) のアドレスを 32 ビットあるいは 128 ビットのバイナリ形式に変換します。
ip2long	;	ドット表記の (IPv4) IP アドレスを、適切なアドレスに変換する	;	int ip2long ( string $ip_address )	;	関数 ip2long() は、インターネット標準形式 (ドット表記の文字列) 表現から IPv4 インターネットネットアドレスを生成します。
long2ip	;	(IPv4) インターネットアドレスをインターネット標準ドット表記に変換する	;	string long2ip ( string $proper_address )	;	関数 long2ip() は、適切なアドレス表現からドット表記 (例:aaa.bbb.ccc.ddd)のインターネットアドレスを生成します。
getenv	;	環境変数の値を取得する	;	string getenv ( string $varname )	;	環境変数の値を取得します。
putenv	;	環境変数の値を設定する	;	bool putenv ( string $setting )	;	サーバーの環境変数に setting を追加します。 この環境変数は、カレントのリクエストを実行している間のみ存在します。 リクエスト終了時、環境変数は元の状態に戻されます。
getopt	;	コマンドライン引数のリストからオプションを取得する	;	array getopt ( string $options [, array $longopts ] )	;	スクリプトに渡されたオプションをパースします。
sys_getloadavg	;	システムの平均負荷を取得する	;	array sys_getloadavg ( void )	;	過去 1、5、15 分間のシステムの平均負荷 (システムの実行キューの中のプロセス数) を表す三つの値を返します。
microtime	;	現在の Unix タイムスタンプをマイクロ秒まで返す	;	mixed microtime ([ bool $get_as_float = false ] )	;	microtime() は、現在の Unix タイムスタンプをマイクロ秒単位で返します。 この関数は、gettimeofday() システムコールをサポートする オペレーティングシステムでのみ使用できます。
gettimeofday	;	現在の時間を得る	;	mixed gettimeofday ([ bool $return_float = false ] )	;	この関数は、gettimeofday(2) へのインターフェイスです。 この関数は、システムコールから返されたデータを有する連想配列を返します。
getrusage	;	現在のリソース使用状況を取得する	;	array getrusage ([ int $who = 0 ] )	;	この関数は、getrusage(2) へのインターフェイスです。 システムコールから返されたデータを含む連想配列を返します。
uniqid	;	一意な ID を生成する	;	string uniqid ([ string $prefix = "" [, bool $more_entropy = false ]] )	;	マイクロ秒単位の現在時刻にもとづいた、接頭辞つきの一意な ID を取得します。
quoted_printable_decode	;	quoted-printable 文字列を 8 ビット文字列に変換する	;	string quoted_printable_decode ( string $str )	;	この関数は、quoted printable 文字列をデコードし、 8 ビットバイナリ文字列を返します (&raquo;&nbsp;RFC2821 の section 4.5.2 ではなく &raquo;&nbsp;RFC2045 の section 6.7 によれば、付随するピリオドは行の開始から削除されません) 。
quoted_printable_encode	;	8 ビット文字列を quoted-printable 文字列に変換する	;	string quoted_printable_encode ( string $str )	;	&raquo;&nbsp;RFC2045 の section 6.7 に従って作成した quoted printable 文字列を返します。
convert_cyr_string	;	キリル文字セットを他のものに変換する	;	string convert_cyr_string ( string $str, string $from, string $to )	;	キリル文字セットを、別の文字セットに変換します。
get_current_user	;	現在の PHP スクリプトの所有者の名前を取得する	;	string get_current_user ( void )	;	
set_time_limit	;	実行時間の最大値を制限する	;	void set_time_limit ( int $seconds )	;	スクリプトが実行可能な秒数を設定します。 この制限にかかるとスクリプトは致命的エラーを返します。 デフォルトの制限値は 30 秒です。 なお、php.iniでmax_execution_timeの 値が定義されている場合にはそれを用います。
get_cfg_var	;	PHP 設定オプションの値を取得する	;	string get_cfg_var ( string $option )	;	PHP の設定オプション option の値を取得します。
magic_quotes_runtime	;	set_magic_quotes_runtime()  のエイリアス	;		;	
set_magic_quotes_runtime	;	magic_quotes_runtime の現在アクティブな設定をセットする	;	bool set_magic_quotes_runtime ( bool $new_setting )	;	magic_quotes_runtime の現在アクティブな設定をセットします。
get_magic_quotes_gpc	;	magic_quotes_gpc の現在の設定を得る	;	bool get_magic_quotes_gpc ( void )	;	magic_quotes_gpc の現在の設定を返します。
get_magic_quotes_runtime	;	magic_quotes_runtime の現在アクティブな設定値を取得する	;	bool get_magic_quotes_runtime ( void )	;	
import_request_variables	;	GET/POST/Cookie 変数をグローバルスコープにインポートする	;	bool import_request_variables ( string $types [, string $prefix ] )	;	GET/POST/Cookie 変数をグローバルスコープにインポートします。 この関数は、register_globals を無効としているが、いくつかの変数をグローバルスコープで参照したいといった場合に有用です。
error_log	;	エラーメッセージを送信する	;	bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )	;	エラーメッセージを Web サーバーのエラーログあるいはファイルに送ります。
error_get_last	;	最後に発生したエラーを取得する	;	array error_get_last ( void )	;	最後に発生したエラーについての情報を取得します。
call_user_func	;	最初の引数で指定したコールバック関数をコールする	;	mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )	;	パラメータ callback で指定したユーザー定義のコールバック関数をコールします。
call_user_func_array	;	パラメータの配列を指定してコールバック関数をコールする	;	mixed call_user_func_array ( callable $callback, array $param_arr )	;	param_arr にパラメータを指定して、 callback で指定したユーザー定義関数をコールします。
call_user_method	;	指定したオブジェクトのユーザーメソッドをコールする [古い関数]	;	mixed call_user_method ( string $method_name, object &$obj [, mixed $parameter [, mixed $... ]] )	;	
call_user_method_array	;	パラメータの配列を指定してユーザーメソッドをコールする [古い関数]	;	mixed call_user_method_array ( string $method_name, object &$obj, array $params )	;	
forward_static_call	;	静的メソッドをコールする	;	mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )	;	function パラメータで指定したユーザー定義の関数あるいはメソッドを、 それに続く引数を指定してコールします。この関数はメソッドのコンテキストでコールしなければなりません。 クラスの外部で使用することはできません。 この関数は 遅延静的束縛 を使います。
forward_static_call_array	;	静的メソッドをコールし、引数を配列で渡す	;	mixed forward_static_call_array ( callable $function, array $parameters )	;	function パラメータで指定したユーザー定義の関数あるいはメソッドをコールします。 この関数はメソッドのコンテキストでコールしなければなりません。 クラスの外部で使用することはできません。 この関数は 遅延静的束縛 を使います。 転送先のメソッドへのすべての引数は値渡しで、 call_user_func_array() と同様に配列で指定します。
serialize	;	値の保存可能な表現を生成する	;	string serialize ( mixed $value )	;	値の保存可能な表現を生成します。
unserialize	;	保存用表現から PHP の値を生成する	;	mixed unserialize ( string $str )	;	
var_dump	;	変数に関する情報をダンプする	;	void var_dump ( mixed $expression [, mixed $... ] )	;	
var_export	;	変数の文字列表現を出力または返す	;	mixed var_export ( mixed $expression [, bool $return = false ] )	;	
debug_zval_dump	;	内部的な Zend の値を表す文字列をダンプする	;	void debug_zval_dump ( mixed $variable )	;	内部的な Zend の値を表す文字列をダンプします。
print_r	;	指定した変数に関する情報を解りやすく出力する	;	mixed print_r ( mixed $expression [, bool $return = false ] )	;	print_r() は、 変数の値に関する情報を解り易い形式で表示します。
memory_get_usage	;	PHP に割り当てられたメモリの量を返す	;	int memory_get_usage ([ bool $real_usage = false ] )	;	現在の PHP スクリプトに割り当てられたメモリの量をバイト単位で返します。
memory_get_peak_usage	;	PHP によって割り当てられたメモリの最大値を返す	;	int memory_get_peak_usage ([ bool $real_usage = false ] )	;	PHP スクリプトに割り当てられたメモリの最大値を、バイト単位で返します。
register_shutdown_function	;	シャットダウン時に実行する関数を登録する	;	void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )	;	スクリプト処理が完了したとき、あるいは exit() がコールされたときに実行するコールバック関数を登録します。
register_tick_function	;	各 tick で実行する関数を登録する	;	bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )	;	
unregister_tick_function	;	各 tick の実行用の関数の登録を解除する	;	void unregister_tick_function ( string $function_name )	;	
highlight_file	;	ファイルの構文ハイライト表示	;	mixed highlight_file ( string $filename [, bool $return = false ] )	;	filename の中のコードを構文ハイライト表示して 出力します。色は、PHP 組込の構文ハイライタで定義されているものを使用します。
show_source	;	highlight_file()  のエイリアス	;		;	
highlight_string	;	文字列の構文ハイライト表示	;	mixed highlight_string ( string $str [, bool $return = false ] )	;	
php_strip_whitespace	;	コメントと空白文字を取り除いたソースを返す	;	string php_strip_whitespace ( string $filename )	;	PHP のソースコード filename からコメントと 空白文字を取り除いたものを返します。これは、スクリプトの中で 実際のコードの量がどれくらいなのかを知るのに役立つでしょう。 これは コマンドライン から php -w を実行するのと同じです。
ini_get	;	設定オプションの値を得る	;	string ini_get ( string $varname )	;	成功時に、設定オプションの値を返します。
ini_get_all	;	すべての設定オプションを得る	;	array ini_get_all ([ string $extension [, bool $details = true ]] )	;	すべての登録済み設定オプションを返します。
ini_set	;	設定オプションの値を設定する	;	string ini_set ( string $varname, string $newvalue )	;	指定した設定オプションの値を設定します。 設定オプションは、スクリプトの実行中は新しい値を保持し、 スクリプト終了時に元の値へ戻されます。
ini_alter	;	ini_set()  のエイリアス	;		;	
ini_restore	;	設定オプションの値を元に戻す	;	void ini_restore ( string $varname )	;	指定した設定オプションを元の値に戻します。
get_include_path	;	現在の include_path 設定オプションを取得する	;	string get_include_path ( void )	;	
set_include_path	;	include_path 設定オプションをセットする	;	string set_include_path ( string $new_include_path )	;	include_path 設定オプションの値を、このスクリプト内でだけ変更します。
restore_include_path	;	include_path 設定オプションの値を元に戻す	;	void restore_include_path ( void )	;	
setcookie	;	クッキーを送信する	;	bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )	;	setcookie() は、その他のヘッダ情報と共に 送信するクッキーを定義します。 ほかのヘッダ情報と同様に、 クッキーは、スクリプトによる他のあらゆる出力よりも前に 送信される必要があります（これはHTTPプロトコルの制約です）。 <html> や <head> タグはもちろん 空白も含め、あらゆる出力よりも前にこの関数をコールするようにしなければなりません。
setrawcookie	;	値を URL エンコードせずにクッキーを送信する	;	bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )	;	setrawcookie() は、 ブラウザに送信される際クッキーの値が自動的に URL エンコードされないことを除き、 setcookie() と等価です。
header	;	生の HTTP ヘッダを送信する	;	void header ( string $string [, bool $replace = true [, int $http_response_code ]] )	;	header() は、生の HTTP ヘッダを送信するために使用されます。 HTTP ヘッダについての詳細な情報は &raquo;&nbsp;HTTP/1.1 仕様 を参照ください。
header_remove	;	以前に設定したHTTPヘッダを削除する	;	void header_remove ([ string $name ] )	;	header() 関数を使って以前に設定したHTTPヘッダを削除します。
headers_sent	;	ヘッダが既に送信されているかどうかを調べる	;	bool headers_sent ([ string &$file [, int &$line ]] )	;	ヘッダがすでに送信されているかどうかを調べます。
headers_list	;	送信した (もしくは送信される予定の) レスポンスヘッダの一覧を返す	;	array headers_list ( void )	;	headers_list() はブラウザもしくはクライアントに送信されるヘッダの数値配列を返します。 これらのヘッダが送信されたかどうかを判断するためには headers_sent() を使用します。
connection_aborted	;	クライアントとの接続が切断されているかどうかを調べる	;	int connection_aborted ( void )	;	クライアントとの接続が切断されているかどうかを調べます。
connection_status	;	接続ステータスのビットフィールドを返す	;	int connection_status ( void )	;	接続ステータスのビットフィールドを取得します。
ignore_user_abort	;	クライアントの接続が切断された際にスクリプトの実行を終了するかどうかを設定する	;	int ignore_user_abort ([ string $value ] )	;	クライアントの接続が切断された際にスクリプトの実行を終了するかどうかを設定します。
parse_ini_file	;	設定ファイルをパースする	;	array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )	;	parse_ini_file() は、 filename で指定した ini ファイルをロードし、 連想配列としてその設定値を返します。
parse_ini_string	;	設定文字列をパースする	;	array parse_ini_string ( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )	;	parse_ini_string() は、文字列 ini の設定を連想配列で返します。
is_uploaded_file	;	HTTP POST でアップロードされたファイルかどうかを調べる	;	bool is_uploaded_file ( string $filename )	;	filename という名前のファイルが HTTP POST によりアップロードされたものである場合に TRUE を返します。 悪意のあるユーザーがスクリプトをだまして、 本来見られてはいけないはずのファイル (/etc/passwd など) にアクセスすることを防止したい場合に、この関数は有用です。
move_uploaded_file	;	アップロードされたファイルを新しい位置に移動する	;	bool move_uploaded_file ( string $filename, string $destination )	;	この関数は、filename で指定されたファイルが (PHP の HTTP POST アップロード機構によりアップロードされたという意味で) 有効なアップロードファイルであるかどうかを確認します。 そのファイルが有効な場合、destination で指定したファイル名に移動されます。
gethostbyaddr	;	指定した IP アドレスに対応するインターネットホスト名を取得する	;	string gethostbyaddr ( string $ip_address )	;	ip_address で指定したインターネットホストのホスト名を返します。
gethostbyname	;	インターネットホスト名に対応するIPv4アドレスを取得する	;	string gethostbyname ( string $hostname )	;	hostname で指定したインターネットホストの IPv4 アドレスを返します。
gethostbynamel	;	指定したインターネットホスト名に対応するIPv4アドレスのリストを取得する	;	array gethostbynamel ( string $hostname )	;	hostname で指定したインターネットホストを検索して得られた IPv4 アドレスのリストを返します。
gethostname	;	ホスト名を取得する	;	string gethostname ( void )	;	gethostname() 関数は、ローカルのマシンに設定されている標準的なホスト名を取得します。
dns_check_record	;	checkdnsrr()  のエイリアス	;		;	
checkdnsrr	;	指定したインターネットホスト名もしくは IP アドレスに対応する DNS レコードを検索する	;	bool checkdnsrr ( string $host [, string $type = "MX" ] )	;	host に対応する type 型のレコードを DNS から探します。
dns_get_mx	;	getmxrr()  のエイリアス	;		;	
getmxrr	;	指定したインターネットホスト名に対応する MX レコードを取得する	;	bool getmxrr ( string $hostname, array &$mxhosts [, array &$weight ] )	;	hostname に対応する MX レコードを DNS から探します。
dns_get_record	;	ホスト名に関連する DNS リソースレコードを取得する	;	array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl ]]] )	;	指定した hostname に関連づけられた DNS リソースレコードを取得します。
intval	;	変数の整数としての値を取得する	;	int intval ( mixed $var [, int $base = 10 ] )	;	指定された値 base を基数（デフォルトは 10）とする、 var の integer としての値を返します。 オブジェクトに intval() を使用することはできません。 その場合は E_NOTICE レベルのエラーを発して 1 を返します。
floatval	;	変数の float 値を取得する	;	float floatval ( mixed $var )	;	var の float 値を返します。
doubleval	;	floatval()  のエイリアス	;		;	
strval	;	変数の文字列としての値を取得する	;	string strval ( mixed $var )	;	
gettype	;	変数の型を取得する	;	string gettype ( mixed $var )	;	PHP 変数 var の型を返します。 型のチェックには、この関数ではなく is_* 関数を使います。
settype	;	変数の型をセットする	;	bool settype ( mixed &$var, string $type )	;	変数 var の型を type にセットします。
is_null	;	変数が NULL かどうか調べる	;	bool is_null ( mixed $var )	;	指定した変数が NULL かどうかを調べます。
is_resource	;	変数がリソースかどうかを調べる	;	bool is_resource ( mixed $var )	;	指定した変数がリソースかどうかを調べます。
is_bool	;	変数が boolean であるかを調べる	;	bool is_bool ( mixed $var )	;	指定した変数が boolean であるかどうかを調べます。
is_long	;	is_int()  のエイリアス	;		;	
is_float	;	変数の型が float かどうか調べる	;	bool is_float ( mixed $var )	;	与えられた変数の型が float かどうかを調べます。
is_int	;	変数が整数型かどうかを検査する	;	bool is_int ( mixed $var )	;	与えられた変数の型が整数型かどうかを検査します。
is_integer	;	is_int()  のエイリアス	;		;	
is_double	;	is_float()  のエイリアス	;		;	
is_real	;	is_float()  のエイリアス	;		;	
is_numeric	;	変数が数字または数値形式の文字列であるかを調べる	;	bool is_numeric ( mixed $var )	;	指定した変数が数値であるかどうかを調べます。数値形式の文字列は以下の要素から なります。（オプションの）符号、任意の数の数字、（オプションの）小数部、 そして（オプションの）指数部。つまり、+0123.45e6 は数値として有効な値です。16 進表記（0xFF）も 認められますが、この場合は符号や小数部、指数部を含めることはできません。
is_string	;	変数の型が文字列かどうかを調べる	;	bool is_string ( mixed $var )	;	指定した変数の型が文字列かどうかを調べます。
is_array	;	変数が配列かどうかを検査する	;	bool is_array ( mixed $var )	;	与えられた変数が配列かどうかを検査します。
is_object	;	変数がオブジェクトかどうかを検査する	;	bool is_object ( mixed $var )	;	与えられた変数がオブジェクトかどうかを調べます。
is_scalar	;	変数がスカラかどうかを調べる	;	bool is_scalar ( mixed $var )	;	指定した変数がスカラかどうかを調べます。
is_callable	;	引数が、関数としてコール可能な構造であるかどうかを調べる	;	bool is_callable ( callable $name [, bool $syntax_only = false [, string &$callable_name ]] )	;	引数の内容が、関数としてコール可能かどうかを調べます。 変数が有効な関数名かどうかを調べたり、配列の中に適切に エンコードされたオブジェクトと関数名が格納されているかどうかを 調べたりすることが可能です。
pclose	;	プロセスのファイルポインタをクローズする	;	int pclose ( resource $handle )	;	popen() でオープンしたパイプへの ファイルポインタをクローズします。
popen	;	プロセスへのファイルポインタをオープンする	;	resource popen ( string $command, string $mode )	;	command で指定したコマンドのフォークによってできたプロセスへのパイプをオープンします。
readfile	;	ファイルを出力する	;	int readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] )	;	ファイルを読んで標準出力に書き出します。
rewind	;	ファイルポインタの位置を先頭に戻す	;	bool rewind ( resource $handle )	;	handle のファイル位置指示子を、 ファイルストリームの先頭にセットします。
rmdir	;	ディレクトリを削除する	;	bool rmdir ( string $dirname [, resource $context ] )	;	dirnameで指定されたディレクトリを 削除しようと試みます。ディレクトリは空でなくてはならず、また 適切なパーミッションが設定されていなければなりません。 失敗した場合は E_WARNING レベルのエラーが発生します。
umask	;	現在の umask を変更する	;	int umask ([ int $mask ] )	;	umask() は PHP の umask を mask & 0777 にセットし、 元の umask 値を返します。 PHP がサーバー・モジュールとして動作中の場合、 各リクエストが終了するたびに umask は元の値に戻されます。
fclose	;	オープンされたファイルポインタをクローズする	;	bool fclose ( resource $handle )	;	handleが指しているファイルをクローズします。
feof	;	ファイルポインタがファイル終端に達しているかどうか調べる	;	bool feof ( resource $handle )	;	ファイルポインタがファイル終端に達しているかどうかを調べます。
fgetc	;	ファイルポインタから1文字取り出す	;	string fgetc ( resource $handle )	;	指定したファイルポインタから 1 文字読み出します。
fgets	;	ファイルポインタから 1 行取得する	;	string fgets ( resource $handle [, int $length ] )	;	ファイルポインタから 1 行取得します。
fgetss	;	ファイルポインタから 1 行取り出し、HTML タグを取り除く	;	string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )	;	fgets() と同じですが、 fgetss() は読み込んだテキストから NUL バイト や HTML および PHP のタグを取り除こうとすることが異なります。
fread	;	バイナリセーフなファイルの読み込み	;	string fread ( resource $handle, int $length )	;	fread() は、handle が指すファイルポインタから最高 length バイト読み込みます。 以下のいずれかの条件を満たしたら、読み込みを終了します。 length バイトぶん読み込んだ EOF (ファイルの終端) に達した パケットが利用可能になるか、あるいは ソケットのタイムアウト が発生した (ネットワークストリームの場合) バッファつきで読み込まれた、プレーンなファイルでないストリームの場合に、 一回の読み込みバイト数がチャンクサイズ (通常は 8192) に達した。 それまでにバッファされていたデータの内容によって、返されるデータのサイズはチャンクサイズより大きくなることがあります。
fopen	;	ファイルまたは URL をオープンする	;	resource fopen ( string $filename, string $mode [, bool $use_include_path = false [, resource $context ]] )	;	fopen() は、filename で指定されたリソースをストリームに結び付けます。
fpassthru	;	ファイルポインタ上に残っているすべてのデータを出力する	;	int fpassthru ( resource $handle )	;	与えられたファイルポインタを EOF まで読み、結果を出力バッファに書き出します。
ftruncate	;	ファイルを指定した長さに丸める	;	bool ftruncate ( resource $handle, int $size )	;	ファイルポインタhandleを引数とし、 ファイルを指定した長さ、サイズに丸めます。
fstat	;	オープンしたファイルポインタからファイルに関する情報を取得する	;	array fstat ( resource $handle )	;	ファイルポインタhandleによりオープンされたファイルの統計情報を取得します。 この関数は関数 stat() に似ていますが、 ファイル名の代わりにオープンされたファイルポインタを指定するところが異なります。
fseek	;	ファイルポインタを移動する	;	int fseek ( resource $handle, int $offset [, int $whence = SEEK_SET ] )	;	handle が指しているファイルのファイル位置識別子を ファイル・ストリーム中の offset バイト目に セットします。新規位置は、ファイルの先頭からのバイト数で 測られます。これは whence で指定した位置に offset を追加することにより得られます。
ftell	;	ファイルの読み書き用ポインタの現在位置を返す	;	int ftell ( resource $handle )	;	handle ファイルの読み書き用ポインタの現在位置を返します。
fflush	;	出力をファイルにフラッシュする	;	bool fflush ( resource $handle )	;	この関数は、バッファリングされた全ての出力をファイルファイルハンドル handle が指すリソースに強制的に書き込みます。
fwrite	;	バイナリセーフなファイル書き込み処理	;	int fwrite ( resource $handle, string $string [, int $length ] )	;	
fputs	;	fwrite()  のエイリアス	;		;	
mkdir	;	ディレクトリを作る	;	bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )	;	指定したディレクトリを作成します。
rename	;	ファイルをリネームする	;	bool rename ( string $oldname, string $newname [, resource $context ] )	;	oldname を newname にリネームし、必要ならディレクトリを移動しようと試みます。 newname が存在する場合は、上書きします。
copy	;	ファイルをコピーする	;	bool copy ( string $source, string $dest [, resource $context ] )	;	ファイル source を dest にコピーします。
tempnam	;	一意なファイル名を生成する	;	string tempnam ( string $dir, string $prefix )	;	一意なテンポラリファイル名を、パーミッションを 0600 に設定し、 指定したディレクトリに作成します。 指定したディレクトリが存在しない場合、 tempnam() はシステムのテンポラリディレクトリにあるファイル名を生成し、 その名前を返します。
tmpfile	;	テンポラリファイルを作成する	;	resource tmpfile ( void )	;	書き込み可のモード (w+) でユニークな名前を有するテンポラリファイルを作成し、 ファイルハンドルを返します。
file	;	ファイル全体を読み込んで配列に格納する	;	array file ( string $filename [, int $flags = 0 [, resource $context ]] )	;	ファイル全体を配列に読み込みます。
file_get_contents	;	ファイルの内容を全て文字列に読み込む	;	string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] )	;	この関数は file() と似ていますが、 offset で指定した場所から開始し maxlen バイト分だけ ファイルの内容を文字列に読み込むという点が異なります。 失敗した場合、 file_get_contents() は FALSE を返します。
file_put_contents	;	文字列をファイルに書き込む	;	int file_put_contents ( string $filename, mixed $data [, int $flags = 0 [, resource $context ]] )	;	この関数は、 fopen() 、 fwrite() 、 fclose() を続けてコールしてデータをファイルに書き込むのと等価です。
stream_select	;	select() システムコールと同等の操作を、    ストリームの配列に対して tv_sec と tv_usec で指定されたタイムアウト時間をもって行う	;	int stream_select ( array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0 ] )	;	stream_select() はストリームの配列を受け取ると、 それらの状態が変化するまで待ちます。機能としては、ストリームに対して 働くという点以外では socket_select() と同一です。
stream_context_create	;	ストリームコンテキストを作成する	;	resource stream_context_create ([ array $options [, array $params ]] )	;	options に、 指定されたオプションが予め設定されたストリームコンテキストを作成し、 それを返します。
stream_context_set_params	;	ストリーム / ラッパー / コンテキストのパラメータを設定する	;	bool stream_context_set_params ( resource $stream_or_context, array $params )	;	指定したコンテキストのパラメータを設定します。
stream_context_get_params	;	コンテキストのパラメータを取得する	;	array stream_context_get_params ( resource $stream_or_context )	;	パラメータおよびオプションの情報を、ストリームあるいはコンテキストから取得します。
stream_context_set_option	;	ストリーム / ラッパー / コンテキストのオプションを設定する	;	bool stream_context_set_option ( resource $stream_or_context, array $options )	;	
stream_context_get_options	;	ストリーム / ラッパー / コンテキストに設定されているオプションを取得する	;	array stream_context_get_options ( resource $stream_or_context )	;	
stream_context_get_default	;	デフォルトのストリームコンテキストを取得する	;	resource stream_context_get_default ([ array $options ] )	;	
stream_context_set_default	;	デフォルトのストリームコンテキストを設定する	;	resource stream_context_set_default ( array $options )	;	
stream_filter_prepend	;	フィルタをストリームに付加する	;	resource stream_filter_prepend ( resource $stream, string $filtername [, int $read_write [, mixed $params ]] )	;	filtername で指定されたフィルタを、 stream に付加されているフィルタのリストに加えます。
stream_filter_append	;	ストリームにフィルタを付加する	;	resource stream_filter_append ( resource $stream, string $filtername [, int $read_write [, mixed $params ]] )	;	filtername で指定されたフィルタを、 stream に付加されているフィルタのリストに加えます。
stream_filter_remove	;	ストリームからフィルタを取り除く	;	bool stream_filter_remove ( resource $stream_filter )	;	事前に stream_filter_prepend() あるいは stream_filter_append() でストリームに追加した フィルタを削除します。フィルタの内部バッファに残っているデータは 削除前にフラッシュされ、次のフィルタに渡されます。
stream_socket_client	;	インターネットドメインまたは Unix ドメインのソケット接続を開く	;	resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )	;	remote_socket で指定された接続先との、 ストリームまたはデータグラム接続を確立します。 作成されるソケットのタイプは、[トランスポート]://[ターゲット] という形式の URL フォーマットによって指定された トランスポートによって決定されます。 TCP や UDP といったインターネットドメインのソケット (AF_INET) には、remote_socket パラメータの ターゲット の部分は、ホスト名または IP アドレスと、 それに続くコロンで区切られたポート番号から構成されていなければなりません。 Unix ドメインのソケットの場合は、ターゲット の部分は、ファイルシステムにおけるソケットのファイルを指定しなくては いけません。
stream_socket_server	;	インターネットドメインまたは Unix ドメインのサーバーソケットを作成する	;	resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )	;	local_socket で指定された接続ポイントに、 ストリームまたはデータグラムソケットによる接続を作成します。
stream_socket_accept	;	stream_socket_server()  で作られたソケットの接続を受け入れる	;	resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] )	;	以前に stream_socket_server() によって作られたソケットの接続を受け入れます。
stream_socket_get_name	;	ローカルまたはリモートのソケットの名前を取得する	;	string stream_socket_get_name ( resource $handle, bool $want_peer )	;	指定したソケット接続のローカルまたはリモートでの名前を返します。
stream_socket_recvfrom	;	接続されているかどうかにかかわらず、ソケットからのデータを受信する	;	string stream_socket_recvfrom ( resource $socket, int $length [, int $flags = 0 [, string &$address ]] )	;	stream_socket_recvfrom() は、 リモートソケットから最大 length バイトのデータを 受け取ります。
stream_socket_sendto	;	接続されているかどうかにかかわらず、ソケットにデータを送信する	;	int stream_socket_sendto ( resource $socket, string $data [, int $flags = 0 [, string $address ]] )	;	data で指定したデータを socket で指定したソケットに送信します。
stream_socket_enable_crypto	;	接続済みのソケットについて暗号化の on/off を切り替える	;	mixed stream_socket_enable_crypto ( resource $stream, bool $enable [, int $crypto_type [, resource $session_stream ]] )	;	
stream_socket_shutdown	;	全二重接続を終了する	;	bool stream_socket_shutdown ( resource $stream, int $how )	;	全二重接続を (一時的あるいはそうでなく) 終了します。
stream_socket_pair	;	接続された、区別できないソケットストリームの組を作成する	;	array stream_socket_pair ( int $domain, int $type, int $protocol )	;	stream_socket_pair() は、互いに接続されており区別できない ソケットストリームの組を作成します。この関数は、一般に IPC （Inter-Process Communication: プロセス間通信）で使用します。
stream_copy_to_stream	;	データをあるストリームから別のストリームにコピーする	;	int stream_copy_to_stream ( resource $source, resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )	;	現在の位置（あるいはもし指定されていれば offset の位置）から最大 maxlength バイトのデータを source から dest にコピーします。もし maxlength が指定されていない 場合は、source にある残りすべてのデータが コピーされます。
stream_get_contents	;	残りのストリームを文字列に読み込む	;	string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )	;	file_get_contents() と似ていますが、 stream_get_contents() は既にオープンしている ストリームリソースに対して操作を行います。そして、指定した offset から始まる最大 maxlength バイトのデータを取得して文字列に 保存します。
stream_supports_lock	;	ストリームがロックをサポートしているかどうかを調べる	;	bool stream_supports_lock ( resource $stream )	;	flock() によるロックをそのストリームがサポートしているかどうかを調べます。
fgetcsv	;	ファイルポインタから行を取得し、CSVフィールドを処理する	;	array fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]]] )	;	fgets() に動作は似ていますが、 fgetcsv() は行を CSV フォーマットのフィールドとして読込み処理を行い、 読み込んだフィールドを含む配列を返すという違いがあります。
fputcsv	;	行を CSV 形式にフォーマットし、ファイルポインタに書き込む	;	int fputcsv ( resource $handle, array $fields [, string $delimiter = ',' [, string $enclosure = '"' ]] )	;	fputcsv() は、行（fields 配列として渡されたもの）を CSV としてフォーマットし、それを handle で指定したファイルに書き込みます (いちばん最後に改行を追加します)。
flock	;	汎用のファイルロックを行う	;	bool flock ( resource $handle, int $operation [, int &$wouldblock ] )	;	flock() を使うと、(ほとんどの Unix、そして Windows さえ含む) 事実上すべてのプラットフォームで使用可能な、簡易な読み手/書き手モデルを実現できます。
get_meta_tags	;	ファイル上のすべてのメタタグ情報を配列に展開する	;	array get_meta_tags ( string $filename [, bool $use_include_path = false ] )	;	filename 内の各行をパースし <meta> タグ内の情報を配列として返します。 </head> でパースを終了します。
stream_set_read_buffer	;	指定したストリームのファイル読み込みバッファリングを有効にする	;	int stream_set_read_buffer ( resource $stream, int $buffer )	;	読み込みバッファを設定します。 stream_set_write_buffer() と似ていますが、読み込み操作を対象としています。
stream_set_write_buffer	;	指定されたストリームのファイル書き込みバッファリングを有効にする	;	int stream_set_write_buffer ( resource $stream, int $buffer )	;	stream で指定されたファイルポインタに buffer で表されたバイト数分だけ出力バッファを設定します。
set_file_buffer	;	stream_set_write_buffer()  のエイリアス	;		;	
set_socket_blocking	;	stream_set_blocking()  のエイリアス	;		;	
stream_set_blocking	;	ストリームのブロックモードを有効にする / 解除する	;	bool stream_set_blocking ( resource $stream, int $mode )	;	stream のモードをブロックあるいは非ブロックに設定します。
socket_set_blocking	;	stream_set_blocking()  のエイリアス	;		;	
stream_get_meta_data	;	ヘッダーあるいはメタデータをストリームまたはファイルポインタから取得する	;	array stream_get_meta_data ( resource $stream )	;	既存の stream に関する情報を返します。
stream_get_line	;	指定されたデリミタの位置までのデータを一行分としてストリームから読み込む	;	string stream_get_line ( resource $handle, int $length [, string $ending ] )	;	指定したハンドルから一行取得します。
stream_wrapper_register	;	PHP のクラスとして実装された URL ラッパーを登録する	;	bool stream_wrapper_register ( string $protocol, string $classname [, int $flags = 0 ] )	;	自分で作ったプロトコルハンドラとストリームを実装し、それを fopen() や fread() といったファイルシステムの関数と利用することを可能にします。
stream_register_wrapper	;	stream_wrapper_register()  のエイリアス	;		;	
stream_wrapper_unregister	;	URL ラッパーの登録を解除する	;	bool stream_wrapper_unregister ( string $protocol )	;	すでに定義されているストリームラッパーを無効にします。ラッパーが無効になった後は、 stream_wrapper_register() を使用してユーザー定義の ラッパーで上書きしたり stream_wrapper_restore() で再度使用可能にしたりすることが可能となります。
stream_wrapper_restore	;	事前に登録を解除された組み込みラッパーを復元する	;	bool stream_wrapper_restore ( string $protocol )	;	stream_wrapper_unregister() で事前に登録を解除した 組み込みラッパーを復元します。
stream_get_wrappers	;	登録されているストリームのラッパーのリストを取得する	;	array stream_get_wrappers ( void )	;	実行中のシステムで使用可能な、登録済みのストリームの一覧を取得します。
stream_get_transports	;	登録されたソケットのトランスポートの一覧を取得する	;	array stream_get_transports ( void )	;	
stream_resolve_include_path	;	インクルードパスに対してファイル名を解決する	;	string stream_resolve_include_path ( string $filename )	;	インクルードパスに対して filename を解決します。 fopen() / include と同じルールに従います。
stream_is_local	;	ローカルストリームかどうかを調べる	;	bool stream_is_local ( mixed $stream_or_url )	;	ストリームあるいは URL が、ローカルのものであるかどうかを調べます。
get_headers	;	HTTP リクエストに対するレスポンス内で    サーバーによって送出された全てのヘッダを取得する	;	array get_headers ( string $url [, int $format = 0 ] )	;	get_headers() は、HTTP リクエストに対するレスポンス内で サーバーによって送出されたヘッダの配列を返します。
stream_set_timeout	;	ストリームにタイムアウトを設定する	;	bool stream_set_timeout ( resource $stream, int $seconds [, int $microseconds = 0 ] )	;	stream にタイムアウトの値を設定します。 この値は、seconds と microseconds の和で表されます。
socket_set_timeout	;	stream_set_timeout()  のエイリアス	;		;	
socket_get_status	;	stream_get_meta_data()  のエイリアス	;		;	
realpath	;	絶対パス名を返す	;	string realpath ( string $path )	;	realpath() は、 入力 path のシンボリックリンクをすべて展開し、 「/./」「/../」「/」などの参照をすべて解決することにより、正規化した絶対パスを返します。
fnmatch	;	ファイル名がパターンにマッチするか調べる	;	bool fnmatch ( string $pattern, string $string [, int $flags = 0 ] )	;	fnmatch() はstring で指定された文字列が pattern で指定されたシェルワイルドカードにマッチするかどうかチェックします。
fsockopen	;	インターネット接続もしくは Unix ドメインソケット接続をオープンする	;	resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )	;	hostname で指定したリソースへのソケット接続を開始します。
pfsockopen	;	持続的な Internet または Unix ドメインソケット接続をオープンする	;	resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )	;	この関数は、 fsockopen() と全く同様に動作します。 ただし、この関数による接続はリクエストが終了した後でも閉じられないという違いがあります。 この関数は、 fsockopen() の持続的接続版です。
pack	;	データをバイナリ文字列にパックする	;	string pack ( string $format [, mixed $args [, mixed $... ]] )	;	指定された引数を format に基づいて バイナリ文字列にパックします。
unpack	;	バイナリ文字列からデータを切り出す	;	array unpack ( string $format, string $data )	;	format に基づき、バイナリ文字列から配列に分解します。
get_browser	;	ユーザーのブラウザの機能を取得する	;	mixed get_browser ([ string $user_agent [, bool $return_array = false ]] )	;	ユーザーのブラウザの機能を調べます。これは、browscap.ini ファイルのブラウザ情報を調べることにより行います。
crypt	;	文字列の一方向のハッシュ化を行う	;	string crypt ( string $str [, string $salt ] )	;	crypt() 文字列のハッシュを返します。 Unix 標準の DES ベースのアルゴリズムか、 あるいはシステム上で使えるその他のアルゴリズムを使用します。
opendir	;	ディレクトリハンドルをオープンする	;	resource opendir ( string $path [, resource $context ] )	;	ディレクトリハンドルをオープンします。このハンドルは、この後 closedir() , readdir() , rewinddir() 関数コールで使用されます。
closedir	;	ディレクトリハンドルをクローズする	;	void closedir ([ resource $dir_handle ] )	;	dir_handle で指定したディレクトリのストリームをクローズします。このストリームは、 opendir() により事前にオープンされていなければ なりません。
chdir	;	ディレクトリを変更する	;	bool chdir ( string $directory )	;	PHP のカレントディレクトリを directory に変更します。
getcwd	;	カレントのワーキングディレクトリを取得する	;	string getcwd ( void )	;	カレントのワーキングディレクトリを返します。
rewinddir	;	ディレクトリハンドルを元に戻す	;	void rewinddir ([ resource $dir_handle ] )	;	dir_handle で指定されたディレクトリの ストリームをディレクトリの先頭にリセットします。
readdir	;	ディレクトリハンドルからエントリを読み込む	;	string readdir ([ resource $dir_handle ] )	;	ディレクトリから次のエントリの名前を返します。 エントリ名はファイルシステム上に格納されている順番で返されます。
dir	;	ディレクトリクラスのインスタンスを返す	;	Directory dir ( string $directory [, resource $context ] )	;	ディレクトリを読むための疑似オブジェクト指向の機構です。 指定した directory がオープンされます。
scandir	;	指定されたパスのファイルとディレクトリのリストを取得する	;	array scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] )	;	directory 内のファイルおよびディレクトリを 配列で返します。
glob	;	パターンにマッチするパス名を探す	;	array glob ( string $pattern [, int $flags = 0 ] )	;	glob() 関数は libc の glob() 関数で使われるルールに基づいて pattern にマッチする全てのパス名を検索します。 ルールは、一般のシェルで使われるルールと似ています。
fileatime	;	ファイルの最終アクセス時刻を取得する	;	int fileatime ( string $filename )	;	
filectime	;	ファイルの inode 変更時刻を取得する	;	int filectime ( string $filename )	;	ファイルの inode 変更時刻を取得します。
filegroup	;	ファイルのグループを取得する	;	int filegroup ( string $filename )	;	ファイルのグループを取得します。返り値は、数値形式のグループ ID です。 グループ名を取得するには posix_getgrgid() を使用します。
fileinode	;	ファイルの inode を取得する	;	int fileinode ( string $filename )	;	ファイルの inode を取得します。
filemtime	;	ファイルの更新時刻を取得する	;	int filemtime ( string $filename )	;	この関数は、ファイルのブロックデータが書き込まれた時間を返します。 これは、ファイルの内容が変更された際の時間です。
fileowner	;	ファイルの所有者を取得する	;	int fileowner ( string $filename )	;	ファイルの所有者を取得します。
fileperms	;	ファイルのパーミッションを取得する	;	int fileperms ( string $filename )	;	指定したファイルのパーミッションを取得します。
filesize	;	ファイルのサイズを取得する	;	int filesize ( string $filename )	;	指定したファイルのサイズを取得します。
filetype	;	ファイルタイプを取得する	;	string filetype ( string $filename )	;	指定したファイルのタイプを返します。
file_exists	;	ファイルまたはディレクトリが存在するかどうか調べる	;	bool file_exists ( string $filename )	;	ファイルあるいはディレクトリが存在するかどうかを調べます。
is_writable	;	ファイルが書き込み可能かどうかを調べる	;	bool is_writable ( string $filename )	;	filenameが存在して、かつそれが書き込み可能であれば TRUEを返します。引数filenameはディレクトリ名とすることができ、 ディレクトリが書き込み可能であることを調べることが可能です。
is_writeable	;	is_writable()  のエイリアス	;		;	
is_readable	;	ファイルが存在し、読み込み可能であるかどうかを知る	;	bool is_readable ( string $filename )	;	ファイルが存在し、読み込み可能であるかどうかを調べます。
is_executable	;	ファイルが実行可能かどうかを調べる	;	bool is_executable ( string $filename )	;	ファイルが実行可能かどうかを調べます。
is_file	;	通常ファイルかどうかを調べる	;	bool is_file ( string $filename )	;	指定したファイルが通常のファイルかどうかを調べます。
is_dir	;	ファイルがディレクトリかどうかを調べる	;	bool is_dir ( string $filename )	;	指定したファイルがディレクトリかどうかを調べます。
is_link	;	ファイルがシンボリックリンクかどうかを調べる	;	bool is_link ( string $filename )	;	指定したファイルがシンボリックリンクかどうかを調べます。
stat	;	ファイルに関する情報を取得する	;	array stat ( string $filename )	;	filenameで指定されたファイルに ついての統計情報を取得します。 filename がシンボリックリンクの場合、 シンボリックリンクではなくファイルの実体の統計情報が返されます。
lstat	;	ファイルあるいはシンボリックリンクの情報を取得する	;	array lstat ( string $filename )	;	filename という名前のファイル、 またはシンボリックリンクの情報を得ます。
chown	;	ファイルの所有者を変更する	;	bool chown ( string $filename, mixed $user )	;	ファイルfilenameの所有者を(名前または番号で指定した) ユーザーuserに変更しようと試みます。 スーパーユーザーのみがファイルの所有者を変更できます。
chgrp	;	ファイルのグループを変更する	;	bool chgrp ( string $filename, mixed $group )	;	(名前または番号で指定した)ファイル filename のグループを group に変更しようと試みます。
lchown	;	シンボリックリンクの所有者を変更する	;	bool lchown ( string $filename, mixed $user )	;	シンボリックリンク filename の所有者を user に変更しようと試みます。
lchgrp	;	シンボリックリンクのグループ所有権を変更する	;	bool lchgrp ( string $filename, mixed $group )	;	シンボリックリンク filename のグループを group に変更しようと試みます。
chmod	;	ファイルのモードを変更する	;	bool chmod ( string $filename, int $mode )	;	指定されたファイルのモードを mode で指定したものに変更しようと試みます。
touch	;	ファイルの最終アクセス時刻および最終更新日をセットする	;	bool touch ( string $filename [, int $time = time() [, int $atime ]] )	;	filename で指定されたファイルの最終更新日を、 time で指定された値に セットしようと試みます。 パラメータの数にかかわらず、アクセス時刻は 常に変更されることに注意しましょう。
clearstatcache	;	ファイルのステータスのキャッシュをクリアする	;	void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]] )	;	statやlstat、 またはその他の関数（後述）を使用すると、PHPはパフォーマンス向上のために それらの関数の戻り値をキャッシュします。しかし、ケースによっては、 キャッシュされた情報を消去したい場合もあるでしょう。 例えば、一つのスクリプト上で同じファイルが何度もチェックされ、 そのファイルが変更されたり削除されたりする可能性がある場合、 ステータスキャッシュを消去しなければならないと感じるでしょう。 このようなケースでは、 clearstatcache() を使用することで ファイルの情報に関してPHPが持っているキャッシュをクリアすることができます。
disk_total_space	;	ファイルシステムあるいはディスクパーティションの全体サイズを返す	;	float disk_total_space ( string $directory )	;	ディレクトリを含む文字列を指定してください。この関数は、 ファイルシステムまたはディスクパーティションに対応する全体バイト数を返します。
disk_free_space	;	ファイルシステムあるいはディスクパーティション上で利用可能な領域を返す	;	float disk_free_space ( string $directory )	;	ディレクトリを指定することにより、 この関数は対応するファイルシステムまたはディスクパーティションで 利用可能なバイト数を返します。
diskfreespace	;	disk_free_space()  のエイリアス	;		;	
realpath_cache_size	;	realpath キャッシュサイズを取得	;	int realpath_cache_size ( void )	;	realpath キャッシュで使用されるメモリー量を取得します。
realpath_cache_get	;	realpath キャッシュ・エントリーを取得	;	array realpath_cache_get ( void )	;	realpath キャッシュ内容を取得します。
mail	;	メールを送信する	;	bool mail ( string $to, string $subject, string $message [, string $additional_headers [, string $additional_parameters ]] )	;	メールを送信します。
ezmlm_hash	;	EZMLM で必要なハッシュ値を計算する	;	int ezmlm_hash ( string $addr )	;	
openlog	;	システムのロガーへの接続をオープンする	;	bool openlog ( string $ident, int $option, int $facility )	;	openlog() は、プログラムによるシステムロガーへの接続をオープンします。
syslog	;	システムログのメッセージを生成する	;	bool syslog ( int $priority, string $message )	;	syslog() はシステムログが出力するログメッセージを生成します。
closelog	;	システムログへの接続を閉じる	;	bool closelog ( void )	;	closelog() はシステムログへの書きこみに使用されているデスクプリタを閉じます。 closelog() の使用はオプションです。
define_syslog_variables	;	syslog に関係する全ての定数を初期化する	;	void define_syslog_variables ( void )	;	syslog 関数で使用される全ての定数を初期化します。
lcg_value	;	複合線形合同法	;	float lcg_value ( void )	;	lcg_value() は、(0, 1)の範囲の疑似乱数を返します。 この関数は、周期が 2^31 - 85 および 2^31 - 249 の 2 つの CG を組み合わせます。 この関数の周期はこれら 2 つの素数の積と等価です。
metaphone	;	文字列の metaphone キーを計算する	;	string metaphone ( string $str [, int $phonemes = 0 ] )	;	str の metaphone キーを計算します。
ob_start	;	出力のバッファリングを有効にする	;	bool ob_start ([ callable $output_callback [, int $chunk_size = 0 [, bool $erase = true ]]] )	;	この関数は出力のバッファリングをオンにします。 出力のバッファリングを有効にすると、 (ヘッダ以外の) スクリプトからの出力は実際には行われず、 代わりに内部バッファに保存されます。
ob_flush	;	出力バッファをフラッシュ(送信)する	;	void ob_flush ( void )	;	この関数は、(ある場合に)出力バッファの内容を送信します。 更にバッファの内容を処理したい場合には、 ob_flush() がコールされた後にバッファの内容が破棄されるので、 ob_flush() の前に ob_get_contents() をコールする必要があります。
ob_clean	;	出力バッファをクリア(消去)する	;	void ob_clean ( void )	;	この関数は、出力バッファの内容を消去します。
ob_end_flush	;	出力用バッファをフラッシュ(送信)し、出力のバッファリングをオフにする	;	bool ob_end_flush ( void )	;	この関数は、出力用バッファの内容を出力し、出力のバッファリングをオフにします。 出力用バッファの内容を更に処理したい場合には、 バッファの内容は ob_end_flush() がコールされた後に消去されるため、 ob_end_flush() の前に ob_get_contents() をコールする必要があります。
ob_end_clean	;	出力用バッファをクリア(消去)し、出力のバッファリングをオフにする	;	bool ob_end_clean ( void )	;	出力用バッファの内容を消去し、出力のバッファリングをオフにします。 バッファの内容について更に何らかの処理を行いたい場合には、 バッファの内容は ob_end_clean() がコールされると 破棄されるため、 ob_end_clean() の前に ob_get_contents() をコールしなければなりません。
ob_get_flush	;	出力バッファをフラッシュし、その内容を文字列として返した後で出力バッファリングを終了する	;	string ob_get_flush ( void )	;	ob_get_flush() は、 出力バッファをフラッシュしてその内容を文字列として返した後、 出力バッファリングを終了します。
ob_get_clean	;	現在のバッファの内容を取得し、出力バッファを削除する	;	string ob_get_clean ( void )	;	現在のバッファの中身を取得し、出力バッファを削除します。
ob_get_length	;	出力バッファの長さを返す	;	int ob_get_length ( void )	;	この関数は、出力バッファの内容の長さを返します。
ob_get_level	;	出力バッファリング機構のネストレベルを返す	;	int ob_get_level ( void )	;	出力バッファリングハンドラのネストレベルを返します。
ob_get_status	;	出力バッファのステータスを取得する	;	array ob_get_status ([ bool $full_status = FALSE ] )	;	ob_get_status() は、トップレベルの出力バッファの ステータス情報を返します。full_status が TRUE に設定されている場合は、すべてのアクティブな出力バッファの ステータス情報を返します。
ob_get_contents	;	出力用バッファの内容を返す	;	string ob_get_contents ( void )	;	出力用バッファの内容を取得します。バッファの内容はクリアしません。
ob_implicit_flush	;	自動フラッシュをオンまたはオフにする	;	void ob_implicit_flush ([ int $flag = true ] )	;	ob_implicit_flush() は、 自動フラッシュをオンまたはオフに切替えます。 自動フラッシュにより、出力関数のコールが行われるたびに フラッシュ操作が行われるようになります。このため、 flush() を明示的にコールする必要はなくなります。
ob_list_handlers	;	使用中の出力ハンドラの一覧を取得する	;	array ob_list_handlers ( void )	;	使用中の出力ハンドラの一覧を返します。
ksort	;	配列をキーでソートする	;	bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	キーとデータの関係を維持しつつ、配列をキーでソートします。 この関数は、主として連想配列において有用です。
krsort	;	配列をキーで逆順にソートする	;	bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	配列をキーにより逆順にソートします。キーとデータとの関係は維持されます。 この関数は主に連想配列の場合に有用です。
natsort	;	"自然順"アルゴリズムで配列をソートする	;	bool natsort ( array &$array )	;	この関数は、人間が行うような手法でアルファベットまたは数字の文字列の順番を キー/値の関係を保持したままソートします。 これは、"自然順(natural ordering)"と呼ばれているものです。 このアルゴリズムと ( sort() を用いた) 通常のコンピュータ文字列ソートアルゴリズムの違いを示す例を以下に示します。
natcasesort	;	大文字小文字を区別しない"自然順"アルゴリズムを用いて配列をソートする	;	bool natcasesort ( array &$array )	;	natcasesort() は、大文字小文字を区別しないバージョンの natsort() です。
asort	;	連想キーと要素との関係を維持しつつ配列をソートする	;	bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	この関数は、 連想配列において各配列のキーと要素との関係を維持しつつ配列をソートします。 この関数は、 主に実際の要素の並び方が重要である連想配列をソートするために使われます。
arsort	;	連想キーと要素との関係を維持しつつ配列を逆順にソートする	;	bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	この関数は、連想配列において各配列のキーと要素との関係を維持しつつソートを行います。
sort	;	配列をソートする	;	bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	この関数は配列をソートします。この関数が正常に終了すると、 各要素が小さい順に並び変わった状態になります。
rsort	;	配列を逆順にソートする	;	bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	この関数は、配列を逆順に(高位から低位に)ソートします。
usort	;	ユーザー定義の比較関数を使用して、配列を値でソートする	;	int callback ( mixed $a, mixed $b )	;	この関数は、ユーザー定義の比較関数により配列をその値でソートします。 ソートしたい配列を複雑な基準でソートする必要がある場合、 この関数を使用するべきです。
uasort	;	ユーザー定義の比較関数で配列をソートし、連想インデックスを保持する	;	bool uasort ( array &$array, callable $cmp_function )	;	この関数は、配列インデックスが関連する配列要素との関係を保持するような配列をソートします。
uksort	;	ユーザー定義の比較関数を用いて、キーで配列をソートする	;	int callback ( mixed $a, mixed $b )	;	uksort() は、 ユーザー定義の比較関数を用いて配列のキーをソートします。 ソートしたい配列を複雑な基準でソートする必要がある場合には、 この関数を使う必要があります。
shuffle	;	配列をシャッフルする	;	bool shuffle ( array &$array )	;	この関数は、配列をシャッフル (要素の順番をランダムに) します。
array_walk	;	配列の全ての要素にユーザー関数を適用する	;	bool array_walk ( array &$array, callable $funcname [, mixed $userdata = NULL ] )	;	
array_walk_recursive	;	配列の全ての要素に、ユーザー関数を再帰的に適用する	;	bool array_walk_recursive ( array &$input, callable $funcname [, mixed $userdata = NULL ] )	;	input 配列の各要素にユーザー定義関数 funcnameを適用します。 この関数は配列の要素内を再帰的にたどっていきます。
count	;	変数に含まれるすべての要素、   あるいはオブジェクトに含まれる何かの数を数える	;	int count ( mixed $var [, int $mode = COUNT_NORMAL ] )	;	変数に含まれるすべての要素、 あるいはオブジェクトに含まれる何かの数を数えます。
end	;	配列の内部ポインタを最終要素にセットする	;	mixed end ( array &$array )	;	end() は array の内部ポインタを最後の要素まで進め、その値を返します。
prev	;	内部の配列ポインタをひとつ前に戻す	;	mixed prev ( array &$array )	;	内部の配列ポインタをひとつ前に戻します。
next	;	内部配列ポインタを進める	;	mixed next ( array &$array )	;	next() は、ひとつの違いを除いて current() と同じです。 next() は要素を返す前に内部配列ポインタをひとつ先に進めます。 つまり、次の配列要素を返すとともに内部配列ポインタをひとつ進めるということです。
reset	;	配列の内部ポインタを先頭の要素にセットする	;	mixed reset ( array &$array )	;	reset() は、array の内部ポインタの先頭の要素に戻し、配列の最初の要素の値を返します。
current	;	配列内の現在の要素を返す	;	mixed current ( array &$array )	;	各配列は、"カレント"の要素へのポインタを有しています。 このポインタは、その配列の最初の要素を指すように初期化されます。
key	;	配列からキーを取り出す	;	mixed key ( array &$array )	;	key() は、 現在の配列位置における連想配列要素のキーを返します。
min	;	最小値を返す	;	mixed min ( mixed $value1, mixed $value2 [, mixed $... ] )	;	パラメータとして配列をひとつだけ渡した場合は、 min() は配列の中で最も小さい数値を返します。 ふたつ以上のパラメータを指定した場合は、 min() はそれらの中で最も小さいものを返します。
max	;	最大値を返す	;	mixed max ( mixed $value1, mixed $value2 [, mixed $... ] )	;	パラメータとして配列をひとつだけ渡した場合は、 max() は配列の中で最も大きい数値を返します。 ふたつ以上のパラメータを指定した場合は、 max() はそれらの中で最も大きいものを返します。
in_array	;	配列に値があるかチェックする	;	bool in_array ( mixed $needle, array $haystack [, bool $strict = FALSE ] )	;	needle で haystack を検索します。 strict が設定されていない限りは型の比較は行いません。
array_search	;	指定した値を配列で検索し、見つかった場合に対応するキーを返す	;	mixed array_search ( mixed $needle, array $haystack [, bool $strict = false ] )	;	haystack において needle を検索します。
extract	;	配列からシンボルテーブルに変数をインポートする	;	int extract ( array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL ]] )	;	配列からシンボルテーブルに変数をインポートします。
compact	;	変数名とその値から配列を作成する	;	array compact ( mixed $varname [, mixed $... ] )	;	変数名とその値から配列を作成します。
array_fill	;	配列を指定した値で埋める	;	array array_fill ( int $start_index, int $num, mixed $value )	;	パラメータ value を値とする num 個のエントリからなる配列を埋めます。 この際、キーは、start_index パラメータから開始します。
array_fill_keys	;	キーを指定して、配列を値で埋める	;	array array_fill_keys ( array $keys, mixed $value )	;	パラメータ value で指定した値で配列を埋めます。 キーとして、配列 keys で指定した値を使用します。
range	;	ある範囲の整数を有する配列を作成する	;	array range ( mixed $start, mixed $end [, number $step = 1 ] )	;	ある範囲の整数を有する配列を作成します。
array_multisort	;	複数の多次元の配列をソートする	;	bool array_multisort ( array &$arr [, mixed $arg = SORT_ASC [, mixed $arg = SORT_REGULAR [, mixed $... ]]] )	;	array_multisort() は、複数の配列を一度に、 または、多次元の配列をその次元の一つでソートする際に使用可能です。 この関数は、ソートの際にキーの相関を維持します。
array_push	;	一つ以上の要素を配列の最後に追加する	;	int array_push ( array &$array, mixed $var [, mixed $... ] )	;	array_push() は、array をスタックとして処理し、渡された変数を array の最後に加えます。配列 array の長さは渡された変数の数だけ増加します。 各 var 毎に以下を繰り返すことと同じ効果があります。 <span style="color: #000000"> <span style="color: #0000BB"><?php<br />$array</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">$var</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">?></span> </span> 各 var で繰り返されます。
array_pop	;	配列の末尾から要素を取り除く	;	mixed array_pop ( array &$array )	;	array_pop() は配列 array の最後の値を取り出して返します。 配列 array は、要素一つ分短くなります。 array が空 (または、配列でない) の場合、 NULL が返されます。配列でない場合は、それに加えてさらに 警告 が発生します。
array_shift	;	配列の先頭から要素を一つ取り出す	;	mixed array_shift ( array &$array )	;	array_shift() は、array の最初の値を取り出して返します。配列 array は、要素一つ分だけ短くなり、全ての要素は前にずれます。 数値添字の配列のキーはゼロから順に新たに振りなおされますが、 リテラルのキーはそのままになります。
array_unshift	;	一つ以上の要素を配列の最初に加える	;	int array_unshift ( array &$array, mixed $var [, mixed $... ] )	;	array_unshift() は、array の先頭に指定された要素を加えます。リストの要素は全体として加えられるため、 加えられた要素の順番は変わらないことに注意してください。 配列の数値添字はすべて新たにゼロから振りなおされます。 リテラルのキーについては変更されません。
array_splice	;	配列の一部を削除し、他の要素で置換する	;	array array_splice ( array &$input, int $offset [, int $length = 0 [, mixed $replacement ]] )	;	配列 input から offset および length で指定された要素を削除し、配列 replacement でそれを置換します。
array_slice	;	配列の一部を展開する	;	array array_slice ( array $array, int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )	;	array_slice() は、array から引数 offset および length で指定された連続する要素を返します。
array_merge	;	ひとつまたは複数の配列をマージする	;	array array_merge ( array $array1 [, array $... ] )	;	前の配列の後ろに配列を追加することにより、 ひとつまたは複数の配列の要素をマージし、得られた配列を返します。
array_merge_recursive	;	二つ以上の配列を再帰的にマージする	;	array array_merge_recursive ( array $array1 [, array $... ] )	;	array_merge_recursive() は、 一つ以上の配列の要素をマージし、 前の配列の最後にもう一つの配列の値を追加します。 マージした後の配列を返します。
array_replace	;	渡された配列の要素を置き換える	;	array array_replace ( array $array, array $array1 [, array $... ] )	;	array_replace() は、 最初の配列の値をそれ以降の配列の同じ要素の値で置き換えます。 最初の配列のキーと同じキーが 2 番目の配列にあれば、 2 番目の配列の値が最初の配列の値を上書きします。 2 番目の配列に存在するキーが最初の配列に存在しなければ、 そのキーが新たに最初の配列内に作られます。 最初の配列にしか存在しないキーについては何も変わりません。 置き換え用の配列が複数渡された場合は渡した順に処理を行い、 後から渡した配列の値のほうが優先されます。
array_replace_recursive	;	渡された配列の要素を再帰的に置き換える	;	array array_replace_recursive ( array $array, array $array1 [, array $... ] )	;	array_replace_recursive() は、 最初の配列の値をそれ以降の配列の同じ要素の値で置き換えます。 最初の配列のキーと同じキーが 2 番目の配列にあれば、 2 番目の配列の値が最初の配列の値を上書きします。 2 番目の配列に存在するキーが最初の配列に存在しなければ、 そのキーが新たに最初の配列内に作られます。 最初の配列にしか存在しないキーについては何も変わりません。 置き換え用の配列が複数渡された場合は渡した順に処理を行い、 後から渡した配列の値のほうが優先されます。
array_keys	;	配列のキーすべて、あるいはその一部を返す	;	array array_keys ( array $input [, mixed $search_value = NULL [, bool $strict = false ]] )	;	array_keys() は、配列 input から全てのキー (数値および文字列) を返します。
array_values	;	配列の全ての値を返す	;	array array_values ( array $input )	;	array_values() は、配列 input から全ての値を取り出し、数値添字をつけた配列を返します。
array_count_values	;	配列の値の数を数える	;	array array_count_values ( array $input )	;	array_count_values() は、 配列 input の値をキーとし、 input におけるその値の出現回数を値とした配列を返します。
array_reverse	;	要素を逆順にした配列を返す	;	array array_reverse ( array $array [, bool $preserve_keys = false ] )	;	配列を受け取って、要素の順番を逆にした新しい配列を返します。
array_reduce	;	コールバック関数を用いて配列を普通の値に変更することにより、配列を再帰的に減らす	;	mixed callback ( mixed &$result, mixed $item )	;	array_reduce() は、配列 input の各要素に function 関数を繰り返し適用し、 配列を一つの値に減らします。
array_pad	;	指定長、指定した値で配列を埋める	;	array array_pad ( array $input, int $pad_size, mixed $pad_value )	;	array_pad() は、pad_size で指定した長さになるように値 pad_value で埋めて input のコピーを返します。 pad_size が正の場合、配列の右側が埋められます。 負の場合、配列の左側が埋められます。 pad_size の絶対値が input の長さ以下の場合、埋める処理は行われません。 一度に追加できる要素の最大数は 1048576 です。
array_flip	;	配列のキーと値を反転する	;	array array_flip ( array $trans )	;	array_flip() は、配列を反転して返します。 すなわち、trans のキーが値となり、 trans の値がキーとなります。
array_change_key_case	;	配列のすべてのキーを変更する	;	array array_change_key_case ( array $input [, int $case = CASE_LOWER ] )	;	input のすべてのキーを小文字あるいは大文字にした配列を返します。 数値添字はそのままとなります。
array_rand	;	配列から一つ以上の要素をランダムに取得する	;	mixed array_rand ( array $input [, int $num_req = 1 ] )	;	一つ以上のランダムなエントリを配列から取り出し、 取り出したエントリのキーを返します。
array_unique	;	配列から重複した値を削除する	;	array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )	;	array を入力とし、値に重複のない新規配列を返します。
array_intersect	;	配列の共通項を計算する	;	array array_intersect ( array $array1, array $array2 [, array $ ... ] )	;	array_intersect() は、他の全ての引数に存在する array1 の値を全て有する配列を返します。 キーと値の関係は維持されることに注意してください。
array_intersect_key	;	キーを基準にして配列の共通項を計算する	;	array array_intersect_key ( array $array1, array $array2 [, array $ ... ] )	;	array_intersect_key() は、 array1 のエントリのうち、 その他のすべての引数の中に共通して存在するキーと一致するキーの値からなる配列を返します。
array_intersect_ukey	;	キーを基準にし、コールバック関数を用いて   配列の共通項を計算する	;	int callback ( mixed $a, mixed $b )	;	array_intersect_ukey() は、他の全ての引数に存在する array1 の値を全て有する配列を返します。
array_uintersect	;	データの比較にコールバック関数を用い、配列の共通項を計算する	;	int callback ( mixed $a, mixed $b )	;	データの比較にコールバック関数を用い、配列の共通項を計算します。
array_intersect_assoc	;	追加された添字の確認も含めて配列の共通項を確認する	;	array array_intersect_assoc ( array $array1, array $array2 [, array $ ... ] )	;	
array_uintersect_assoc	;	データの比較にコールバック関数を用い、   追加された添字の確認も含めて配列の共通項を計算する	;	int callback ( mixed $a, mixed $b )	;	データの比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算します。
array_intersect_uassoc	;	追加された添字の確認も含め、コールバック関数を用いて   配列の共通項を確認する	;	int callback ( mixed $a, mixed $b )	;	array_intersect_uassoc() は、全ての引数に現れる array1 の全ての値を含む配列を返します。 array_intersect() と異なり、 キーが比較に使用されることに注意してください。
array_uintersect_uassoc	;	データと添字の比較にコールバック関数を用い、   追加された添字の確認も含めて配列の共通項を計算する	;	int callback ( mixed $a, mixed $b )	;	データと添字の比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算します。 array_uintersect() と異なり、 キーが比較に使用されることに注意してください。 データと添字は、それぞれ個別のコールバック関数を用いて比較されます。
array_diff	;	配列の差を計算する	;	array array_diff ( array $array1, array $array2 [, array $... ] )	;	array1 を array2 と比較し、その差を返します。
array_diff_key	;	キーを基準にして配列の差を計算する	;	array array_diff_key ( array $array1, array $array2 [, array $... ] )	;	array1 のキーを array2 のキーと比較し、その差を返します。 この関数は array_diff() に似ていますが、 値ではなくキーを用いて比較するという点が異なります。
array_diff_ukey	;	キーを基準にし、コールバック関数を用いて配列の差を計算する	;	int callback ( mixed $a, mixed $b )	;	array1 のキーを array2 のキーと比較し、その差を返します。 この関数は array_diff() に似ていますが、 値ではなくキーを用いて比較するという点が異なります。
array_udiff	;	データの比較にコールバック関数を用い、配列の差を計算する	;	int callback ( mixed $a, mixed $b )	;	データの比較にコールバック関数を用い、配列の差を計算します。 この関数は array_diff() と異なり、 データの比較に内部関数を利用します。
array_diff_assoc	;	追加された添字の確認を含めて配列の差を計算する	;	array array_diff_assoc ( array $array1, array $array2 [, array $... ] )	;	array1 を array2 と比較し、 その差を返します。 array_diff() とは異なり、 配列のキーも用いて比較を行います。
array_udiff_assoc	;	データの比較にコールバック関数を用い、   追加された添字の確認を含めて配列の差を計算する	;	int callback ( mixed $a, mixed $b )	;	データの比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算します。
array_diff_uassoc	;	ユーザーが指定したコールバック関数を利用し、    追加された添字の確認を含めて配列の差を計算する	;	int callback ( mixed $a, mixed $b )	;	array1 のキーを array2 のキーと比較し、その差を返します。 この関数は array_diff() に似ていますが、 配列のキーを用いて比較するという点が異なります。
array_udiff_uassoc	;	データと添字の比較にコールバック関数を用い、   追加された添字の確認を含めて配列の差を計算する	;	int callback ( mixed $a, mixed $b )	;	データと添字の比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算します。
array_sum	;	配列の中の値の合計を計算する	;	number array_sum ( array $array )	;	array_sum() は、配列の中の値の合計を整数または float として返します。
array_product	;	配列の値の積を計算する	;	number array_product ( array $array )	;	array_product() は、配列の値の積を計算します。
array_filter	;	コールバック関数を使用して、配列の要素をフィルタリングする	;	array array_filter ( array $input [, callable $callback = "" ] )	;	callback 関数によりフィルタ処理が行われた input の全ての要素を含む配列を返します。 callback 関数が true を返した場合、 input の現在の値が結果の配列に入ります。 input が連想配列の場合、 キーは保存されます。
array_map	;	指定した配列の要素にコールバック関数を適用する	;	array array_map ( callable $callback, array $arr1 [, array $... ] )	;	array_map() は、arr1 の各要素に callback 関数を適用した後、 その全ての要素を含む配列を返します。 callback 関数が受け付けるパラメータの数は、 array_map() に渡される配列の数に一致している必要があります。
array_chunk	;	配列を分割する	;	array array_chunk ( array $input, int $size [, bool $preserve_keys = false ] )	;	配列を、size 個ずつの要素に分割します。 最後の部分の要素数は size より小さくなることもあります。
array_combine	;	一方の配列をキーとして、もう一方の配列を値として、ひとつの配列を生成する	;	array array_combine ( array $keys, array $values )	;	keys 配列の値をキーとして、また values 配列の値を対応する値として生成した 配列 を作成します。
array_key_exists	;	指定したキーまたは添字が配列にあるかどうかを調べる	;	bool array_key_exists ( mixed $key, array $search )	;	指定した key が配列に設定されている場合、 array_key_exists() は TRUE を返します。 key は配列添字として使用できる全ての値を使用可能です。
pos	;	current()  のエイリアス	;		;	
sizeof	;	count()  のエイリアス	;		;	
key_exists	;		;		;	
assert	;	assertion が FALSE であるかどうかを調べる	;	bool assert ( mixed $assertion [, string $description ] )	;	assert() は、指定した assertion を調べて、結果が FALSE の場合に適切な動作をします。
assert_options	;	様々な assert フラグを設定/取得する	;	mixed assert_options ( int $what [, mixed $value ] )	;	種々の assert() 制御オプションを設定したり、 単に現在の設定を調べたりします。
version_compare	;	ふたつの "PHP 標準" バージョン番号文字列を比較する	;	mixed version_compare ( string $version1, string $version2 [, string $operator ] )	;	version_compare() は、ふたつの "PHP 標準" バージョン 番号文字列を比較します。この関数は、いくつかのバージョンの PHP でのみ 動作するプログラムを書きたい場合に有用です。
ftok	;	パス名とプロジェクト ID を、System V IPC キーに変換する	;	int ftok ( string $pathname, string $proj )	;	この関数は、pathname で表される既存のアクセス可能なファイルおよびプロジェクト ID (proj) を、 shmop_open() やその他で使用する System V IPC キーに変換します。
str_rot13	;	文字列に rot13 変換を行う	;	string str_rot13 ( string $str )	;	引数 str に対して ROT13 変換を施し、 その結果の文字列を返します。
stream_get_filters	;	登録されているフィルタのリストを取得する	;	array stream_get_filters ( void )	;	
stream_filter_register	;	ユーザー定義のストリームフィルタを登録する	;	bool stream_filter_register ( string $filtername, string $classname )	;	stream_filter_register() は、 fopen() や fread() などのファイルシステムの関数で利用可能な 登録されているどの種類のストリームとも一緒に使うことのできる カスタムフィルタを登録します。
stream_bucket_make_writeable	;	操作する brigade から bucket オブジェクトを返す	;	object stream_bucket_make_writeable ( resource $brigade )	;	
stream_bucket_prepend	;	bucket を brigade の先頭に追加する	;	void stream_bucket_prepend ( resource $brigade, resource $bucket )	;	この関数を呼ぶと、bucket brigade の先頭に bucket を追加できます。一般に、 php_user_filter::filter() から呼ばれます。
stream_bucket_append	;	bucket を brigade に追加する	;	void stream_bucket_append ( resource $brigade, resource $bucket )	;	
stream_bucket_new	;	現在のストリームで使用する新しい bucket を作成する	;	object stream_bucket_new ( resource $stream, string $buffer )	;	
output_add_rewrite_var	;	URL リライタの値を追加する	;	bool output_add_rewrite_var ( string $name, string $value )	;	この関数は、URL リライト機構に新しい名前/値の組を追加します。 名前および値は、URL (GET パラメータとして) およびフォーム (hidden フィールドとして) で追加されます。これは、session.use_trans_sid で透過的 URL リライティングが有効になっている場合に セッション ID が渡される方法と同じです。 絶対 URL (http://example.com/..) はリライトされないことに注意しましょう。
output_reset_rewrite_vars	;	URL リライタの値をリセットする	;	bool output_reset_rewrite_vars ( void )	;	この関数は URL リライタをリセットし、 output_add_rewrite_var() 関数や セッション管理機構 (session.use_trans_sid が session_start() に設定されている場合) によって事前に設定されたリライト変数を削除します。
sys_get_temp_dir	;	一時ファイル用に使用されるディレクトリのパスを返す	;	string sys_get_temp_dir ( void )	;	PHP が一時ファイルを保存するデフォルトのディレクトリのパスを返します。
token_get_all	;	指定したソースを PHP トークンに分割する	;	array token_get_all ( string $source )	;	token_get_all() は指定した文字列 source をパースし、Zend engine の 字句解析スキャナにより PHP 言語のトークンに分割します。
token_name	;	指定した PHP トークンのシンボル名を取得する	;	string token_name ( int $token )	;	token_name() は、PHP token 値のシンボル名を返します。
xml_parser_create	;	XML パーサを作成する	;	resource xml_parser_create ([ string $encoding ] )	;	xml_parser_create() は新しい XML パーサを作成し、 他の XML 関数が使用するハンドルを返します。
xml_parser_create_ns	;	名前空間をサポートした XML パーサを生成する	;	resource xml_parser_create_ns ([ string $encoding [, string $separator = ':' ]] )	;	xml_parser_create_ns() は XML 名前空間をサポートした 新しい XML パーサを作成し、他の XML 関数が使用するハンドルを返します。
xml_set_object	;	オブジェクト内部で XML パーサを使用する	;	bool xml_set_object ( resource $parser, object &$object )	;	この関数は、object の内部から parser を使用可能にします。 xml_set_element_handler() 等により設定される 全てのコールバック関数は、object のメソッドであると仮定されます。
xml_set_element_handler	;	開始要素および終了要素のハンドラを設定する	;	end_element_handler ( resource $parser, string $name )	;	XML パーサ parser の要素ハンドラ関数を設定します。 start_element_handler および end_element_handler は、 xml_parse() が parser を コールした際に存在している必要がある関数の名前を有する文字列です。
xml_set_character_data_handler	;	文字データハンドラを設定する	;	handler ( resource $parser, string $data )	;	XML パーサ parser の文字データ用ハンドラ関数を設定します。
xml_set_processing_instruction_handler	;	処理命令 (PI) 用ハンドラを設定する	;	handler ( resource $parser, string $target, string $data )	;	XML パーサ parserの処理命令 (PI) 用ハンドラ関数を設定します。
xml_set_default_handler	;	デフォルトのハンドラを設定する	;	handler ( resource $parser, string $data )	;	XMLパーサ parser のデフォルトのハンドラ関数を設定します。
xml_set_unparsed_entity_decl_handler	;	処理されないエンティティ宣言用ハンドラを設定する	;	handler ( resource $parser, string $entity_name, string $base, string $system_id, string $public_id, string $notation_name )	;	XML パーサ parser の、 処理されないエンティティ宣言用ハンドラ関数を設定します。
xml_set_notation_decl_handler	;	表記法宣言ハンドラを設定する	;	handler ( resource $parser, string $notation_name, string $base, string $system_id, string $public_id )	;	XML パーサ parser の表記法宣言用ハンドラ関数を設定します。
xml_set_external_entity_ref_handler	;	外部エンティティリファレンスハンドラを設定する	;	handler ( resource $parser, string $open_entity_names, string $base, string $system_id, string $public_id )	;	XML パーサ parser の外部エンティティ参照用ハンドラ関数を設定します。
xml_set_start_namespace_decl_handler	;	名前空間開始ハンドラを設定する	;	handler ( resource $parser, string $prefix, string $uri )	;	名前空間を宣言したところでコールされるハンドラを設定します。 名前空間の宣言は、開始タグの中で行います。 しかし、名前空間宣言の開始ハンドラがコールされるのは、 その開始タグのハンドラがコールされるより前になります。
xml_set_end_namespace_decl_handler	;	名前空間終了ハンドラを設定する	;	handler ( resource $parser, string $prefix )	;	名前空間宣言のスコープを抜けるときにコールされるハンドラを設定します。 これがコールされるのは、各名前空間宣言において、 名前空間が宣言された要素の終了タグのハンドラがコールされた後のことです。
xml_parse	;	XML ドキュメントの処理を開始する	;	int xml_parse ( resource $parser, string $data [, bool $is_final = false ] )	;	xml_parse() は XML ドキュメントを処理します。 設定されているイベントのハンドラが、必要に応じてコールされます。
xml_parse_into_struct	;	配列構造体に XML データを処理する	;	int xml_parse_into_struct ( resource $parser, string $data, array &$values [, array &$index ] )	;	この関数は、XML 文字列を処理し、2つの配列構造体に代入します。 ひとつめの配列 (index) は、配列 values にある適当な値の位置を指すポインタを保持しています。 これら最後の二つのパラメータは参照渡しとする必要があります。
xml_get_error_code	;	XML パーサのエラーコードを得る	;	int xml_get_error_code ( resource $parser )	;	XML パーサのエラーコードを取得します。
xml_error_string	;	XML パーサのエラー文字列を得る	;	string xml_error_string ( int $code )	;	エラーコード code の説明を有する文字列を 返します。
xml_get_current_line_number	;	XML パーサのカレントの行番号を得る	;	int xml_get_current_line_number ( resource $parser )	;	指定した XML パーサのカレントの行番号を取得します。
xml_get_current_column_number	;	XML パーサのカレントのカラム番号を取得する	;	int xml_get_current_column_number ( resource $parser )	;	指定した XML パーサのカレントのカラム番号を取得します。
xml_get_current_byte_index	;	XML パーサのカレントのバイトインデックスを得る	;	int xml_get_current_byte_index ( resource $parser )	;	指定した XML パーサのカレントのバイトインデックスを取得します。
xml_parser_free	;	XML パーサを解放する	;	bool xml_parser_free ( resource $parser )	;	指定した XML パーサ parser を解放します。
xml_parser_set_option	;	XML パーサのオプションを設定する	;	bool xml_parser_set_option ( resource $parser, int $option, mixed $value )	;	XML パーサのオプションを設定します。
xml_parser_get_option	;	XML パーサからオプションを得る	;	mixed xml_parser_get_option ( resource $parser, int $option )	;	XML パーサからオプションの値を取得します。
utf8_encode	;	ISO-8859-1 文字列を UTF-8 にエンコードする	;	string utf8_encode ( string $data )	;	この関数は、文字列 data を UTF-8 にエンコードし、エンコードされた文字列を 返します。UTF-8 は、 wide character の値をバイトストリームに エンコードするために Unicode で使用される 標準的な仕組みです。UTF-8 は、プレーンな ASCII文字を通し、自己同期(これは、バイトストリームの 開始地点をプログラムが見積もることが可能であることを意味します) します。また、ソートのような標準的な文字列比較関数を使用可能です。 PHP は、UTF-8 文字を次のように最大 4 バイトで エンコードします。 UTF-8 エンコーディング バイト ビット 表現形式 1 7 0bbbbbbb 2 11 110bbbbb 10bbbbbb 3 16 1110bbbb 10bbbbbb 10bbbbbb 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb 各 b は、文字列データを保存可能なビットを示します。
utf8_decode	;	UTF-8 エンコードされた ISO-8859-1 文字列をシングルバイトの ISO-8859-1 に変換する	;	string utf8_decode ( string $data )	;	この関数は、data が UTF-8 エンコードされているものとみなして ISO-8859-1 に変換します。
xmlwriter_open_uri	;	ソース URI を指定して新しい xmlwriter を作成する	;	resource xmlwriter_open_uri ( string $uri )	;	uri を指定した新しい XMLWriter を作成します。
xmlwriter_open_memory	;	文字列の出力にメモリを使用する新しい xmlwriter を作成する	;	resource xmlwriter_open_memory ( void )	;	文字列の出力にメモリを使用する新しい XMLWriter を作成します。
xmlwriter_set_indent	;	字下げの on/off を切り替える	;	bool xmlwriter_set_indent ( resource $xmlwriter, bool $indent )	;	字下げの on/off を切り替えます。
xmlwriter_set_indent_string	;	字下げに使用する文字列を設定する	;	bool xmlwriter_set_indent_string ( resource $xmlwriter, string $indentString )	;	文字列を設定します。この文字を使用して、結果の xml の要素/属性 を字下げします。
xmlwriter_start_comment	;	コメントを開始する	;	bool xmlwriter_start_comment ( resource $xmlwriter )	;	コメントを開始します。
xmlwriter_end_comment	;	コメントの終了部を作成する	;	bool xmlwriter_end_comment ( resource $xmlwriter )	;	現在のコメントを終了します。
xmlwriter_start_attribute	;	属性を開始する	;	bool xmlwriter_start_attribute ( resource $xmlwriter, string $name )	;	属性を開始します。
xmlwriter_end_attribute	;	属性を終了する	;	bool xmlwriter_end_attribute ( resource $xmlwriter )	;	現在の属性を終了します。
xmlwriter_write_attribute	;	属性全体を書き込む	;	bool xmlwriter_write_attribute ( resource $xmlwriter, string $name, string $value )	;	属性全体を書き込みます。
xmlwriter_start_attribute_ns	;	名前空間つきの属性を開始する	;	bool xmlwriter_start_attribute_ns ( resource $xmlwriter, string $prefix, string $name, string $uri )	;	名前空間つきの属性を開始します。
xmlwriter_write_attribute_ns	;	名前空間つき属性全体を書き込む	;	bool xmlwriter_write_attribute_ns ( resource $xmlwriter, string $prefix, string $name, string $uri, string $content )	;	名前空間つき属性全体を書き込みます。
xmlwriter_start_element	;	要素の開始タグを作成する	;	bool xmlwriter_start_element ( resource $xmlwriter, string $name )	;	要素を開始します。
xmlwriter_end_element	;	現在の要素を終了する	;	bool xmlwriter_end_element ( resource $xmlwriter )	;	現在の要素を終了します。
xmlwriter_full_end_element	;	現在の要素を終了する	;	bool xmlwriter_full_end_element ( resource $xmlwriter )	;	現在の xml 要素を終了します。要素が空であっても終了タグを書き込みます。
xmlwriter_start_element_ns	;	名前空間つき要素の開始タグを作成する	;	bool xmlwriter_start_element_ns ( resource $xmlwriter, string $prefix, string $name, string $uri )	;	名前空間つき要素を開始します。
xmlwriter_write_element	;	要素タグ全体を書き込む	;	bool xmlwriter_write_element ( resource $xmlwriter, string $name [, string $content ] )	;	要素タグ全体を書き込みます。
xmlwriter_write_element_ns	;	名前空間つき要素タグ全体を書き込む	;	bool xmlwriter_write_element_ns ( resource $xmlwriter, string $prefix, string $name, string $uri [, string $content ] )	;	名前空間つき要素タグ全体を書き込みます。
xmlwriter_start_pi	;	PI (処理命令) の開始タグを作成する	;	bool xmlwriter_start_pi ( resource $xmlwriter, string $target )	;	処理命令の開始タグを作成します。
xmlwriter_end_pi	;	現在の PI (処理命令) を終了する	;	bool xmlwriter_end_pi ( resource $xmlwriter )	;	現在の処理命令を終了します。
xmlwriter_write_pi	;	PI (処理命令) 書き込む	;	bool xmlwriter_write_pi ( resource $xmlwriter, string $target, string $content )	;	処理命令を書き込みます。
xmlwriter_start_cdata	;	CDATA の開始タグを作成する	;	bool xmlwriter_start_cdata ( resource $xmlwriter )	;	CDATA を開始します。
xmlwriter_end_cdata	;	現在の CDATA を終了する	;	bool xmlwriter_end_cdata ( resource $xmlwriter )	;	現在の CDATA セクションを終了します。
xmlwriter_write_cdata	;	CDATA タグ全体を書き込む	;	bool xmlwriter_write_cdata ( resource $xmlwriter, string $content )	;	CDATA 全体を書き込みます。
xmlwriter_text	;	テキストを書き込む	;	bool xmlwriter_text ( resource $xmlwriter, string $content )	;	テキストを書き込みます。
xmlwriter_write_raw	;	生の XML テキストを書き込む	;	bool xmlwriter_write_raw ( resource $xmlwriter, string $content )	;	生の xml テキストを書き込みます。
xmlwriter_start_document	;	ドキュメントタグを作成する	;	bool xmlwriter_start_document ( resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )	;	ドキュメントを開始します。
xmlwriter_end_document	;	現在のドキュメントを終了する	;	bool xmlwriter_end_document ( resource $xmlwriter )	;	現在のドキュメントを終了します。
xmlwriter_write_comment	;	コメントタグ全体を書き込む	;	bool xmlwriter_write_comment ( resource $xmlwriter, string $content )	;	コメント全体を書き込みます。
xmlwriter_start_dtd	;	DTD の開始タグを作成する	;	bool xmlwriter_start_dtd ( resource $xmlwriter, string $qualifiedName [, string $publicId [, string $systemId ]] )	;	DTD を開始します。
xmlwriter_end_dtd	;	現在の DTD を終了する	;	bool xmlwriter_end_dtd ( resource $xmlwriter )	;	ドキュメントの DTD を終了します。
xmlwriter_write_dtd	;	DTD タグ全体を書き込む	;	bool xmlwriter_write_dtd ( resource $xmlwriter, string $name [, string $publicId [, string $systemId [, string $subset ]]] )	;	DTD 全体を書き込みます。
xmlwriter_start_dtd_element	;	DTD 要素を開始する	;	bool xmlwriter_start_dtd_element ( resource $xmlwriter, string $qualifiedName )	;	DTD 要素を開始します。
xmlwriter_end_dtd_element	;	現在の DTD 要素を終了する	;	bool xmlwriter_end_dtd_element ( resource $xmlwriter )	;	現在の DTD 要素を終了します。
xmlwriter_write_dtd_element	;	DTD 要素タグ全体を書き込む	;	bool xmlwriter_write_dtd_element ( resource $xmlwriter, string $name, string $content )	;	DTD 要素全体を書き込みます。
xmlwriter_start_dtd_attlist	;	DTD 属性リストを開始する	;	bool xmlwriter_start_dtd_attlist ( resource $xmlwriter, string $name )	;	DTD 属性リストを開始します。
xmlwriter_end_dtd_attlist	;	現在の DTD 属性リストを終了する	;	bool xmlwriter_end_dtd_attlist ( resource $xmlwriter )	;	現在の DTD 属性リストを終了します。
xmlwriter_write_dtd_attlist	;	DTD 属性リストタグ全体を書き込む	;	bool xmlwriter_write_dtd_attlist ( resource $xmlwriter, string $name, string $content )	;	DTD 属性リストを書き込みます。
xmlwriter_start_dtd_entity	;	DTD エンティティを開始する	;	bool xmlwriter_start_dtd_entity ( resource $xmlwriter, string $name, bool $isparam )	;	DTD エンティティを開始します。
xmlwriter_end_dtd_entity	;	現在の DTD エンティティを終了する	;	bool xmlwriter_end_dtd_entity ( resource $xmlwriter )	;	現在の DTD エンティティを終了します。
xmlwriter_write_dtd_entity	;	DTD エンティティタグ全体を書き込む	;	bool xmlwriter_write_dtd_entity ( resource $xmlwriter, string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid )	;	DTD エンティティ全体を書き込みます。
xmlwriter_output_memory	;	現在のバッファを返す	;	string xmlwriter_output_memory ( resource $xmlwriter [, bool $flush = true ] )	;	現在のバッファを返します。
xmlwriter_flush	;	現在のバッファをフラッシュする	;	mixed xmlwriter_flush ( resource $xmlwriter [, bool $empty = true ] )	;	現在のバッファをフラッシュします。
zip_open	;	Zip ファイルアーカイブをオープンする	;	resource zip_open ( string $filename )	;	読み込み用に新規に Zip アーカイブをオープンします。
zip_close	;	ZIP ファイルアーカイブを閉じる	;	void zip_close ( resource $zip )	;	ZIP ファイルアーカイブを閉じます。
zip_read	;	Zip ファイルアーカイブの中の次のエントリを読み込む	;	resource zip_read ( resource $zip )	;	Zip ファイルアーカイブの中の次のエントリを読み込みます。
zip_entry_open	;	読込み用にディレクトリエントリをオープンする	;	bool zip_entry_open ( resource $zip, resource $zip_entry [, string $mode ] )	;	読込み用にzipファイルの中にディレクトリエントリをオープンします。
zip_entry_close	;	ディレクトリエントリを閉じる	;	bool zip_entry_close ( resource $zip_entry )	;	指定されたディレクトリエントリを閉じます。
zip_entry_read	;	オープンされたディレクトリエントリから読み込む	;	string zip_entry_read ( resource $zip_entry [, int $length ] )	;	オープンされたディレクトリエントリから読み込みます。
zip_entry_filesize	;	ディレクトリエントリの実際のファイルサイズを取得する	;	int zip_entry_filesize ( resource $zip_entry )	;	ディレクトリエントリの実際のファイルサイズを返します。
zip_entry_name	;	ディレクトリエントリの名前を取得する	;	string zip_entry_name ( resource $zip_entry )	;	指定したディレクトリエントリの名前を返します。
zip_entry_compressedsize	;	ディレクトリエントリの圧縮時のサイズを取得する	;	int zip_entry_compressedsize ( resource $zip_entry )	;	ディレクトリエントリの圧縮時のサイズを取得します。
zip_entry_compressionmethod	;	ディレクトリエントリの圧縮方法を取得する	;	string zip_entry_compressionmethod ( resource $zip_entry )	;	zip_entryにより指定されたディレクトリエントリの 圧縮方法を返します。
dl	;	実行時に PHP 拡張モジュールをロードする	;	bool dl ( string $library )	;	library で指定された PHP 拡張モジュールを読み込みます。
